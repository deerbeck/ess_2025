
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011f4  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00020430  2**0
                  CONTENTS
  5 .data         00000430  20000000  0c0011f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000010  20000430  0c001624  00020430  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00020430  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000000  30000000  30000000  00020430  2**0
                  CONTENTS
 10 .debug_aranges 000001d8  00000000  00000000  00020430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   000036e6  00000000  00000000  00020608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00000c52  00000000  00000000  00023cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00001a72  00000000  00000000  00024940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  000003ac  00000000  00000000  000263b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000786bb  00000000  00000000  00026760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0000073c  00000000  00000000  0009ee1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000000d8  00000000  00000000  0009f557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .build_attributes 0000020a  00000000  00000000  0009f62f  2**0
                  CONTENTS, READONLY
 19 .debug_macro  0001919d  00000000  00000000  0009f839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 f1 03 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
 8000206:	4780      	blx	r0
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)
 800020c:	42ac      	cmp	r4, r5
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
 8000210:	6821      	ldr	r1, [r4, #0]
 8000212:	6862      	ldr	r2, [r4, #4]
 8000214:	68a3      	ldr	r3, [r4, #8]
 8000216:	3b04      	subs	r3, #4
 8000218:	bfa2      	ittt	ge
 800021a:	58c8      	ldrge	r0, [r1, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>
 8000220:	340c      	adds	r4, #12
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)
 8000228:	42a3      	cmp	r3, r4
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
 800022c:	6819      	ldr	r1, [r3, #0]
 800022e:	685a      	ldr	r2, [r3, #4]
 8000230:	2000      	movs	r0, #0
 8000232:	3a04      	subs	r2, #4
 8000234:	bfa4      	itt	ge
 8000236:	5088      	strge	r0, [r1, r2]
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>
 800023a:	3308      	adds	r3, #8
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
 8000240:	4780      	blx	r0
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0011f4 	.word	0x0c0011f4
 800024c:	20000000 	.word	0x20000000
 8000250:	00000430 	.word	0x00000430
 8000254:	0c001624 	.word	0x0c001624
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c0011f4 	.word	0x0c0011f4
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c0011f4 	.word	0x0c0011f4
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000430 	.word	0x20000430
 800027c:	0000000c 	.word	0x0000000c
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
 8000290:	10000800 	.word	0x10000800
 8000294:	080008dd 	.word	0x080008dd
 8000298:	08000248 	.word	0x08000248
 800029c:	08000278 	.word	0x08000278
 80002a0:	08000278 	.word	0x08000278
 80002a4:	08000290 	.word	0x08000290
 80002a8:	08000ce9 	.word	0x08000ce9
 80002ac:	08000605 	.word	0x08000605

080002b0 <BusFault_Handler>:
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	db0b      	blt.n	80002de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	f003 021f 	and.w	r2, r3, #31
 80002cc:	4907      	ldr	r1, [pc, #28]	; (80002ec <__NVIC_EnableIRQ+0x38>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	095b      	lsrs	r3, r3, #5
 80002d4:	2001      	movs	r0, #1
 80002d6:	fa00 f202 	lsl.w	r2, r0, r2
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <__NVIC_SetPriority+0x4c>)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	0092      	lsls	r2, r2, #2
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4908      	ldr	r1, [pc, #32]	; (8000340 <__NVIC_SetPriority+0x50>)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	3b04      	subs	r3, #4
 8000328:	0092      	lsls	r2, r2, #2
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000350:	78fb      	ldrb	r3, [r7, #3]
 8000352:	2201      	movs	r2, #1
 8000354:	409a      	lsls	r2, r3
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	605a      	str	r2, [r3, #4]
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr

08000366 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
 800036e:	460b      	mov	r3, r1
 8000370:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8000372:	78fb      	ldrb	r3, [r7, #3]
 8000374:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000378:	409a      	lsls	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	605a      	str	r2, [r3, #4]
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
	...

0800038c <initCCU4>:
#define LED2_PIN 0

volatile uint32_t ms_counter = 0; // Global counter for milliseconds

void initCCU4()
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
    /* Release CCU4 instance 0 from reset (manual 22.6.1 step 2) */
    SCU_RESET->PRCLR0 = SCU_RESET_PRCLR0_CCU40RS_Msk;
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <initCCU4+0x54>)
 8000392:	2204      	movs	r2, #4
 8000394:	615a      	str	r2, [r3, #20]
    /* Enable clock to CCUs (manual 22.6.1 step 3) */
    SCU_CLK->CLKSET = SCU_CLK_CLKSET_CCUCEN_Msk;
 8000396:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <initCCU4+0x58>)
 8000398:	2210      	movs	r2, #16
 800039a:	605a      	str	r2, [r3, #4]
    /* Enable prescaler in CCU4 instance 0 (manual 22.6.1 step 4) */
    CCU40->GIDLC = CCU4_GIDLC_SPRB_Msk;
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <initCCU4+0x5c>)
 800039e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003a2:	60da      	str	r2, [r3, #12]
    // set prescaler to 2
    CCU40_CC42->PSC = 0x1;
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <initCCU4+0x60>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure period and compare in CCU4 instance 0 slice 2 (manual 22.6.1 step 6)
    Period value 60.000 -1 to get a 1 ms interrupt*/
    CCU40_CC42->PRS = 0xEA60 - 0x1;
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <initCCU4+0x60>)
 80003ac:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80003b0:	635a      	str	r2, [r3, #52]	; 0x34
    // CCU40_CC42->CRS = (1 - 0.99) * 0xFFFF;
    /* Request shadow transfer for CCU4 instance 0 slice 2 (manual 22.6.1 step 6) */
    CCU40->GCSS = CCU4_GCSS_S2SE_Msk;
 80003b2:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <initCCU4+0x5c>)
 80003b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003b8:	611a      	str	r2, [r3, #16]
    /* Enable timer slice 2 in CCU4 instance 0 (manual 22.6.1 step 8) */
    CCU40->GIDLC = CCU4_GIDLC_CS2I_Msk;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <initCCU4+0x5c>)
 80003bc:	2204      	movs	r2, #4
 80003be:	60da      	str	r2, [r3, #12]
    // enable period match interrupt
    CCU40_CC42->INTE = CCU4_CC4_INTE_PME_Msk;
 80003c0:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <initCCU4+0x60>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    NVIC_SetPriority(CCU40_0_IRQn, 3);
 80003c8:	2103      	movs	r1, #3
 80003ca:	202c      	movs	r0, #44	; 0x2c
 80003cc:	f7ff ff90 	bl	80002f0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(CCU40_0_IRQn);
 80003d0:	202c      	movs	r0, #44	; 0x2c
 80003d2:	f7ff ff6f 	bl	80002b4 <__NVIC_EnableIRQ>
    /* Start slice 2 in CCU4 instance 0 by setting run bit (manual 22.6.1 step 9) */
    CCU40_CC42->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80003d6:	4b05      	ldr	r3, [pc, #20]	; (80003ec <initCCU4+0x60>)
 80003d8:	2201      	movs	r2, #1
 80003da:	60da      	str	r2, [r3, #12]
}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	50004400 	.word	0x50004400
 80003e4:	50004600 	.word	0x50004600
 80003e8:	4000c000 	.word	0x4000c000
 80003ec:	4000c300 	.word	0x4000c300

080003f0 <CCU40_0_IRQHandler>:

void CCU40_0_IRQHandler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
    if (CCU40_CC42->INTS & CCU4_CC4_INTS_PMUS_Msk) // Check period match interrupt flag
 80003f4:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <CCU40_0_IRQHandler+0x30>)
 80003f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d008      	beq.n	8000414 <CCU40_0_IRQHandler+0x24>
    {
        ms_counter++;                           // Increment millisecond counter
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <CCU40_0_IRQHandler+0x34>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	3301      	adds	r3, #1
 8000408:	4a06      	ldr	r2, [pc, #24]	; (8000424 <CCU40_0_IRQHandler+0x34>)
 800040a:	6013      	str	r3, [r2, #0]
        CCU40_CC42->SWR = CCU4_CC4_SWR_RPM_Msk; // Clear interrupt flag
 800040c:	4b04      	ldr	r3, [pc, #16]	; (8000420 <CCU40_0_IRQHandler+0x30>)
 800040e:	2201      	movs	r2, #1
 8000410:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	4000c300 	.word	0x4000c300
 8000424:	20000430 	.word	0x20000430

08000428 <get_elapsed_time_ms>:

uint32_t get_elapsed_time_ms()
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
    return ms_counter; // Return the current value of the millisecond counter
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <get_elapsed_time_ms+0x14>)
 800042e:	681b      	ldr	r3, [r3, #0]
}
 8000430:	4618      	mov	r0, r3
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	20000430 	.word	0x20000430

08000440 <delay_ms>:

void delay_ms(uint32_t delay)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
    uint32_t start_time = get_elapsed_time_ms();
 8000448:	f7ff ffee 	bl	8000428 <get_elapsed_time_ms>
 800044c:	60f8      	str	r0, [r7, #12]
    while ((get_elapsed_time_ms() - start_time) < delay)
 800044e:	bf00      	nop
 8000450:	f7ff ffea 	bl	8000428 <get_elapsed_time_ms>
 8000454:	4602      	mov	r2, r0
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	1ad3      	subs	r3, r2, r3
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	429a      	cmp	r2, r3
 800045e:	d8f7      	bhi.n	8000450 <delay_ms+0x10>
    {
        // Wait for the specified delay
    }
}
 8000460:	bf00      	nop
 8000462:	bf00      	nop
 8000464:	3710      	adds	r7, #16
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
	...

0800046c <sendMorseCode>:

void sendMorseCode(const char *message)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b0ae      	sub	sp, #184	; 0xb8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
    const char *morseCode[] = {
 8000474:	4a5f      	ldr	r2, [pc, #380]	; (80005f4 <sendMorseCode+0x188>)
 8000476:	f107 0318 	add.w	r3, r7, #24
 800047a:	4611      	mov	r1, r2
 800047c:	2290      	movs	r2, #144	; 0x90
 800047e:	4618      	mov	r0, r3
 8000480:	f000 fc56 	bl	8000d30 <memcpy>
        ".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..",
        "-----", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----."};

    const XMC_GPIO_CONFIG_t LED_config = {
 8000484:	4a5c      	ldr	r2, [pc, #368]	; (80005f8 <sendMorseCode+0x18c>)
 8000486:	f107 030c 	add.w	r3, r7, #12
 800048a:	ca07      	ldmia	r2, {r0, r1, r2}
 800048c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        .mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL,
        .output_level = XMC_GPIO_OUTPUT_LEVEL_LOW,
        .output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE};

    XMC_GPIO_Init(XMC_GPIO_PORT1, LED1_PIN, &LED_config);
 8000490:	f107 030c 	add.w	r3, r7, #12
 8000494:	461a      	mov	r2, r3
 8000496:	2101      	movs	r1, #1
 8000498:	4858      	ldr	r0, [pc, #352]	; (80005fc <sendMorseCode+0x190>)
 800049a:	f000 f923 	bl	80006e4 <XMC_GPIO_Init>

    while (1)
    {
        for (int i = 0; i < strlen(message); i++)
 800049e:	2300      	movs	r3, #0
 80004a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80004a4:	e098      	b.n	80005d8 <sendMorseCode+0x16c>
        {
            if (message[i] == ' ')
 80004a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	4413      	add	r3, r2
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b20      	cmp	r3, #32
 80004b2:	d104      	bne.n	80004be <sendMorseCode+0x52>
            {
                delay_ms(INTER_WORD_SPACE);
 80004b4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80004b8:	f7ff ffc2 	bl	8000440 <delay_ms>
 80004bc:	e087      	b.n	80005ce <sendMorseCode+0x162>
            }
            else
            {
                char c = toupper(message[i]);
 80004be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	4413      	add	r3, r2
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80004cc:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80004d0:	3301      	adds	r3, #1
 80004d2:	4a4b      	ldr	r2, [pc, #300]	; (8000600 <sendMorseCode+0x194>)
 80004d4:	4413      	add	r3, r2
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	f003 0303 	and.w	r3, r3, #3
 80004dc:	2b02      	cmp	r3, #2
 80004de:	d103      	bne.n	80004e8 <sendMorseCode+0x7c>
 80004e0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80004e4:	3b20      	subs	r3, #32
 80004e6:	e001      	b.n	80004ec <sendMorseCode+0x80>
 80004e8:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80004ec:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
                if ((c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
 80004f0:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80004f4:	2b40      	cmp	r3, #64	; 0x40
 80004f6:	d903      	bls.n	8000500 <sendMorseCode+0x94>
 80004f8:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80004fc:	2b5a      	cmp	r3, #90	; 0x5a
 80004fe:	d907      	bls.n	8000510 <sendMorseCode+0xa4>
 8000500:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000504:	2b2f      	cmp	r3, #47	; 0x2f
 8000506:	d962      	bls.n	80005ce <sendMorseCode+0x162>
 8000508:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800050c:	2b39      	cmp	r3, #57	; 0x39
 800050e:	d85e      	bhi.n	80005ce <sendMorseCode+0x162>
                {
                    const char *morse = (c >= 'A' && c <= 'Z') ? morseCode[c - 'A'] : morseCode[c - '0' + 26];
 8000510:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000514:	2b40      	cmp	r3, #64	; 0x40
 8000516:	d90c      	bls.n	8000532 <sendMorseCode+0xc6>
 8000518:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800051c:	2b5a      	cmp	r3, #90	; 0x5a
 800051e:	d808      	bhi.n	8000532 <sendMorseCode+0xc6>
 8000520:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000524:	3b41      	subs	r3, #65	; 0x41
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	33b8      	adds	r3, #184	; 0xb8
 800052a:	443b      	add	r3, r7
 800052c:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 8000530:	e007      	b.n	8000542 <sendMorseCode+0xd6>
 8000532:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000536:	3b16      	subs	r3, #22
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	33b8      	adds	r3, #184	; 0xb8
 800053c:	443b      	add	r3, r7
 800053e:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 8000542:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                    for (int j = 0; j < strlen(morse); j++)
 8000546:	2300      	movs	r3, #0
 8000548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800054c:	e032      	b.n	80005b4 <sendMorseCode+0x148>
                    {
                        if (morse[j] == '.')
 800054e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000552:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000556:	4413      	add	r3, r2
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b2e      	cmp	r3, #46	; 0x2e
 800055c:	d10e      	bne.n	800057c <sendMorseCode+0x110>
                        {
                            XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, LED1_PIN);
 800055e:	2101      	movs	r1, #1
 8000560:	4826      	ldr	r0, [pc, #152]	; (80005fc <sendMorseCode+0x190>)
 8000562:	f7ff feef 	bl	8000344 <XMC_GPIO_SetOutputHigh>
                            delay_ms(DOT_DURATION);
 8000566:	2064      	movs	r0, #100	; 0x64
 8000568:	f7ff ff6a 	bl	8000440 <delay_ms>
                            XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, LED1_PIN);
 800056c:	2101      	movs	r1, #1
 800056e:	4823      	ldr	r0, [pc, #140]	; (80005fc <sendMorseCode+0x190>)
 8000570:	f7ff fef9 	bl	8000366 <XMC_GPIO_SetOutputLow>
                            delay_ms(INTER_ELEMENT_SPACE);
 8000574:	2064      	movs	r0, #100	; 0x64
 8000576:	f7ff ff63 	bl	8000440 <delay_ms>
 800057a:	e016      	b.n	80005aa <sendMorseCode+0x13e>
                        }
                        else if (morse[j] == '-')
 800057c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000580:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000584:	4413      	add	r3, r2
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b2d      	cmp	r3, #45	; 0x2d
 800058a:	d10e      	bne.n	80005aa <sendMorseCode+0x13e>
                        {
                            XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, LED1_PIN);
 800058c:	2101      	movs	r1, #1
 800058e:	481b      	ldr	r0, [pc, #108]	; (80005fc <sendMorseCode+0x190>)
 8000590:	f7ff fed8 	bl	8000344 <XMC_GPIO_SetOutputHigh>
                            delay_ms(DASH_DURATION);
 8000594:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000598:	f7ff ff52 	bl	8000440 <delay_ms>
                            XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, LED1_PIN);
 800059c:	2101      	movs	r1, #1
 800059e:	4817      	ldr	r0, [pc, #92]	; (80005fc <sendMorseCode+0x190>)
 80005a0:	f7ff fee1 	bl	8000366 <XMC_GPIO_SetOutputLow>
                            delay_ms(INTER_ELEMENT_SPACE);
 80005a4:	2064      	movs	r0, #100	; 0x64
 80005a6:	f7ff ff4b 	bl	8000440 <delay_ms>
                    for (int j = 0; j < strlen(morse); j++)
 80005aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80005ae:	3301      	adds	r3, #1
 80005b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80005b4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80005b8:	f000 fc62 	bl	8000e80 <strlen>
 80005bc:	4602      	mov	r2, r0
 80005be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d8c3      	bhi.n	800054e <sendMorseCode+0xe2>
                        }
                    }
                    delay_ms(INTER_CHARACTER_SPACE);
 80005c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005ca:	f7ff ff39 	bl	8000440 <delay_ms>
        for (int i = 0; i < strlen(message); i++)
 80005ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80005d2:	3301      	adds	r3, #1
 80005d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 fc51 	bl	8000e80 <strlen>
 80005de:	4602      	mov	r2, r0
 80005e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80005e4:	429a      	cmp	r2, r3
 80005e6:	f63f af5e 	bhi.w	80004a6 <sendMorseCode+0x3a>
                }
            }
        }
        delay_ms(5000);
 80005ea:	f241 3088 	movw	r0, #5000	; 0x1388
 80005ee:	f7ff ff27 	bl	8000440 <delay_ms>
        for (int i = 0; i < strlen(message); i++)
 80005f2:	e754      	b.n	800049e <sendMorseCode+0x32>
 80005f4:	08001044 	.word	0x08001044
 80005f8:	080010d4 	.word	0x080010d4
 80005fc:	48028100 	.word	0x48028100
 8000600:	080010ec 	.word	0x080010ec

08000604 <main>:
    }
}


int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
    initCCU4();
 8000608:	f7ff fec0 	bl	800038c <initCCU4>
    sendMorseCode("I CAN MORSE");
 800060c:	4802      	ldr	r0, [pc, #8]	; (8000618 <main+0x14>)
 800060e:	f7ff ff2d 	bl	800046c <sendMorseCode>
    return 0;
 8000612:	2300      	movs	r3, #0
 8000614:	4618      	mov	r0, r3
 8000616:	bd80      	pop	{r7, pc}
 8000618:	080010e0 	.word	0x080010e0

0800061c <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
 8000628:	4613      	mov	r3, r2
 800062a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	089b      	lsrs	r3, r3, #2
 8000630:	b2db      	uxtb	r3, r3
 8000632:	461a      	mov	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3204      	adds	r2, #4
 8000638:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800063c:	78fb      	ldrb	r3, [r7, #3]
 800063e:	f003 0303 	and.w	r3, r3, #3
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	21f8      	movs	r1, #248	; 0xf8
 8000646:	fa01 f303 	lsl.w	r3, r1, r3
 800064a:	43db      	mvns	r3, r3
 800064c:	78f9      	ldrb	r1, [r7, #3]
 800064e:	0889      	lsrs	r1, r1, #2
 8000650:	b2c9      	uxtb	r1, r1
 8000652:	4608      	mov	r0, r1
 8000654:	ea02 0103 	and.w	r1, r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	1d02      	adds	r2, r0, #4
 800065c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	089b      	lsrs	r3, r3, #2
 8000664:	b2db      	uxtb	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3204      	adds	r2, #4
 800066c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000670:	78b9      	ldrb	r1, [r7, #2]
 8000672:	78fb      	ldrb	r3, [r7, #3]
 8000674:	f003 0303 	and.w	r3, r3, #3
 8000678:	00db      	lsls	r3, r3, #3
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	78f9      	ldrb	r1, [r7, #3]
 8000680:	0889      	lsrs	r1, r1, #2
 8000682:	b2c9      	uxtb	r1, r1
 8000684:	4608      	mov	r0, r1
 8000686:	ea42 0103 	orr.w	r1, r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	1d02      	adds	r2, r0, #4
 800068e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
 80006a6:	460b      	mov	r3, r1
 80006a8:	70fb      	strb	r3, [r7, #3]
 80006aa:	4613      	mov	r3, r2
 80006ac:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	2103      	movs	r1, #3
 80006b8:	fa01 f303 	lsl.w	r3, r1, r3
 80006bc:	43db      	mvns	r3, r3
 80006be:	401a      	ands	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80006c8:	78b9      	ldrb	r1, [r7, #2]
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
 80006d2:	431a      	orrs	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	460b      	mov	r3, r1
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80006f2:	7afb      	ldrb	r3, [r7, #11]
 80006f4:	089b      	lsrs	r3, r3, #2
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	461a      	mov	r2, r3
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3204      	adds	r2, #4
 80006fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000702:	7afb      	ldrb	r3, [r7, #11]
 8000704:	f003 0303 	and.w	r3, r3, #3
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	21f8      	movs	r1, #248	; 0xf8
 800070c:	fa01 f303 	lsl.w	r3, r1, r3
 8000710:	43db      	mvns	r3, r3
 8000712:	7af9      	ldrb	r1, [r7, #11]
 8000714:	0889      	lsrs	r1, r1, #2
 8000716:	b2c9      	uxtb	r1, r1
 8000718:	4608      	mov	r0, r1
 800071a:	ea02 0103 	and.w	r1, r2, r3
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	1d02      	adds	r2, r0, #4
 8000722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	2103      	movs	r1, #3
 8000730:	fa01 f303 	lsl.w	r3, r1, r3
 8000734:	43db      	mvns	r3, r3
 8000736:	401a      	ands	r2, r3
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4a38      	ldr	r2, [pc, #224]	; (8000820 <XMC_GPIO_Init+0x13c>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d003      	beq.n	800074c <XMC_GPIO_Init+0x68>
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4a37      	ldr	r2, [pc, #220]	; (8000824 <XMC_GPIO_Init+0x140>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d10a      	bne.n	8000762 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000750:	7afb      	ldrb	r3, [r7, #11]
 8000752:	2101      	movs	r1, #1
 8000754:	fa01 f303 	lsl.w	r3, r1, r3
 8000758:	43db      	mvns	r3, r3
 800075a:	401a      	ands	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	661a      	str	r2, [r3, #96]	; 0x60
 8000760:	e03c      	b.n	80007dc <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	7afb      	ldrb	r3, [r7, #11]
 8000768:	409a      	lsls	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800076e:	7afb      	ldrb	r3, [r7, #11]
 8000770:	08db      	lsrs	r3, r3, #3
 8000772:	b2db      	uxtb	r3, r3
 8000774:	461a      	mov	r2, r3
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	3210      	adds	r2, #16
 800077a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	2107      	movs	r1, #7
 8000788:	fa01 f303 	lsl.w	r3, r1, r3
 800078c:	43db      	mvns	r3, r3
 800078e:	7af9      	ldrb	r1, [r7, #11]
 8000790:	08c9      	lsrs	r1, r1, #3
 8000792:	b2c9      	uxtb	r1, r1
 8000794:	4608      	mov	r0, r1
 8000796:	ea02 0103 	and.w	r1, r2, r3
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f100 0210 	add.w	r2, r0, #16
 80007a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80007a4:	7afb      	ldrb	r3, [r7, #11]
 80007a6:	08db      	lsrs	r3, r3, #3
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	461a      	mov	r2, r3
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	3210      	adds	r2, #16
 80007b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	7a1b      	ldrb	r3, [r3, #8]
 80007b8:	4619      	mov	r1, r3
 80007ba:	7afb      	ldrb	r3, [r7, #11]
 80007bc:	f003 0307 	and.w	r3, r3, #7
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	7af9      	ldrb	r1, [r7, #11]
 80007c8:	08c9      	lsrs	r1, r1, #3
 80007ca:	b2c9      	uxtb	r1, r1
 80007cc:	4608      	mov	r0, r1
 80007ce:	ea42 0103 	orr.w	r1, r2, r3
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f100 0210 	add.w	r2, r0, #16
 80007d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80007dc:	7afb      	ldrb	r3, [r7, #11]
 80007de:	089b      	lsrs	r3, r3, #2
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3204      	adds	r2, #4
 80007e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	7afb      	ldrb	r3, [r7, #11]
 80007f4:	f003 0303 	and.w	r3, r3, #3
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	7af9      	ldrb	r1, [r7, #11]
 8000800:	0889      	lsrs	r1, r1, #2
 8000802:	b2c9      	uxtb	r1, r1
 8000804:	4608      	mov	r0, r1
 8000806:	ea42 0103 	orr.w	r1, r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	1d02      	adds	r2, r0, #4
 800080e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000812:	bf00      	nop
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	48028e00 	.word	0x48028e00
 8000824:	48028f00 	.word	0x48028f00

08000828 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
 8000834:	4613      	mov	r3, r2
 8000836:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	08db      	lsrs	r3, r3, #3
 800083c:	b2db      	uxtb	r3, r3
 800083e:	461a      	mov	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3210      	adds	r2, #16
 8000844:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	2107      	movs	r1, #7
 8000852:	fa01 f303 	lsl.w	r3, r1, r3
 8000856:	43db      	mvns	r3, r3
 8000858:	78f9      	ldrb	r1, [r7, #3]
 800085a:	08c9      	lsrs	r1, r1, #3
 800085c:	b2c9      	uxtb	r1, r1
 800085e:	4608      	mov	r0, r1
 8000860:	ea02 0103 	and.w	r1, r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f100 0210 	add.w	r2, r0, #16
 800086a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800086e:	78fb      	ldrb	r3, [r7, #3]
 8000870:	08db      	lsrs	r3, r3, #3
 8000872:	b2db      	uxtb	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3210      	adds	r2, #16
 800087a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800087e:	78b9      	ldrb	r1, [r7, #2]
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	fa01 f303 	lsl.w	r3, r1, r3
 800088c:	78f9      	ldrb	r1, [r7, #3]
 800088e:	08c9      	lsrs	r1, r1, #3
 8000890:	b2c9      	uxtb	r1, r1
 8000892:	4608      	mov	r0, r1
 8000894:	ea42 0103 	orr.w	r1, r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f100 0210 	add.w	r2, r0, #16
 800089e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80008ae:	b480      	push	{r7}
 80008b0:	b085      	sub	sp, #20
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	e003      	b.n	80008c4 <delay+0x16>
  {
    __NOP();
 80008bc:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	3301      	adds	r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d8f7      	bhi.n	80008bc <delay+0xe>
  }
}
 80008cc:	bf00      	nop
 80008ce:	bf00      	nop
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80008dc:	b598      	push	{r3, r4, r7, lr}
 80008de:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80008e0:	4a06      	ldr	r2, [pc, #24]	; (80008fc <SystemInit+0x20>)
 80008e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008e6:	4614      	mov	r4, r2
 80008e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80008ee:	f000 f807 	bl	8000900 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80008f2:	f000 f83f 	bl	8000974 <SystemCoreClockSetup>
}
 80008f6:	bf00      	nop
 80008f8:	bd98      	pop	{r3, r4, r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000ffc4 	.word	0x2000ffc4

08000900 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000906:	b672      	cpsid	i
}
 8000908:	bf00      	nop
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <SystemCoreSetup+0x68>)
 800090c:	4a17      	ldr	r2, [pc, #92]	; (800096c <SystemCoreSetup+0x6c>)
 800090e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000910:	f3bf 8f4f 	dsb	sy
}
 8000914:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8000916:	b662      	cpsie	i
}
 8000918:	bf00      	nop
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <SystemCoreSetup+0x68>)
 800091c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000920:	4a11      	ldr	r2, [pc, #68]	; (8000968 <SystemCoreSetup+0x68>)
 8000922:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000926:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <SystemCoreSetup+0x68>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <SystemCoreSetup+0x68>)
 8000930:	f023 0308 	bic.w	r3, r3, #8
 8000934:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <SystemCoreSetup+0x70>)
 8000938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f023 030f 	bic.w	r3, r3, #15
 8000946:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f043 0303 	orr.w	r3, r3, #3
 800094e:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000950:	4b07      	ldr	r3, [pc, #28]	; (8000970 <SystemCoreSetup+0x70>)
 8000952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000956:	461a      	mov	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6153      	str	r3, [r2, #20]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00
 800096c:	08000000 	.word	0x08000000
 8000970:	58001000 	.word	0x58001000

08000974 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000978:	4b75      	ldr	r3, [pc, #468]	; (8000b50 <SystemCoreClockSetup+0x1dc>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d10c      	bne.n	800099e <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8000984:	4b72      	ldr	r3, [pc, #456]	; (8000b50 <SystemCoreClockSetup+0x1dc>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	4a71      	ldr	r2, [pc, #452]	; (8000b50 <SystemCoreClockSetup+0x1dc>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000990:	bf00      	nop
 8000992:	4b6f      	ldr	r3, [pc, #444]	; (8000b50 <SystemCoreClockSetup+0x1dc>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0f9      	beq.n	8000992 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800099e:	4b6d      	ldr	r3, [pc, #436]	; (8000b54 <SystemCoreClockSetup+0x1e0>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d009      	beq.n	80009be <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80009aa:	4b6a      	ldr	r3, [pc, #424]	; (8000b54 <SystemCoreClockSetup+0x1e0>)
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	4a69      	ldr	r2, [pc, #420]	; (8000b54 <SystemCoreClockSetup+0x1e0>)
 80009b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009b4:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80009b6:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80009ba:	f7ff ff78 	bl	80008ae <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80009be:	4b66      	ldr	r3, [pc, #408]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	4a65      	ldr	r2, [pc, #404]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 80009c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009c8:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80009ca:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80009ce:	f7ff ff6e 	bl	80008ae <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80009d2:	4b61      	ldr	r3, [pc, #388]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	4a60      	ldr	r2, [pc, #384]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 80009d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009dc:	f023 0302 	bic.w	r3, r3, #2
 80009e0:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80009e2:	4b5e      	ldr	r3, [pc, #376]	; (8000b5c <SystemCoreClockSetup+0x1e8>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d029      	beq.n	8000a42 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80009ee:	4b5b      	ldr	r3, [pc, #364]	; (8000b5c <SystemCoreClockSetup+0x1e8>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	4a5a      	ldr	r2, [pc, #360]	; (8000b5c <SystemCoreClockSetup+0x1e8>)
 80009f4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80009f8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80009fc:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80009fe:	f000 f927 	bl	8000c50 <OSCHP_GetFrequency>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4a56      	ldr	r2, [pc, #344]	; (8000b60 <SystemCoreClockSetup+0x1ec>)
 8000a06:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0a:	0d1b      	lsrs	r3, r3, #20
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	041a      	lsls	r2, r3, #16
 8000a10:	4b52      	ldr	r3, [pc, #328]	; (8000b5c <SystemCoreClockSetup+0x1e8>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	4951      	ldr	r1, [pc, #324]	; (8000b5c <SystemCoreClockSetup+0x1e8>)
 8000a16:	4313      	orrs	r3, r2
 8000a18:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8000a1a:	4b4f      	ldr	r3, [pc, #316]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	4a4e      	ldr	r2, [pc, #312]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a20:	f023 0301 	bic.w	r3, r3, #1
 8000a24:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000a26:	4b4c      	ldr	r3, [pc, #304]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	4a4b      	ldr	r2, [pc, #300]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000a30:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000a32:	bf00      	nop
 8000a34:	4b48      	ldr	r3, [pc, #288]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000a3c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000a40:	d1f8      	bne.n	8000a34 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000a42:	4b45      	ldr	r3, [pc, #276]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	4a44      	ldr	r2, [pc, #272]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8000a4e:	4b42      	ldr	r3, [pc, #264]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	4a41      	ldr	r2, [pc, #260]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a54:	f043 0310 	orr.w	r3, r3, #16
 8000a58:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000a5a:	4b3f      	ldr	r3, [pc, #252]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a5c:	4a41      	ldr	r2, [pc, #260]	; (8000b64 <SystemCoreClockSetup+0x1f0>)
 8000a5e:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000a60:	4b3d      	ldr	r3, [pc, #244]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	4a3c      	ldr	r2, [pc, #240]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6a:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000a6c:	4b3a      	ldr	r3, [pc, #232]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	4a39      	ldr	r2, [pc, #228]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a72:	f023 0310 	bic.w	r3, r3, #16
 8000a76:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8000a78:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	4a36      	ldr	r2, [pc, #216]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a82:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000a84:	bf00      	nop
 8000a86:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f9      	beq.n	8000a86 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000a92:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	4a30      	ldr	r2, [pc, #192]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000a98:	f023 0301 	bic.w	r3, r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000a9e:	bf00      	nop
 8000aa0:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1f9      	bne.n	8000aa0 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8000aac:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <SystemCoreClockSetup+0x1f4>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	4a2d      	ldr	r2, [pc, #180]	; (8000b68 <SystemCoreClockSetup+0x1f4>)
 8000ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab6:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8000ab8:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <SystemCoreClockSetup+0x1f4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8000abe:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <SystemCoreClockSetup+0x1f4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8000ac4:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <SystemCoreClockSetup+0x1f4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8000aca:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <SystemCoreClockSetup+0x1f4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8000ad0:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <SystemCoreClockSetup+0x1f4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8000ad6:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <SystemCoreClockSetup+0x1f4>)
 8000ad8:	2203      	movs	r2, #3
 8000ada:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000adc:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	4a1d      	ldr	r2, [pc, #116]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ae6:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000aea:	4a20      	ldr	r2, [pc, #128]	; (8000b6c <SystemCoreClockSetup+0x1f8>)
 8000aec:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8000aee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000af2:	f7ff fedc 	bl	80008ae <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000af6:	bf00      	nop
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0f9      	beq.n	8000af8 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000b06:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <SystemCoreClockSetup+0x1fc>)
 8000b08:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8000b0a:	f241 1094 	movw	r0, #4500	; 0x1194
 8000b0e:	f7ff fece 	bl	80008ae <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000b12:	bf00      	nop
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0f9      	beq.n	8000b14 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000b22:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <SystemCoreClockSetup+0x200>)
 8000b24:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8000b26:	f241 7070 	movw	r0, #6000	; 0x1770
 8000b2a:	f7ff fec0 	bl	80008ae <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000b2e:	bf00      	nop
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <SystemCoreClockSetup+0x1e4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0f9      	beq.n	8000b30 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <SystemCoreClockSetup+0x204>)
 8000b3e:	2205      	movs	r2, #5
 8000b40:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <SystemCoreClockSetup+0x1f4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8000b48:	f000 f818 	bl	8000b7c <SystemCoreClockUpdate>
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	50004200 	.word	0x50004200
 8000b54:	50004400 	.word	0x50004400
 8000b58:	50004710 	.word	0x50004710
 8000b5c:	50004700 	.word	0x50004700
 8000b60:	6b5fca6b 	.word	0x6b5fca6b
 8000b64:	01134f00 	.word	0x01134f00
 8000b68:	50004600 	.word	0x50004600
 8000b6c:	01074f00 	.word	0x01074f00
 8000b70:	01044f00 	.word	0x01044f00
 8000b74:	01034f00 	.word	0x01034f00
 8000b78:	50004160 	.word	0x50004160

08000b7c <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000b82:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <SystemCoreClockUpdate+0xc4>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d03e      	beq.n	8000c0c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8000b8e:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <SystemCoreClockUpdate+0xc8>)
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d002      	beq.n	8000ba0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000b9a:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <SystemCoreClockUpdate+0xcc>)
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	e002      	b.n	8000ba6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000ba0:	f000 f856 	bl	8000c50 <OSCHP_GetFrequency>
 8000ba4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000ba6:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <SystemCoreClockUpdate+0xc8>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d020      	beq.n	8000bf4 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000bb2:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <SystemCoreClockUpdate+0xc8>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	0e1b      	lsrs	r3, r3, #24
 8000bb8:	f003 030f 	and.w	r3, r3, #15
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000bc0:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <SystemCoreClockUpdate+0xc8>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bca:	3301      	adds	r3, #1
 8000bcc:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <SystemCoreClockUpdate+0xc8>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	0c1b      	lsrs	r3, r3, #16
 8000bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bd8:	3301      	adds	r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	fb02 f303 	mul.w	r3, r2, r3
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	fb02 f303 	mul.w	r3, r2, r3
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	e00d      	b.n	8000c10 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <SystemCoreClockUpdate+0xc8>)
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	e001      	b.n	8000c10 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <SystemCoreClockUpdate+0xcc>)
 8000c0e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <SystemCoreClockUpdate+0xc4>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	3301      	adds	r3, #1
 8000c18:	68fa      	ldr	r2, [r7, #12]
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <SystemCoreClockUpdate+0xc4>)
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	3301      	adds	r3, #1
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c30:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000c32:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <SystemCoreClockUpdate+0xd0>)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	50004600 	.word	0x50004600
 8000c44:	50004710 	.word	0x50004710
 8000c48:	016e3600 	.word	0x016e3600
 8000c4c:	2000ffc0 	.word	0x2000ffc0

08000c50 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8000c54:	4b02      	ldr	r3, [pc, #8]	; (8000c60 <OSCHP_GetFrequency+0x10>)
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	00b71b00 	.word	0x00b71b00

08000c64 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <_sbrk+0x5c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <_sbrk+0x5c>)
 8000c76:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <_sbrk+0x60>)
 8000c78:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <_sbrk+0x5c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3303      	adds	r3, #3
 8000c84:	f023 0303 	bic.w	r3, r3, #3
 8000c88:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <_sbrk+0x5c>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <_sbrk+0x64>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d207      	bcs.n	8000ca8 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <_sbrk+0x5c>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <_sbrk+0x5c>)
 8000ca2:	6013      	str	r3, [r2, #0]
    return (base);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	e006      	b.n	8000cb6 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8000ca8:	f000 f818 	bl	8000cdc <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000438 	.word	0x20000438
 8000cc4:	20000440 	.word	0x20000440
 8000cc8:	2000ffc0 	.word	0x2000ffc0

08000ccc <_init>:

/* Init */
void _init(void)
{}
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <__errno>:
 8000cdc:	4b01      	ldr	r3, [pc, #4]	; (8000ce4 <__errno+0x8>)
 8000cde:	6818      	ldr	r0, [r3, #0]
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000000 	.word	0x20000000

08000ce8 <__libc_init_array>:
 8000ce8:	b570      	push	{r4, r5, r6, lr}
 8000cea:	4e0d      	ldr	r6, [pc, #52]	; (8000d20 <__libc_init_array+0x38>)
 8000cec:	4d0d      	ldr	r5, [pc, #52]	; (8000d24 <__libc_init_array+0x3c>)
 8000cee:	1b76      	subs	r6, r6, r5
 8000cf0:	10b6      	asrs	r6, r6, #2
 8000cf2:	d006      	beq.n	8000d02 <__libc_init_array+0x1a>
 8000cf4:	2400      	movs	r4, #0
 8000cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cfa:	3401      	adds	r4, #1
 8000cfc:	4798      	blx	r3
 8000cfe:	42a6      	cmp	r6, r4
 8000d00:	d1f9      	bne.n	8000cf6 <__libc_init_array+0xe>
 8000d02:	4e09      	ldr	r6, [pc, #36]	; (8000d28 <__libc_init_array+0x40>)
 8000d04:	4d09      	ldr	r5, [pc, #36]	; (8000d2c <__libc_init_array+0x44>)
 8000d06:	1b76      	subs	r6, r6, r5
 8000d08:	f7ff ffe0 	bl	8000ccc <_init>
 8000d0c:	10b6      	asrs	r6, r6, #2
 8000d0e:	d006      	beq.n	8000d1e <__libc_init_array+0x36>
 8000d10:	2400      	movs	r4, #0
 8000d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d16:	3401      	adds	r4, #1
 8000d18:	4798      	blx	r3
 8000d1a:	42a6      	cmp	r6, r4
 8000d1c:	d1f9      	bne.n	8000d12 <__libc_init_array+0x2a>
 8000d1e:	bd70      	pop	{r4, r5, r6, pc}
 8000d20:	20000430 	.word	0x20000430
 8000d24:	20000430 	.word	0x20000430
 8000d28:	20000430 	.word	0x20000430
 8000d2c:	20000430 	.word	0x20000430

08000d30 <memcpy>:
 8000d30:	4684      	mov	ip, r0
 8000d32:	ea41 0300 	orr.w	r3, r1, r0
 8000d36:	f013 0303 	ands.w	r3, r3, #3
 8000d3a:	d16d      	bne.n	8000e18 <memcpy+0xe8>
 8000d3c:	3a40      	subs	r2, #64	; 0x40
 8000d3e:	d341      	bcc.n	8000dc4 <memcpy+0x94>
 8000d40:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d44:	f840 3b04 	str.w	r3, [r0], #4
 8000d48:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d4c:	f840 3b04 	str.w	r3, [r0], #4
 8000d50:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d54:	f840 3b04 	str.w	r3, [r0], #4
 8000d58:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d5c:	f840 3b04 	str.w	r3, [r0], #4
 8000d60:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d64:	f840 3b04 	str.w	r3, [r0], #4
 8000d68:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d6c:	f840 3b04 	str.w	r3, [r0], #4
 8000d70:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d74:	f840 3b04 	str.w	r3, [r0], #4
 8000d78:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d7c:	f840 3b04 	str.w	r3, [r0], #4
 8000d80:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d84:	f840 3b04 	str.w	r3, [r0], #4
 8000d88:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d8c:	f840 3b04 	str.w	r3, [r0], #4
 8000d90:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d94:	f840 3b04 	str.w	r3, [r0], #4
 8000d98:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d9c:	f840 3b04 	str.w	r3, [r0], #4
 8000da0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000da4:	f840 3b04 	str.w	r3, [r0], #4
 8000da8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000dac:	f840 3b04 	str.w	r3, [r0], #4
 8000db0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000db4:	f840 3b04 	str.w	r3, [r0], #4
 8000db8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000dbc:	f840 3b04 	str.w	r3, [r0], #4
 8000dc0:	3a40      	subs	r2, #64	; 0x40
 8000dc2:	d2bd      	bcs.n	8000d40 <memcpy+0x10>
 8000dc4:	3230      	adds	r2, #48	; 0x30
 8000dc6:	d311      	bcc.n	8000dec <memcpy+0xbc>
 8000dc8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000dcc:	f840 3b04 	str.w	r3, [r0], #4
 8000dd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000dd4:	f840 3b04 	str.w	r3, [r0], #4
 8000dd8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ddc:	f840 3b04 	str.w	r3, [r0], #4
 8000de0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000de4:	f840 3b04 	str.w	r3, [r0], #4
 8000de8:	3a10      	subs	r2, #16
 8000dea:	d2ed      	bcs.n	8000dc8 <memcpy+0x98>
 8000dec:	320c      	adds	r2, #12
 8000dee:	d305      	bcc.n	8000dfc <memcpy+0xcc>
 8000df0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000df4:	f840 3b04 	str.w	r3, [r0], #4
 8000df8:	3a04      	subs	r2, #4
 8000dfa:	d2f9      	bcs.n	8000df0 <memcpy+0xc0>
 8000dfc:	3204      	adds	r2, #4
 8000dfe:	d008      	beq.n	8000e12 <memcpy+0xe2>
 8000e00:	07d2      	lsls	r2, r2, #31
 8000e02:	bf1c      	itt	ne
 8000e04:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000e08:	f800 3b01 	strbne.w	r3, [r0], #1
 8000e0c:	d301      	bcc.n	8000e12 <memcpy+0xe2>
 8000e0e:	880b      	ldrh	r3, [r1, #0]
 8000e10:	8003      	strh	r3, [r0, #0]
 8000e12:	4660      	mov	r0, ip
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	2a08      	cmp	r2, #8
 8000e1a:	d313      	bcc.n	8000e44 <memcpy+0x114>
 8000e1c:	078b      	lsls	r3, r1, #30
 8000e1e:	d08d      	beq.n	8000d3c <memcpy+0xc>
 8000e20:	f010 0303 	ands.w	r3, r0, #3
 8000e24:	d08a      	beq.n	8000d3c <memcpy+0xc>
 8000e26:	f1c3 0304 	rsb	r3, r3, #4
 8000e2a:	1ad2      	subs	r2, r2, r3
 8000e2c:	07db      	lsls	r3, r3, #31
 8000e2e:	bf1c      	itt	ne
 8000e30:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000e34:	f800 3b01 	strbne.w	r3, [r0], #1
 8000e38:	d380      	bcc.n	8000d3c <memcpy+0xc>
 8000e3a:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000e3e:	f820 3b02 	strh.w	r3, [r0], #2
 8000e42:	e77b      	b.n	8000d3c <memcpy+0xc>
 8000e44:	3a04      	subs	r2, #4
 8000e46:	d3d9      	bcc.n	8000dfc <memcpy+0xcc>
 8000e48:	3a01      	subs	r2, #1
 8000e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e4e:	f800 3b01 	strb.w	r3, [r0], #1
 8000e52:	d2f9      	bcs.n	8000e48 <memcpy+0x118>
 8000e54:	780b      	ldrb	r3, [r1, #0]
 8000e56:	7003      	strb	r3, [r0, #0]
 8000e58:	784b      	ldrb	r3, [r1, #1]
 8000e5a:	7043      	strb	r3, [r0, #1]
 8000e5c:	788b      	ldrb	r3, [r1, #2]
 8000e5e:	7083      	strb	r3, [r0, #2]
 8000e60:	4660      	mov	r0, ip
 8000e62:	4770      	bx	lr
	...

08000e80 <strlen>:
 8000e80:	f890 f000 	pld	[r0]
 8000e84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000e88:	f020 0107 	bic.w	r1, r0, #7
 8000e8c:	f06f 0c00 	mvn.w	ip, #0
 8000e90:	f010 0407 	ands.w	r4, r0, #7
 8000e94:	f891 f020 	pld	[r1, #32]
 8000e98:	f040 8049 	bne.w	8000f2e <strlen+0xae>
 8000e9c:	f04f 0400 	mov.w	r4, #0
 8000ea0:	f06f 0007 	mvn.w	r0, #7
 8000ea4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000ea8:	f891 f040 	pld	[r1, #64]	; 0x40
 8000eac:	f100 0008 	add.w	r0, r0, #8
 8000eb0:	fa82 f24c 	uadd8	r2, r2, ip
 8000eb4:	faa4 f28c 	sel	r2, r4, ip
 8000eb8:	fa83 f34c 	uadd8	r3, r3, ip
 8000ebc:	faa2 f38c 	sel	r3, r2, ip
 8000ec0:	bb4b      	cbnz	r3, 8000f16 <strlen+0x96>
 8000ec2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000ec6:	fa82 f24c 	uadd8	r2, r2, ip
 8000eca:	f100 0008 	add.w	r0, r0, #8
 8000ece:	faa4 f28c 	sel	r2, r4, ip
 8000ed2:	fa83 f34c 	uadd8	r3, r3, ip
 8000ed6:	faa2 f38c 	sel	r3, r2, ip
 8000eda:	b9e3      	cbnz	r3, 8000f16 <strlen+0x96>
 8000edc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000ee0:	fa82 f24c 	uadd8	r2, r2, ip
 8000ee4:	f100 0008 	add.w	r0, r0, #8
 8000ee8:	faa4 f28c 	sel	r2, r4, ip
 8000eec:	fa83 f34c 	uadd8	r3, r3, ip
 8000ef0:	faa2 f38c 	sel	r3, r2, ip
 8000ef4:	b97b      	cbnz	r3, 8000f16 <strlen+0x96>
 8000ef6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8000efa:	f101 0120 	add.w	r1, r1, #32
 8000efe:	fa82 f24c 	uadd8	r2, r2, ip
 8000f02:	f100 0008 	add.w	r0, r0, #8
 8000f06:	faa4 f28c 	sel	r2, r4, ip
 8000f0a:	fa83 f34c 	uadd8	r3, r3, ip
 8000f0e:	faa2 f38c 	sel	r3, r2, ip
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0c6      	beq.n	8000ea4 <strlen+0x24>
 8000f16:	2a00      	cmp	r2, #0
 8000f18:	bf04      	itt	eq
 8000f1a:	3004      	addeq	r0, #4
 8000f1c:	461a      	moveq	r2, r3
 8000f1e:	ba12      	rev	r2, r2
 8000f20:	fab2 f282 	clz	r2, r2
 8000f24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000f28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8000f2c:	4770      	bx	lr
 8000f2e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000f32:	f004 0503 	and.w	r5, r4, #3
 8000f36:	f1c4 0000 	rsb	r0, r4, #0
 8000f3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000f3e:	f014 0f04 	tst.w	r4, #4
 8000f42:	f891 f040 	pld	[r1, #64]	; 0x40
 8000f46:	fa0c f505 	lsl.w	r5, ip, r5
 8000f4a:	ea62 0205 	orn	r2, r2, r5
 8000f4e:	bf1c      	itt	ne
 8000f50:	ea63 0305 	ornne	r3, r3, r5
 8000f54:	4662      	movne	r2, ip
 8000f56:	f04f 0400 	mov.w	r4, #0
 8000f5a:	e7a9      	b.n	8000eb0 <strlen+0x30>
 8000f5c:	00002d2e 	.word	0x00002d2e
 8000f60:	2e2e2e2d 	.word	0x2e2e2e2d
 8000f64:	00000000 	.word	0x00000000
 8000f68:	2e2d2e2d 	.word	0x2e2d2e2d
 8000f6c:	00000000 	.word	0x00000000
 8000f70:	002e2e2d 	.word	0x002e2e2d
 8000f74:	0000002e 	.word	0x0000002e
 8000f78:	2e2d2e2e 	.word	0x2e2d2e2e
 8000f7c:	00000000 	.word	0x00000000
 8000f80:	002e2d2d 	.word	0x002e2d2d
 8000f84:	2e2e2e2e 	.word	0x2e2e2e2e
 8000f88:	00000000 	.word	0x00000000
 8000f8c:	00002e2e 	.word	0x00002e2e
 8000f90:	2d2d2d2e 	.word	0x2d2d2d2e
 8000f94:	00000000 	.word	0x00000000
 8000f98:	002d2e2d 	.word	0x002d2e2d
 8000f9c:	2e2e2d2e 	.word	0x2e2e2d2e
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	00002d2d 	.word	0x00002d2d
 8000fa8:	00002e2d 	.word	0x00002e2d
 8000fac:	002d2d2d 	.word	0x002d2d2d
 8000fb0:	2e2d2d2e 	.word	0x2e2d2d2e
 8000fb4:	00000000 	.word	0x00000000
 8000fb8:	2d2e2d2d 	.word	0x2d2e2d2d
 8000fbc:	00000000 	.word	0x00000000
 8000fc0:	002e2d2e 	.word	0x002e2d2e
 8000fc4:	002e2e2e 	.word	0x002e2e2e
 8000fc8:	0000002d 	.word	0x0000002d
 8000fcc:	002d2e2e 	.word	0x002d2e2e
 8000fd0:	2d2e2e2e 	.word	0x2d2e2e2e
 8000fd4:	00000000 	.word	0x00000000
 8000fd8:	002d2d2e 	.word	0x002d2d2e
 8000fdc:	2d2e2e2d 	.word	0x2d2e2e2d
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	2d2d2e2d 	.word	0x2d2d2e2d
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	2e2e2d2d 	.word	0x2e2e2d2d
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	2d2d2d2d 	.word	0x2d2d2d2d
 8000ff8:	0000002d 	.word	0x0000002d
 8000ffc:	2d2d2d2e 	.word	0x2d2d2d2e
 8001000:	0000002d 	.word	0x0000002d
 8001004:	2d2d2e2e 	.word	0x2d2d2e2e
 8001008:	0000002d 	.word	0x0000002d
 800100c:	2d2e2e2e 	.word	0x2d2e2e2e
 8001010:	0000002d 	.word	0x0000002d
 8001014:	2e2e2e2e 	.word	0x2e2e2e2e
 8001018:	0000002d 	.word	0x0000002d
 800101c:	2e2e2e2e 	.word	0x2e2e2e2e
 8001020:	0000002e 	.word	0x0000002e
 8001024:	2e2e2e2d 	.word	0x2e2e2e2d
 8001028:	0000002e 	.word	0x0000002e
 800102c:	2e2e2d2d 	.word	0x2e2e2d2d
 8001030:	0000002e 	.word	0x0000002e
 8001034:	2e2d2d2d 	.word	0x2e2d2d2d
 8001038:	0000002e 	.word	0x0000002e
 800103c:	2d2d2d2d 	.word	0x2d2d2d2d
 8001040:	0000002e 	.word	0x0000002e
 8001044:	08000f5c 	.word	0x08000f5c
 8001048:	08000f60 	.word	0x08000f60
 800104c:	08000f68 	.word	0x08000f68
 8001050:	08000f70 	.word	0x08000f70
 8001054:	08000f74 	.word	0x08000f74
 8001058:	08000f78 	.word	0x08000f78
 800105c:	08000f80 	.word	0x08000f80
 8001060:	08000f84 	.word	0x08000f84
 8001064:	08000f8c 	.word	0x08000f8c
 8001068:	08000f90 	.word	0x08000f90
 800106c:	08000f98 	.word	0x08000f98
 8001070:	08000f9c 	.word	0x08000f9c
 8001074:	08000fa4 	.word	0x08000fa4
 8001078:	08000fa8 	.word	0x08000fa8
 800107c:	08000fac 	.word	0x08000fac
 8001080:	08000fb0 	.word	0x08000fb0
 8001084:	08000fb8 	.word	0x08000fb8
 8001088:	08000fc0 	.word	0x08000fc0
 800108c:	08000fc4 	.word	0x08000fc4
 8001090:	08000fc8 	.word	0x08000fc8
 8001094:	08000fcc 	.word	0x08000fcc
 8001098:	08000fd0 	.word	0x08000fd0
 800109c:	08000fd8 	.word	0x08000fd8
 80010a0:	08000fdc 	.word	0x08000fdc
 80010a4:	08000fe4 	.word	0x08000fe4
 80010a8:	08000fec 	.word	0x08000fec
 80010ac:	08000ff4 	.word	0x08000ff4
 80010b0:	08000ffc 	.word	0x08000ffc
 80010b4:	08001004 	.word	0x08001004
 80010b8:	0800100c 	.word	0x0800100c
 80010bc:	08001014 	.word	0x08001014
 80010c0:	0800101c 	.word	0x0800101c
 80010c4:	08001024 	.word	0x08001024
 80010c8:	0800102c 	.word	0x0800102c
 80010cc:	08001034 	.word	0x08001034
 80010d0:	0800103c 	.word	0x0800103c
 80010d4:	00000080 	.word	0x00000080
 80010d8:	00010000 	.word	0x00010000
 80010dc:	00000000 	.word	0x00000000
 80010e0:	41432049 	.word	0x41432049
 80010e4:	4f4d204e 	.word	0x4f4d204e
 80010e8:	00455352 	.word	0x00455352

080010ec <_ctype_>:
 80010ec:	20202000 20202020 28282020 20282828     .         ((((( 
 80010fc:	20202020 20202020 20202020 20202020                     
 800110c:	10108820 10101010 10101010 10101010      ...............
 800111c:	04040410 04040404 10040404 10101010     ................
 800112c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800113c:	01010101 01010101 01010101 10101010     ................
 800114c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800115c:	02020202 02020202 02020202 10101010     ................
 800116c:	00000020 00000000 00000000 00000000      ...............
	...

080011f0 <_global_impure_ptr>:
 80011f0:	20000008                                ... 
