
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006f64  08000000  0c000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  00020458  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  00020458  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  00020458  2**0
                  CONTENTS
  5 .data         00000458  20000000  0c006f64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000668  20000458  0c0073bc  00020458  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  00020458  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000e00  30000000  0c0073bc  00030000  2**2
                  ALLOC
 10 .debug_aranges 00000900  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   0001060a  00000000  00000000  00020d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000244a  00000000  00000000  00031362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0000d3f2  00000000  00000000  000337ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00002390  00000000  00000000  00040ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00083df8  00000000  00000000  00042f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000049a0  00000000  00000000  000c6d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000007e8  00000000  00000000  000cb6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .build_attributes 000004d0  00000000  00000000  000cbeb0  2**0
                  CONTENTS, READONLY
 19 .debug_macro  0001ce41  00000000  00000000  000cc380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	81 0b 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	ed 0c 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
 8000206:	4780      	blx	r0
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)
 800020c:	42ac      	cmp	r4, r5
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
 8000210:	6821      	ldr	r1, [r4, #0]
 8000212:	6862      	ldr	r2, [r4, #4]
 8000214:	68a3      	ldr	r3, [r4, #8]
 8000216:	3b04      	subs	r3, #4
 8000218:	bfa2      	ittt	ge
 800021a:	58c8      	ldrge	r0, [r1, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>
 8000220:	340c      	adds	r4, #12
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)
 8000228:	42a3      	cmp	r3, r4
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
 800022c:	6819      	ldr	r1, [r3, #0]
 800022e:	685a      	ldr	r2, [r3, #4]
 8000230:	2000      	movs	r0, #0
 8000232:	3a04      	subs	r2, #4
 8000234:	bfa4      	itt	ge
 8000236:	5088      	strge	r0, [r1, r2]
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>
 800023a:	3308      	adds	r3, #8
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
 8000240:	4780      	blx	r0
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c006f64 	.word	0x0c006f64
 800024c:	20000000 	.word	0x20000000
 8000250:	00000458 	.word	0x00000458
 8000254:	0c0073bc 	.word	0x0c0073bc
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c006f64 	.word	0x0c006f64
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c006f64 	.word	0x0c006f64
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000458 	.word	0x20000458
 800027c:	00000668 	.word	0x00000668
 8000280:	30000000 	.word	0x30000000
 8000284:	00000e00 	.word	0x00000e00
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
 8000290:	10000800 	.word	0x10000800
 8000294:	080064e9 	.word	0x080064e9
 8000298:	08000248 	.word	0x08000248
 800029c:	08000278 	.word	0x08000278
 80002a0:	08000278 	.word	0x08000278
 80002a4:	08000290 	.word	0x08000290
 80002a8:	080068f5 	.word	0x080068f5
 80002ac:	08000711 	.word	0x08000711

080002b0 <BusFault_Handler>:
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	db0a      	blt.n	80002de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	490c      	ldr	r1, [pc, #48]	; (8000300 <__NVIC_SetPriority+0x4c>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	0092      	lsls	r2, r2, #2
 80002d4:	b2d2      	uxtb	r2, r2
 80002d6:	440b      	add	r3, r1
 80002d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002dc:	e00a      	b.n	80002f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4908      	ldr	r1, [pc, #32]	; (8000304 <__NVIC_SetPriority+0x50>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	f003 030f 	and.w	r3, r3, #15
 80002ea:	3b04      	subs	r3, #4
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	440b      	add	r3, r1
 80002f2:	761a      	strb	r2, [r3, #24]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000e100 	.word	0xe000e100
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3b01      	subs	r3, #1
 8000314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000318:	d301      	bcc.n	800031e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800031a:	2301      	movs	r3, #1
 800031c:	e00f      	b.n	800033e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <SysTick_Config+0x40>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3b01      	subs	r3, #1
 8000324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000326:	213f      	movs	r1, #63	; 0x3f
 8000328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800032c:	f7ff ffc2 	bl	80002b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SysTick_Config+0x40>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <SysTick_Config+0x40>)
 8000338:	2207      	movs	r2, #7
 800033a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010

0800034c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	2201      	movs	r2, #1
 800035c:	409a      	lsls	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	605a      	str	r2, [r3, #4]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	460b      	mov	r3, r1
 8000378:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800037a:	78fb      	ldrb	r3, [r7, #3]
 800037c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000380:	409a      	lsls	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
	...

08000394 <translate_char>:

// Simple tick counter for timing
volatile uint32_t tick_counter = 0;

uint8_t translate_char(const char c)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
    switch (c)
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	3b20      	subs	r3, #32
 80003a2:	2b5e      	cmp	r3, #94	; 0x5e
 80003a4:	f200 8172 	bhi.w	800068c <translate_char+0x2f8>
 80003a8:	a201      	add	r2, pc, #4	; (adr r2, 80003b0 <translate_char+0x1c>)
 80003aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ae:	bf00      	nop
 80003b0:	080005fd 	.word	0x080005fd
 80003b4:	08000629 	.word	0x08000629
 80003b8:	0800062d 	.word	0x0800062d
 80003bc:	0800068d 	.word	0x0800068d
 80003c0:	08000631 	.word	0x08000631
 80003c4:	08000635 	.word	0x08000635
 80003c8:	08000639 	.word	0x08000639
 80003cc:	0800068d 	.word	0x0800068d
 80003d0:	08000641 	.word	0x08000641
 80003d4:	08000645 	.word	0x08000645
 80003d8:	0800065d 	.word	0x0800065d
 80003dc:	08000659 	.word	0x08000659
 80003e0:	0800066d 	.word	0x0800066d
 80003e4:	08000651 	.word	0x08000651
 80003e8:	08000671 	.word	0x08000671
 80003ec:	0800063d 	.word	0x0800063d
 80003f0:	08000625 	.word	0x08000625
 80003f4:	08000601 	.word	0x08000601
 80003f8:	08000605 	.word	0x08000605
 80003fc:	08000609 	.word	0x08000609
 8000400:	0800060d 	.word	0x0800060d
 8000404:	08000611 	.word	0x08000611
 8000408:	08000615 	.word	0x08000615
 800040c:	08000619 	.word	0x08000619
 8000410:	0800061d 	.word	0x0800061d
 8000414:	08000621 	.word	0x08000621
 8000418:	08000669 	.word	0x08000669
 800041c:	08000665 	.word	0x08000665
 8000420:	08000675 	.word	0x08000675
 8000424:	08000649 	.word	0x08000649
 8000428:	08000679 	.word	0x08000679
 800042c:	0800064d 	.word	0x0800064d
 8000430:	0800068d 	.word	0x0800068d
 8000434:	08000595 	.word	0x08000595
 8000438:	08000599 	.word	0x08000599
 800043c:	0800059d 	.word	0x0800059d
 8000440:	080005a1 	.word	0x080005a1
 8000444:	080005a5 	.word	0x080005a5
 8000448:	080005a9 	.word	0x080005a9
 800044c:	080005ad 	.word	0x080005ad
 8000450:	080005b1 	.word	0x080005b1
 8000454:	080005b5 	.word	0x080005b5
 8000458:	080005b9 	.word	0x080005b9
 800045c:	080005bd 	.word	0x080005bd
 8000460:	080005c1 	.word	0x080005c1
 8000464:	080005c5 	.word	0x080005c5
 8000468:	080005c9 	.word	0x080005c9
 800046c:	080005cd 	.word	0x080005cd
 8000470:	080005d1 	.word	0x080005d1
 8000474:	080005d5 	.word	0x080005d5
 8000478:	080005d9 	.word	0x080005d9
 800047c:	080005dd 	.word	0x080005dd
 8000480:	080005e1 	.word	0x080005e1
 8000484:	080005e5 	.word	0x080005e5
 8000488:	080005e9 	.word	0x080005e9
 800048c:	080005ed 	.word	0x080005ed
 8000490:	080005f1 	.word	0x080005f1
 8000494:	080005f5 	.word	0x080005f5
 8000498:	080005f9 	.word	0x080005f9
 800049c:	0800067d 	.word	0x0800067d
 80004a0:	0800068d 	.word	0x0800068d
 80004a4:	08000681 	.word	0x08000681
 80004a8:	0800068d 	.word	0x0800068d
 80004ac:	08000655 	.word	0x08000655
 80004b0:	0800068d 	.word	0x0800068d
 80004b4:	0800052d 	.word	0x0800052d
 80004b8:	08000531 	.word	0x08000531
 80004bc:	08000535 	.word	0x08000535
 80004c0:	08000539 	.word	0x08000539
 80004c4:	0800053d 	.word	0x0800053d
 80004c8:	08000541 	.word	0x08000541
 80004cc:	08000545 	.word	0x08000545
 80004d0:	08000549 	.word	0x08000549
 80004d4:	0800054d 	.word	0x0800054d
 80004d8:	08000551 	.word	0x08000551
 80004dc:	08000555 	.word	0x08000555
 80004e0:	08000559 	.word	0x08000559
 80004e4:	0800055d 	.word	0x0800055d
 80004e8:	08000561 	.word	0x08000561
 80004ec:	08000565 	.word	0x08000565
 80004f0:	08000569 	.word	0x08000569
 80004f4:	0800056d 	.word	0x0800056d
 80004f8:	08000571 	.word	0x08000571
 80004fc:	08000575 	.word	0x08000575
 8000500:	08000579 	.word	0x08000579
 8000504:	0800057d 	.word	0x0800057d
 8000508:	08000581 	.word	0x08000581
 800050c:	08000585 	.word	0x08000585
 8000510:	08000589 	.word	0x08000589
 8000514:	0800058d 	.word	0x0800058d
 8000518:	08000591 	.word	0x08000591
 800051c:	08000685 	.word	0x08000685
 8000520:	0800068d 	.word	0x0800068d
 8000524:	08000689 	.word	0x08000689
 8000528:	08000661 	.word	0x08000661
    {
    case 'a':
        return GERMAN_KEYBOARD_SC_A;
 800052c:	2304      	movs	r3, #4
 800052e:	e0ae      	b.n	800068e <translate_char+0x2fa>
    case 'b':
        return GERMAN_KEYBOARD_SC_B;
 8000530:	2305      	movs	r3, #5
 8000532:	e0ac      	b.n	800068e <translate_char+0x2fa>
    case 'c':
        return GERMAN_KEYBOARD_SC_C;
 8000534:	2306      	movs	r3, #6
 8000536:	e0aa      	b.n	800068e <translate_char+0x2fa>
    case 'd':
        return GERMAN_KEYBOARD_SC_D;
 8000538:	2307      	movs	r3, #7
 800053a:	e0a8      	b.n	800068e <translate_char+0x2fa>
    case 'e':
        return GERMAN_KEYBOARD_SC_E;
 800053c:	2308      	movs	r3, #8
 800053e:	e0a6      	b.n	800068e <translate_char+0x2fa>
    case 'f':
        return GERMAN_KEYBOARD_SC_F;
 8000540:	2309      	movs	r3, #9
 8000542:	e0a4      	b.n	800068e <translate_char+0x2fa>
    case 'g':
        return GERMAN_KEYBOARD_SC_G;
 8000544:	230a      	movs	r3, #10
 8000546:	e0a2      	b.n	800068e <translate_char+0x2fa>
    case 'h':
        return GERMAN_KEYBOARD_SC_H;
 8000548:	230b      	movs	r3, #11
 800054a:	e0a0      	b.n	800068e <translate_char+0x2fa>
    case 'i':
        return GERMAN_KEYBOARD_SC_I;
 800054c:	230c      	movs	r3, #12
 800054e:	e09e      	b.n	800068e <translate_char+0x2fa>
    case 'j':
        return GERMAN_KEYBOARD_SC_J;
 8000550:	230d      	movs	r3, #13
 8000552:	e09c      	b.n	800068e <translate_char+0x2fa>
    case 'k':
        return GERMAN_KEYBOARD_SC_K;
 8000554:	230e      	movs	r3, #14
 8000556:	e09a      	b.n	800068e <translate_char+0x2fa>
    case 'l':
        return GERMAN_KEYBOARD_SC_L;
 8000558:	230f      	movs	r3, #15
 800055a:	e098      	b.n	800068e <translate_char+0x2fa>
    case 'm':
        return GERMAN_KEYBOARD_SC_M;
 800055c:	2310      	movs	r3, #16
 800055e:	e096      	b.n	800068e <translate_char+0x2fa>
    case 'n':
        return GERMAN_KEYBOARD_SC_N;
 8000560:	2311      	movs	r3, #17
 8000562:	e094      	b.n	800068e <translate_char+0x2fa>
    case 'o':
        return GERMAN_KEYBOARD_SC_O;
 8000564:	2312      	movs	r3, #18
 8000566:	e092      	b.n	800068e <translate_char+0x2fa>
    case 'p':
        return GERMAN_KEYBOARD_SC_P;
 8000568:	2313      	movs	r3, #19
 800056a:	e090      	b.n	800068e <translate_char+0x2fa>
    case 'q':
        return GERMAN_KEYBOARD_SC_Q;
 800056c:	2314      	movs	r3, #20
 800056e:	e08e      	b.n	800068e <translate_char+0x2fa>
    case 'r':
        return GERMAN_KEYBOARD_SC_R;
 8000570:	2315      	movs	r3, #21
 8000572:	e08c      	b.n	800068e <translate_char+0x2fa>
    case 's':
        return GERMAN_KEYBOARD_SC_S;
 8000574:	2316      	movs	r3, #22
 8000576:	e08a      	b.n	800068e <translate_char+0x2fa>
    case 't':
        return GERMAN_KEYBOARD_SC_T;
 8000578:	2317      	movs	r3, #23
 800057a:	e088      	b.n	800068e <translate_char+0x2fa>
    case 'u':
        return GERMAN_KEYBOARD_SC_U;
 800057c:	2318      	movs	r3, #24
 800057e:	e086      	b.n	800068e <translate_char+0x2fa>
    case 'v':
        return GERMAN_KEYBOARD_SC_V;
 8000580:	2319      	movs	r3, #25
 8000582:	e084      	b.n	800068e <translate_char+0x2fa>
    case 'w':
        return GERMAN_KEYBOARD_SC_W;
 8000584:	231a      	movs	r3, #26
 8000586:	e082      	b.n	800068e <translate_char+0x2fa>
    case 'x':
        return GERMAN_KEYBOARD_SC_X;
 8000588:	231b      	movs	r3, #27
 800058a:	e080      	b.n	800068e <translate_char+0x2fa>
    case 'y':
        return GERMAN_KEYBOARD_SC_Y;
 800058c:	231d      	movs	r3, #29
 800058e:	e07e      	b.n	800068e <translate_char+0x2fa>
    case 'z':
        return GERMAN_KEYBOARD_SC_Z;
 8000590:	231c      	movs	r3, #28
 8000592:	e07c      	b.n	800068e <translate_char+0x2fa>

    case 'A':
        return GERMAN_KEYBOARD_SC_A;
 8000594:	2304      	movs	r3, #4
 8000596:	e07a      	b.n	800068e <translate_char+0x2fa>
    case 'B':
        return GERMAN_KEYBOARD_SC_B;
 8000598:	2305      	movs	r3, #5
 800059a:	e078      	b.n	800068e <translate_char+0x2fa>
    case 'C':
        return GERMAN_KEYBOARD_SC_C;
 800059c:	2306      	movs	r3, #6
 800059e:	e076      	b.n	800068e <translate_char+0x2fa>
    case 'D':
        return GERMAN_KEYBOARD_SC_D;
 80005a0:	2307      	movs	r3, #7
 80005a2:	e074      	b.n	800068e <translate_char+0x2fa>
    case 'E':
        return GERMAN_KEYBOARD_SC_E;
 80005a4:	2308      	movs	r3, #8
 80005a6:	e072      	b.n	800068e <translate_char+0x2fa>
    case 'F':
        return GERMAN_KEYBOARD_SC_F;
 80005a8:	2309      	movs	r3, #9
 80005aa:	e070      	b.n	800068e <translate_char+0x2fa>
    case 'G':
        return GERMAN_KEYBOARD_SC_G;
 80005ac:	230a      	movs	r3, #10
 80005ae:	e06e      	b.n	800068e <translate_char+0x2fa>
    case 'H':
        return GERMAN_KEYBOARD_SC_H;
 80005b0:	230b      	movs	r3, #11
 80005b2:	e06c      	b.n	800068e <translate_char+0x2fa>
    case 'I':
        return GERMAN_KEYBOARD_SC_I;
 80005b4:	230c      	movs	r3, #12
 80005b6:	e06a      	b.n	800068e <translate_char+0x2fa>
    case 'J':
        return GERMAN_KEYBOARD_SC_J;
 80005b8:	230d      	movs	r3, #13
 80005ba:	e068      	b.n	800068e <translate_char+0x2fa>
    case 'K':
        return GERMAN_KEYBOARD_SC_K;
 80005bc:	230e      	movs	r3, #14
 80005be:	e066      	b.n	800068e <translate_char+0x2fa>
    case 'L':
        return GERMAN_KEYBOARD_SC_L;
 80005c0:	230f      	movs	r3, #15
 80005c2:	e064      	b.n	800068e <translate_char+0x2fa>
    case 'M':
        return GERMAN_KEYBOARD_SC_M;
 80005c4:	2310      	movs	r3, #16
 80005c6:	e062      	b.n	800068e <translate_char+0x2fa>
    case 'N':
        return GERMAN_KEYBOARD_SC_N;
 80005c8:	2311      	movs	r3, #17
 80005ca:	e060      	b.n	800068e <translate_char+0x2fa>
    case 'O':
        return GERMAN_KEYBOARD_SC_O;
 80005cc:	2312      	movs	r3, #18
 80005ce:	e05e      	b.n	800068e <translate_char+0x2fa>
    case 'P':
        return GERMAN_KEYBOARD_SC_P;
 80005d0:	2313      	movs	r3, #19
 80005d2:	e05c      	b.n	800068e <translate_char+0x2fa>
    case 'Q':
        return GERMAN_KEYBOARD_SC_Q;
 80005d4:	2314      	movs	r3, #20
 80005d6:	e05a      	b.n	800068e <translate_char+0x2fa>
    case 'R':
        return GERMAN_KEYBOARD_SC_R;
 80005d8:	2315      	movs	r3, #21
 80005da:	e058      	b.n	800068e <translate_char+0x2fa>
    case 'S':
        return GERMAN_KEYBOARD_SC_S;
 80005dc:	2316      	movs	r3, #22
 80005de:	e056      	b.n	800068e <translate_char+0x2fa>
    case 'T':
        return GERMAN_KEYBOARD_SC_T;
 80005e0:	2317      	movs	r3, #23
 80005e2:	e054      	b.n	800068e <translate_char+0x2fa>
    case 'U':
        return GERMAN_KEYBOARD_SC_U;
 80005e4:	2318      	movs	r3, #24
 80005e6:	e052      	b.n	800068e <translate_char+0x2fa>
    case 'V':
        return GERMAN_KEYBOARD_SC_V;
 80005e8:	2319      	movs	r3, #25
 80005ea:	e050      	b.n	800068e <translate_char+0x2fa>
    case 'W':
        return GERMAN_KEYBOARD_SC_W;
 80005ec:	231a      	movs	r3, #26
 80005ee:	e04e      	b.n	800068e <translate_char+0x2fa>
    case 'X':
        return GERMAN_KEYBOARD_SC_X;
 80005f0:	231b      	movs	r3, #27
 80005f2:	e04c      	b.n	800068e <translate_char+0x2fa>
    case 'Y':
        return GERMAN_KEYBOARD_SC_Y;
 80005f4:	231d      	movs	r3, #29
 80005f6:	e04a      	b.n	800068e <translate_char+0x2fa>
    case 'Z':
        return GERMAN_KEYBOARD_SC_Z;
 80005f8:	231c      	movs	r3, #28
 80005fa:	e048      	b.n	800068e <translate_char+0x2fa>

    case ' ':
        return GERMAN_KEYBOARD_SC_SPACE;
 80005fc:	232c      	movs	r3, #44	; 0x2c
 80005fe:	e046      	b.n	800068e <translate_char+0x2fa>
    case '1':
        return GERMAN_KEYBOARD_SC_1_AND_EXCLAMATION;
 8000600:	231e      	movs	r3, #30
 8000602:	e044      	b.n	800068e <translate_char+0x2fa>
    case '2':
        return GERMAN_KEYBOARD_SC_2_AND_QUOTES;
 8000604:	231f      	movs	r3, #31
 8000606:	e042      	b.n	800068e <translate_char+0x2fa>
    case '3':
        return GERMAN_KEYBOARD_SC_3_AND_PARAGRAPH;
 8000608:	2320      	movs	r3, #32
 800060a:	e040      	b.n	800068e <translate_char+0x2fa>
    case '4':
        return GERMAN_KEYBOARD_SC_4_AND_DOLLAR;
 800060c:	2321      	movs	r3, #33	; 0x21
 800060e:	e03e      	b.n	800068e <translate_char+0x2fa>
    case '5':
        return GERMAN_KEYBOARD_SC_5_AND_PERCENTAGE;
 8000610:	2322      	movs	r3, #34	; 0x22
 8000612:	e03c      	b.n	800068e <translate_char+0x2fa>
    case '6':
        return GERMAN_KEYBOARD_SC_6_AND_AMPERSAND;
 8000614:	2323      	movs	r3, #35	; 0x23
 8000616:	e03a      	b.n	800068e <translate_char+0x2fa>
    case '7':
        return GERMAN_KEYBOARD_SC_7_AND_SLASH_AND_OPENING_BRACE;
 8000618:	2324      	movs	r3, #36	; 0x24
 800061a:	e038      	b.n	800068e <translate_char+0x2fa>
    case '8':
        return GERMAN_KEYBOARD_SC_8_AND_OPENING_PARENTHESIS_AND_OPENING_BRACKET;
 800061c:	2325      	movs	r3, #37	; 0x25
 800061e:	e036      	b.n	800068e <translate_char+0x2fa>
    case '9':
        return GERMAN_KEYBOARD_SC_9_AND_CLOSING_PARENTHESIS_AND_CLOSING_BRACKET;
 8000620:	2326      	movs	r3, #38	; 0x26
 8000622:	e034      	b.n	800068e <translate_char+0x2fa>
    case '0':
        return GERMAN_KEYBOARD_SC_0_AND_EQUAL_AND_CLOSING_BRACE;
 8000624:	2327      	movs	r3, #39	; 0x27
 8000626:	e032      	b.n	800068e <translate_char+0x2fa>

    case '!':
        return GERMAN_KEYBOARD_SC_1_AND_EXCLAMATION;
 8000628:	231e      	movs	r3, #30
 800062a:	e030      	b.n	800068e <translate_char+0x2fa>
    case '"':
        return GERMAN_KEYBOARD_SC_2_AND_QUOTES;
 800062c:	231f      	movs	r3, #31
 800062e:	e02e      	b.n	800068e <translate_char+0x2fa>
    case '$':
        return GERMAN_KEYBOARD_SC_4_AND_DOLLAR;
 8000630:	2321      	movs	r3, #33	; 0x21
 8000632:	e02c      	b.n	800068e <translate_char+0x2fa>
    case'§':
        return GERMAN_KEYBOARD_SC_3_AND_PARAGRAPH;
    case '%':
        return GERMAN_KEYBOARD_SC_5_AND_PERCENTAGE;
 8000634:	2322      	movs	r3, #34	; 0x22
 8000636:	e02a      	b.n	800068e <translate_char+0x2fa>
    case '&':
        return GERMAN_KEYBOARD_SC_6_AND_AMPERSAND;
 8000638:	2323      	movs	r3, #35	; 0x23
 800063a:	e028      	b.n	800068e <translate_char+0x2fa>
    case '/':
        return GERMAN_KEYBOARD_SC_7_AND_SLASH_AND_OPENING_BRACE;
 800063c:	2324      	movs	r3, #36	; 0x24
 800063e:	e026      	b.n	800068e <translate_char+0x2fa>
    case '(':
        return GERMAN_KEYBOARD_SC_8_AND_OPENING_PARENTHESIS_AND_OPENING_BRACKET;
 8000640:	2325      	movs	r3, #37	; 0x25
 8000642:	e024      	b.n	800068e <translate_char+0x2fa>
    case ')':
        return GERMAN_KEYBOARD_SC_9_AND_CLOSING_PARENTHESIS_AND_CLOSING_BRACKET;
 8000644:	2326      	movs	r3, #38	; 0x26
 8000646:	e022      	b.n	800068e <translate_char+0x2fa>
    case '=':
        return GERMAN_KEYBOARD_SC_0_AND_EQUAL_AND_CLOSING_BRACE;
 8000648:	2327      	movs	r3, #39	; 0x27
 800064a:	e020      	b.n	800068e <translate_char+0x2fa>
    case '?':
        return GERMAN_KEYBOARD_SC_SHARP_S_AND_QUESTION_AND_BACKSLASH;
 800064c:	232d      	movs	r3, #45	; 0x2d
 800064e:	e01e      	b.n	800068e <translate_char+0x2fa>
    case '-':
        return GERMAN_KEYBOARD_SC_MINUS_AND_UNDERSCORE;
 8000650:	2338      	movs	r3, #56	; 0x38
 8000652:	e01c      	b.n	800068e <translate_char+0x2fa>
    case '_':
        return GERMAN_KEYBOARD_SC_MINUS_AND_UNDERSCORE;
 8000654:	2338      	movs	r3, #56	; 0x38
 8000656:	e01a      	b.n	800068e <translate_char+0x2fa>
    case '+':
        return GERMAN_KEYBOARD_SC_PLUS_AND_ASTERISK_AND_TILDE;
 8000658:	2330      	movs	r3, #48	; 0x30
 800065a:	e018      	b.n	800068e <translate_char+0x2fa>
    case '*':
        return GERMAN_KEYBOARD_SC_PLUS_AND_ASTERISK_AND_TILDE;
 800065c:	2330      	movs	r3, #48	; 0x30
 800065e:	e016      	b.n	800068e <translate_char+0x2fa>
    case '~':
        return GERMAN_KEYBOARD_SC_PLUS_AND_ASTERISK_AND_TILDE;
 8000660:	2330      	movs	r3, #48	; 0x30
 8000662:	e014      	b.n	800068e <translate_char+0x2fa>
    case ';':
        return GERMAN_KEYBOARD_SC_COMMA_AND_SEMICOLON;
 8000664:	2336      	movs	r3, #54	; 0x36
 8000666:	e012      	b.n	800068e <translate_char+0x2fa>
    case ':':
        return GERMAN_KEYBOARD_SC_DOT_AND_COLON;
 8000668:	2337      	movs	r3, #55	; 0x37
 800066a:	e010      	b.n	800068e <translate_char+0x2fa>
    case ',':
        return GERMAN_KEYBOARD_SC_COMMA_AND_SEMICOLON;
 800066c:	2336      	movs	r3, #54	; 0x36
 800066e:	e00e      	b.n	800068e <translate_char+0x2fa>
    case '.':
        return GERMAN_KEYBOARD_SC_DOT_AND_COLON;
 8000670:	2337      	movs	r3, #55	; 0x37
 8000672:	e00c      	b.n	800068e <translate_char+0x2fa>
    case '<':
        return GERMAN_KEYBOARD_SC_LESS_THAN_AND_GREATER_THAN_AND_PIPE;
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	e00a      	b.n	800068e <translate_char+0x2fa>
    case '>':
        return GERMAN_KEYBOARD_SC_LESS_THAN_AND_GREATER_THAN_AND_PIPE;
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	e008      	b.n	800068e <translate_char+0x2fa>
    case '[':
        return GERMAN_KEYBOARD_SC_8_AND_OPENING_PARENTHESIS_AND_OPENING_BRACKET;
 800067c:	2325      	movs	r3, #37	; 0x25
 800067e:	e006      	b.n	800068e <translate_char+0x2fa>
    case ']':
        return GERMAN_KEYBOARD_SC_9_AND_CLOSING_PARENTHESIS_AND_CLOSING_BRACKET;
 8000680:	2326      	movs	r3, #38	; 0x26
 8000682:	e004      	b.n	800068e <translate_char+0x2fa>
    case '{':
        return GERMAN_KEYBOARD_SC_7_AND_SLASH_AND_OPENING_BRACE;
 8000684:	2324      	movs	r3, #36	; 0x24
 8000686:	e002      	b.n	800068e <translate_char+0x2fa>
    case '}':
        return GERMAN_KEYBOARD_SC_0_AND_EQUAL_AND_CLOSING_BRACE;
 8000688:	2327      	movs	r3, #39	; 0x27
 800068a:	e000      	b.n	800068e <translate_char+0x2fa>

    default:
        return 0; // Zeichen nicht unterstützt
 800068c:	2300      	movs	r3, #0
    }
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <requires_shift>:

bool requires_shift(char c)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
    return isupper(c) || strchr("!\"$&/()=?+;:_<>§", c);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a0c      	ldr	r2, [pc, #48]	; (80006dc <requires_shift+0x40>)
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	f003 0303 	and.w	r3, r3, #3
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d007      	beq.n	80006c8 <requires_shift+0x2c>
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	4619      	mov	r1, r3
 80006bc:	4808      	ldr	r0, [pc, #32]	; (80006e0 <requires_shift+0x44>)
 80006be:	f006 fa5d 	bl	8006b7c <strchr>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <requires_shift+0x30>
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <requires_shift+0x32>
 80006cc:	2300      	movs	r3, #0
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	b2db      	uxtb	r3, r3
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	08006e5c 	.word	0x08006e5c
 80006e0:	08006ce0 	.word	0x08006ce0

080006e4 <requires_alt_gr>:

bool requires_alt_gr(char c)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
    return strchr("[]{}\\~|", c);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4619      	mov	r1, r3
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <requires_alt_gr+0x28>)
 80006f4:	f006 fa42 	bl	8006b7c <strchr>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	08006cf4 	.word	0x08006cf4

08000710 <main>:
/**
 * Main program entry point. This routine configures the hardware required by
 * the application, then enters a loop to run the application tasks in sequence.
 */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
    // Init LED pins for debugging and NUM/CAPS visual report
    XMC_GPIO_SetMode(LED1, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	2101      	movs	r1, #1
 800071a:	4811      	ldr	r0, [pc, #68]	; (8000760 <main+0x50>)
 800071c:	f002 f87e 	bl	800281c <XMC_GPIO_SetMode>
    XMC_GPIO_SetMode(LED2, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 8000720:	2280      	movs	r2, #128	; 0x80
 8000722:	2100      	movs	r1, #0
 8000724:	480e      	ldr	r0, [pc, #56]	; (8000760 <main+0x50>)
 8000726:	f002 f879 	bl	800281c <XMC_GPIO_SetMode>
    
    // Initialize SysTick for timing measurements
    SystemCoreClockSetup();
 800072a:	f000 fa0f 	bl	8000b4c <SystemCoreClockSetup>
    SysTick_Config(SystemCoreClock / 1000); // 1ms tick
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <main+0x54>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <main+0x58>)
 8000734:	fba2 2303 	umull	r2, r3, r2, r3
 8000738:	099b      	lsrs	r3, r3, #6
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fde4 	bl	8000308 <SysTick_Config>
    
    USB_Init();
 8000740:	f000 fade 	bl	8000d00 <USB_Init>

    // Wait until host has enumerated HID device
    for (int i = 0; i < 10e6; ++i)
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	e002      	b.n	8000750 <main+0x40>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3301      	adds	r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a06      	ldr	r2, [pc, #24]	; (800076c <main+0x5c>)
 8000754:	4293      	cmp	r3, r2
 8000756:	dbf8      	blt.n	800074a <main+0x3a>
        ;

    while (1)
    {
        HID_Device_USBTask(&Keyboard_HID_Interface);
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <main+0x60>)
 800075a:	f002 fae1 	bl	8002d20 <HID_Device_USBTask>
 800075e:	e7fb      	b.n	8000758 <main+0x48>
 8000760:	48028100 	.word	0x48028100
 8000764:	2000ffc0 	.word	0x2000ffc0
 8000768:	10624dd3 	.word	0x10624dd3
 800076c:	00989680 	.word	0x00989680
 8000770:	20000000 	.word	0x20000000

08000774 <CALLBACK_HID_Device_CreateHIDReport>:
    USB_ClassInfo_HID_Device_t *const HIDInterfaceInfo,
    uint8_t *const ReportID,
    const uint8_t ReportType,
    void *ReportData,
    uint16_t *const ReportSize)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	4613      	mov	r3, r2
 8000782:	71fb      	strb	r3, [r7, #7]
    USB_KeyboardReport_Data_t *report = (USB_KeyboardReport_Data_t *)ReportData;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	617b      	str	r3, [r7, #20]
    *ReportSize = sizeof(USB_KeyboardReport_Data_t);
 8000788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078a:	2208      	movs	r2, #8
 800078c:	801a      	strh	r2, [r3, #0]
    

    if (!password_correct_flag)
 800078e:	4b96      	ldr	r3, [pc, #600]	; (80009e8 <CALLBACK_HID_Device_CreateHIDReport+0x274>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	f040 80c2 	bne.w	800091c <CALLBACK_HID_Device_CreateHIDReport+0x1a8>
    {


        // Send the character
        if (characterSent)
 8000798:	4b94      	ldr	r3, [pc, #592]	; (80009ec <CALLBACK_HID_Device_CreateHIDReport+0x278>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00c      	beq.n	80007ba <CALLBACK_HID_Device_CreateHIDReport+0x46>
        {
            //key release
            report->Modifier = 0;
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
            report->Reserved = 0;
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	2200      	movs	r2, #0
 80007aa:	705a      	strb	r2, [r3, #1]
            report->KeyCode[0] = 0;
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	2200      	movs	r2, #0
 80007b0:	709a      	strb	r2, [r3, #2]
            characterSent = 0;
 80007b2:	4b8e      	ldr	r3, [pc, #568]	; (80009ec <CALLBACK_HID_Device_CreateHIDReport+0x278>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	e153      	b.n	8000a62 <CALLBACK_HID_Device_CreateHIDReport+0x2ee>
        }
        else
        {
            // First, send all known password characters
            if (password_index < password_tail) {
 80007ba:	4b8d      	ldr	r3, [pc, #564]	; (80009f0 <CALLBACK_HID_Device_CreateHIDReport+0x27c>)
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	4b8d      	ldr	r3, [pc, #564]	; (80009f4 <CALLBACK_HID_Device_CreateHIDReport+0x280>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d233      	bcs.n	800082e <CALLBACK_HID_Device_CreateHIDReport+0xba>
                //auch an der richtigen stelle erreicht
                report->Modifier = requires_shift(password[password_index]) ? HID_KEYBOARD_MODIFIER_LEFTSHIFT : 0;
 80007c6:	4b8a      	ldr	r3, [pc, #552]	; (80009f0 <CALLBACK_HID_Device_CreateHIDReport+0x27c>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b8a      	ldr	r3, [pc, #552]	; (80009f8 <CALLBACK_HID_Device_CreateHIDReport+0x284>)
 80007ce:	5c9b      	ldrb	r3, [r3, r2]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff63 	bl	800069c <requires_shift>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <CALLBACK_HID_Device_CreateHIDReport+0x6c>
 80007dc:	2202      	movs	r2, #2
 80007de:	e000      	b.n	80007e2 <CALLBACK_HID_Device_CreateHIDReport+0x6e>
 80007e0:	2200      	movs	r2, #0
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	701a      	strb	r2, [r3, #0]
                report->Modifier = requires_alt_gr(password[password_index]) ? HID_KEYBOARD_MODIFIER_RIGHTALT : report->Modifier;
 80007e6:	4b82      	ldr	r3, [pc, #520]	; (80009f0 <CALLBACK_HID_Device_CreateHIDReport+0x27c>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b82      	ldr	r3, [pc, #520]	; (80009f8 <CALLBACK_HID_Device_CreateHIDReport+0x284>)
 80007ee:	5c9b      	ldrb	r3, [r3, r2]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff77 	bl	80006e4 <requires_alt_gr>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d102      	bne.n	8000802 <CALLBACK_HID_Device_CreateHIDReport+0x8e>
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	e000      	b.n	8000804 <CALLBACK_HID_Device_CreateHIDReport+0x90>
 8000802:	2240      	movs	r2, #64	; 0x40
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	701a      	strb	r2, [r3, #0]
                report->KeyCode[0] = translate_char(password[password_index]);
 8000808:	4b79      	ldr	r3, [pc, #484]	; (80009f0 <CALLBACK_HID_Device_CreateHIDReport+0x27c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	4b7a      	ldr	r3, [pc, #488]	; (80009f8 <CALLBACK_HID_Device_CreateHIDReport+0x284>)
 8000810:	5c9b      	ldrb	r3, [r3, r2]
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fdbe 	bl	8000394 <translate_char>
 8000818:	4603      	mov	r3, r0
 800081a:	461a      	mov	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	709a      	strb	r2, [r3, #2]
                password_index++;
 8000820:	4b73      	ldr	r3, [pc, #460]	; (80009f0 <CALLBACK_HID_Device_CreateHIDReport+0x27c>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b71      	ldr	r3, [pc, #452]	; (80009f0 <CALLBACK_HID_Device_CreateHIDReport+0x27c>)
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	e072      	b.n	8000914 <CALLBACK_HID_Device_CreateHIDReport+0x1a0>
            }
            // Then send the current test character
            else if (!guessed && test_index < strlen(pwchars))
 800082e:	4b73      	ldr	r3, [pc, #460]	; (80009fc <CALLBACK_HID_Device_CreateHIDReport+0x288>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d134      	bne.n	80008a0 <CALLBACK_HID_Device_CreateHIDReport+0x12c>
 8000836:	4b72      	ldr	r3, [pc, #456]	; (8000a00 <CALLBACK_HID_Device_CreateHIDReport+0x28c>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b53      	cmp	r3, #83	; 0x53
 800083c:	d830      	bhi.n	80008a0 <CALLBACK_HID_Device_CreateHIDReport+0x12c>
            {
                report->Modifier = requires_shift(pwchars[test_index]) ? HID_KEYBOARD_MODIFIER_LEFTSHIFT : 0;
 800083e:	4b70      	ldr	r3, [pc, #448]	; (8000a00 <CALLBACK_HID_Device_CreateHIDReport+0x28c>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	461a      	mov	r2, r3
 8000844:	4b6f      	ldr	r3, [pc, #444]	; (8000a04 <CALLBACK_HID_Device_CreateHIDReport+0x290>)
 8000846:	5c9b      	ldrb	r3, [r3, r2]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff27 	bl	800069c <requires_shift>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <CALLBACK_HID_Device_CreateHIDReport+0xe4>
 8000854:	2202      	movs	r2, #2
 8000856:	e000      	b.n	800085a <CALLBACK_HID_Device_CreateHIDReport+0xe6>
 8000858:	2200      	movs	r2, #0
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	701a      	strb	r2, [r3, #0]
                report->Modifier = requires_alt_gr(pwchars[test_index]) ? HID_KEYBOARD_MODIFIER_RIGHTALT : report->Modifier;
 800085e:	4b68      	ldr	r3, [pc, #416]	; (8000a00 <CALLBACK_HID_Device_CreateHIDReport+0x28c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	461a      	mov	r2, r3
 8000864:	4b67      	ldr	r3, [pc, #412]	; (8000a04 <CALLBACK_HID_Device_CreateHIDReport+0x290>)
 8000866:	5c9b      	ldrb	r3, [r3, r2]
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff3b 	bl	80006e4 <requires_alt_gr>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <CALLBACK_HID_Device_CreateHIDReport+0x106>
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	781a      	ldrb	r2, [r3, #0]
 8000878:	e000      	b.n	800087c <CALLBACK_HID_Device_CreateHIDReport+0x108>
 800087a:	2240      	movs	r2, #64	; 0x40
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	701a      	strb	r2, [r3, #0]
                report->KeyCode[0] = translate_char(pwchars[test_index]);
 8000880:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <CALLBACK_HID_Device_CreateHIDReport+0x28c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b5f      	ldr	r3, [pc, #380]	; (8000a04 <CALLBACK_HID_Device_CreateHIDReport+0x290>)
 8000888:	5c9b      	ldrb	r3, [r3, r2]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fd82 	bl	8000394 <translate_char>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	709a      	strb	r2, [r3, #2]
                
                guessed = 1;
 8000898:	4b58      	ldr	r3, [pc, #352]	; (80009fc <CALLBACK_HID_Device_CreateHIDReport+0x288>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	e039      	b.n	8000914 <CALLBACK_HID_Device_CreateHIDReport+0x1a0>
            }
            // Finally, send enter to test the password
            else{

                for (uint32_t i = 0; i < 3000000; ++i)
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
 80008a4:	e002      	b.n	80008ac <CALLBACK_HID_Device_CreateHIDReport+0x138>
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3301      	adds	r3, #1
 80008aa:	61fb      	str	r3, [r7, #28]
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	4a56      	ldr	r2, [pc, #344]	; (8000a08 <CALLBACK_HID_Device_CreateHIDReport+0x294>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d9f8      	bls.n	80008a6 <CALLBACK_HID_Device_CreateHIDReport+0x132>
                    ;
                report->Modifier = 0; 
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
			    report->Reserved = 0; 
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	2200      	movs	r2, #0
 80008be:	705a      	strb	r2, [r3, #1]
                report->KeyCode[0] = GERMAN_KEYBOARD_SC_ENTER;
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	2228      	movs	r2, #40	; 0x28
 80008c4:	709a      	strb	r2, [r3, #2]
                guessed = 0;
 80008c6:	4b4d      	ldr	r3, [pc, #308]	; (80009fc <CALLBACK_HID_Device_CreateHIDReport+0x288>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
                start_time_meas = tick_counter;
 80008cc:	4b4f      	ldr	r3, [pc, #316]	; (8000a0c <CALLBACK_HID_Device_CreateHIDReport+0x298>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a4f      	ldr	r2, [pc, #316]	; (8000a10 <CALLBACK_HID_Device_CreateHIDReport+0x29c>)
 80008d2:	6013      	str	r3, [r2, #0]
                password_index = 0;
 80008d4:	4b46      	ldr	r3, [pc, #280]	; (80009f0 <CALLBACK_HID_Device_CreateHIDReport+0x27c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
                test_index++;
 80008da:	4b49      	ldr	r3, [pc, #292]	; (8000a00 <CALLBACK_HID_Device_CreateHIDReport+0x28c>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	3301      	adds	r3, #1
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b47      	ldr	r3, [pc, #284]	; (8000a00 <CALLBACK_HID_Device_CreateHIDReport+0x28c>)
 80008e4:	701a      	strb	r2, [r3, #0]
                if(test_index >= strlen(pwchars)){
 80008e6:	4b46      	ldr	r3, [pc, #280]	; (8000a00 <CALLBACK_HID_Device_CreateHIDReport+0x28c>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b53      	cmp	r3, #83	; 0x53
 80008ec:	d912      	bls.n	8000914 <CALLBACK_HID_Device_CreateHIDReport+0x1a0>
                    // wird an der richtigen Stelle erreicht
                    
                    test_index = 0;
 80008ee:	4b44      	ldr	r3, [pc, #272]	; (8000a00 <CALLBACK_HID_Device_CreateHIDReport+0x28c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
                    password[password_tail] = best_char;
 80008f4:	4b3f      	ldr	r3, [pc, #252]	; (80009f4 <CALLBACK_HID_Device_CreateHIDReport+0x280>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b46      	ldr	r3, [pc, #280]	; (8000a14 <CALLBACK_HID_Device_CreateHIDReport+0x2a0>)
 80008fc:	7819      	ldrb	r1, [r3, #0]
 80008fe:	4b3e      	ldr	r3, [pc, #248]	; (80009f8 <CALLBACK_HID_Device_CreateHIDReport+0x284>)
 8000900:	5499      	strb	r1, [r3, r2]
                    password_tail++;
 8000902:	4b3c      	ldr	r3, [pc, #240]	; (80009f4 <CALLBACK_HID_Device_CreateHIDReport+0x280>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	3301      	adds	r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b3a      	ldr	r3, [pc, #232]	; (80009f4 <CALLBACK_HID_Device_CreateHIDReport+0x280>)
 800090c:	701a      	strb	r2, [r3, #0]
                    best_time = 0;
 800090e:	4b42      	ldr	r3, [pc, #264]	; (8000a18 <CALLBACK_HID_Device_CreateHIDReport+0x2a4>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
                }
                
            }
            //XMC_GPIO_SetOutputHigh(LED1);
            characterSent = 1;
 8000914:	4b35      	ldr	r3, [pc, #212]	; (80009ec <CALLBACK_HID_Device_CreateHIDReport+0x278>)
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]
 800091a:	e0a2      	b.n	8000a62 <CALLBACK_HID_Device_CreateHIDReport+0x2ee>
    }
    else //send hack file
    {


        if(i < strlen(hack)) {
 800091c:	4b3f      	ldr	r3, [pc, #252]	; (8000a1c <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b27      	cmp	r3, #39	; 0x27
 8000922:	d842      	bhi.n	80009aa <CALLBACK_HID_Device_CreateHIDReport+0x236>
		if(characterSent2) {
 8000924:	4b3e      	ldr	r3, [pc, #248]	; (8000a20 <CALLBACK_HID_Device_CreateHIDReport+0x2ac>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d011      	beq.n	8000950 <CALLBACK_HID_Device_CreateHIDReport+0x1dc>
			report->Modifier = 0; 
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
			report->Reserved = 0; 
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	2200      	movs	r2, #0
 8000936:	705a      	strb	r2, [r3, #1]
			report->KeyCode[0] = 0; 
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	2200      	movs	r2, #0
 800093c:	709a      	strb	r2, [r3, #2]
			characterSent2 = 0;
 800093e:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <CALLBACK_HID_Device_CreateHIDReport+0x2ac>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
			++i; 
 8000944:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	4a34      	ldr	r2, [pc, #208]	; (8000a1c <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	e02c      	b.n	80009aa <CALLBACK_HID_Device_CreateHIDReport+0x236>
		} else {
			report->Modifier = requires_shift(hack[i]) ? HID_KEYBOARD_MODIFIER_LEFTSHIFT : 0;
 8000950:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a33      	ldr	r2, [pc, #204]	; (8000a24 <CALLBACK_HID_Device_CreateHIDReport+0x2b0>)
 8000956:	5cd3      	ldrb	r3, [r2, r3]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe9f 	bl	800069c <requires_shift>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <CALLBACK_HID_Device_CreateHIDReport+0x1f4>
 8000964:	2202      	movs	r2, #2
 8000966:	e000      	b.n	800096a <CALLBACK_HID_Device_CreateHIDReport+0x1f6>
 8000968:	2200      	movs	r2, #0
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	701a      	strb	r2, [r3, #0]
            report->Modifier = requires_alt_gr(hack[i]) ? HID_KEYBOARD_MODIFIER_RIGHTALT : report->Modifier;
 800096e:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a2c      	ldr	r2, [pc, #176]	; (8000a24 <CALLBACK_HID_Device_CreateHIDReport+0x2b0>)
 8000974:	5cd3      	ldrb	r3, [r2, r3]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff feb4 	bl	80006e4 <requires_alt_gr>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d102      	bne.n	8000988 <CALLBACK_HID_Device_CreateHIDReport+0x214>
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	e000      	b.n	800098a <CALLBACK_HID_Device_CreateHIDReport+0x216>
 8000988:	2240      	movs	r2, #64	; 0x40
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	701a      	strb	r2, [r3, #0]
            report->KeyCode[0] = translate_char(hack[i]); 
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <CALLBACK_HID_Device_CreateHIDReport+0x2a8>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a24      	ldr	r2, [pc, #144]	; (8000a24 <CALLBACK_HID_Device_CreateHIDReport+0x2b0>)
 8000994:	5cd3      	ldrb	r3, [r2, r3]
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fcfc 	bl	8000394 <translate_char>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	709a      	strb	r2, [r3, #2]
			characterSent2 = 1;
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <CALLBACK_HID_Device_CreateHIDReport+0x2ac>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	701a      	strb	r2, [r3, #0]
		}
	}


        for(int i = 0; i < strlen(hack); i++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
 80009ae:	e04c      	b.n	8000a4a <CALLBACK_HID_Device_CreateHIDReport+0x2d6>
        {
            report->Modifier = requires_shift(hack[i]) ? HID_KEYBOARD_MODIFIER_LEFTSHIFT : 0;
 80009b0:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <CALLBACK_HID_Device_CreateHIDReport+0x2b0>)
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	4413      	add	r3, r2
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fe6f 	bl	800069c <requires_shift>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <CALLBACK_HID_Device_CreateHIDReport+0x254>
 80009c4:	2202      	movs	r2, #2
 80009c6:	e000      	b.n	80009ca <CALLBACK_HID_Device_CreateHIDReport+0x256>
 80009c8:	2200      	movs	r2, #0
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	701a      	strb	r2, [r3, #0]
            report->Modifier = requires_alt_gr(hack[i]) ? HID_KEYBOARD_MODIFIER_RIGHTALT : report->Modifier;
 80009ce:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <CALLBACK_HID_Device_CreateHIDReport+0x2b0>)
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	4413      	add	r3, r2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fe84 	bl	80006e4 <requires_alt_gr>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d122      	bne.n	8000a28 <CALLBACK_HID_Device_CreateHIDReport+0x2b4>
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	781a      	ldrb	r2, [r3, #0]
 80009e6:	e020      	b.n	8000a2a <CALLBACK_HID_Device_CreateHIDReport+0x2b6>
 80009e8:	20000485 	.word	0x20000485
 80009ec:	20000482 	.word	0x20000482
 80009f0:	20000481 	.word	0x20000481
 80009f4:	20000467 	.word	0x20000467
 80009f8:	2000046c 	.word	0x2000046c
 80009fc:	20000465 	.word	0x20000465
 8000a00:	20000464 	.word	0x20000464
 8000a04:	08006c5c 	.word	0x08006c5c
 8000a08:	002dc6bf 	.word	0x002dc6bf
 8000a0c:	2000048c 	.word	0x2000048c
 8000a10:	20000458 	.word	0x20000458
 8000a14:	20000466 	.word	0x20000466
 8000a18:	20000468 	.word	0x20000468
 8000a1c:	20000488 	.word	0x20000488
 8000a20:	20000484 	.word	0x20000484
 8000a24:	08006cb4 	.word	0x08006cb4
 8000a28:	2240      	movs	r2, #64	; 0x40
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	701a      	strb	r2, [r3, #0]
            report->KeyCode[0] = translate_char(hack[i]);
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <CALLBACK_HID_Device_CreateHIDReport+0x2f8>)
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	4413      	add	r3, r2
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fcac 	bl	8000394 <translate_char>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	709a      	strb	r2, [r3, #2]
        for(int i = 0; i < strlen(hack); i++)
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	3301      	adds	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	2b27      	cmp	r3, #39	; 0x27
 8000a4e:	d9af      	bls.n	80009b0 <CALLBACK_HID_Device_CreateHIDReport+0x23c>
        }
         report->Modifier = 0; 
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
			    report->Reserved = 0; 
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	705a      	strb	r2, [r3, #1]
                report->KeyCode[0] = GERMAN_KEYBOARD_SC_ENTER;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	2228      	movs	r2, #40	; 0x28
 8000a60:	709a      	strb	r2, [r3, #2]
    }

    return true;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	08006cb4 	.word	0x08006cb4

08000a70 <CALLBACK_HID_Device_ProcessHIDReport>:
    USB_ClassInfo_HID_Device_t *const HIDInterfaceInfo,
    const uint8_t ReportID,
    const uint8_t ReportType,
    const void *ReportData,
    const uint16_t ReportSize)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	72fb      	strb	r3, [r7, #11]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	72bb      	strb	r3, [r7, #10]
    uint8_t *report = (uint8_t *)ReportData;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	617b      	str	r3, [r7, #20]

    if (*report & HID_KEYBOARD_LED_NUMLOCK)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d02e      	beq.n	8000af0 <CALLBACK_HID_Device_ProcessHIDReport+0x80>
    {
        //XMC_GPIO_SetOutputHigh(LED1);
        //if (characterSent)
        //{
            end_time_meas = tick_counter;
 8000a92:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <CALLBACK_HID_Device_ProcessHIDReport+0xb4>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a24      	ldr	r2, [pc, #144]	; (8000b28 <CALLBACK_HID_Device_ProcessHIDReport+0xb8>)
 8000a98:	6013      	str	r3, [r2, #0]
            
            // Handle potential overflow of tick_counter
            if (end_time_meas >= start_time_meas)
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <CALLBACK_HID_Device_ProcessHIDReport+0xb8>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <CALLBACK_HID_Device_ProcessHIDReport+0xbc>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d307      	bcc.n	8000ab6 <CALLBACK_HID_Device_ProcessHIDReport+0x46>
            {
                // Normal case: no overflow occurred
                elapsed_time = end_time_meas - start_time_meas;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <CALLBACK_HID_Device_ProcessHIDReport+0xb8>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <CALLBACK_HID_Device_ProcessHIDReport+0xbc>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <CALLBACK_HID_Device_ProcessHIDReport+0xc0>)
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	e006      	b.n	8000ac4 <CALLBACK_HID_Device_ProcessHIDReport+0x54>
            }
            else
            {
                // Overflow case: tick_counter wrapped around
                elapsed_time = (UINT32_MAX - start_time_meas) + end_time_meas + 1;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <CALLBACK_HID_Device_ProcessHIDReport+0xb8>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <CALLBACK_HID_Device_ProcessHIDReport+0xbc>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <CALLBACK_HID_Device_ProcessHIDReport+0xc0>)
 8000ac2:	6013      	str	r3, [r2, #0]
            }
            
            if (elapsed_time > best_time)
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <CALLBACK_HID_Device_ProcessHIDReport+0xc0>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <CALLBACK_HID_Device_ProcessHIDReport+0xc4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d913      	bls.n	8000af8 <CALLBACK_HID_Device_ProcessHIDReport+0x88>
            {
                XMC_GPIO_SetOutputHigh(LED1);
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4819      	ldr	r0, [pc, #100]	; (8000b38 <CALLBACK_HID_Device_ProcessHIDReport+0xc8>)
 8000ad4:	f7ff fc3a 	bl	800034c <XMC_GPIO_SetOutputHigh>
                best_time = elapsed_time;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <CALLBACK_HID_Device_ProcessHIDReport+0xc0>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <CALLBACK_HID_Device_ProcessHIDReport+0xc4>)
 8000ade:	6013      	str	r3, [r2, #0]
                best_char = pwchars[test_index - 1]; // Use test_index - 1 since test_index was already incremented
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <CALLBACK_HID_Device_ProcessHIDReport+0xcc>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <CALLBACK_HID_Device_ProcessHIDReport+0xd0>)
 8000ae8:	5cd2      	ldrb	r2, [r2, r3]
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <CALLBACK_HID_Device_ProcessHIDReport+0xd4>)
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	e003      	b.n	8000af8 <CALLBACK_HID_Device_ProcessHIDReport+0x88>
        //}
 
    }
    else
    {
        XMC_GPIO_SetOutputLow(LED1);
 8000af0:	2101      	movs	r1, #1
 8000af2:	4811      	ldr	r0, [pc, #68]	; (8000b38 <CALLBACK_HID_Device_ProcessHIDReport+0xc8>)
 8000af4:	f7ff fc3b 	bl	800036e <XMC_GPIO_SetOutputLow>
    }

    if (*report & HID_KEYBOARD_LED_CAPSLOCK)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d007      	beq.n	8000b14 <CALLBACK_HID_Device_ProcessHIDReport+0xa4>
    {
        XMC_GPIO_SetOutputHigh(LED2);
 8000b04:	2100      	movs	r1, #0
 8000b06:	480c      	ldr	r0, [pc, #48]	; (8000b38 <CALLBACK_HID_Device_ProcessHIDReport+0xc8>)
 8000b08:	f7ff fc20 	bl	800034c <XMC_GPIO_SetOutputHigh>
        password_correct_flag = 1;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <CALLBACK_HID_Device_ProcessHIDReport+0xd8>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        XMC_GPIO_SetOutputLow(LED2);
    }
}
 8000b12:	e003      	b.n	8000b1c <CALLBACK_HID_Device_ProcessHIDReport+0xac>
        XMC_GPIO_SetOutputLow(LED2);
 8000b14:	2100      	movs	r1, #0
 8000b16:	4808      	ldr	r0, [pc, #32]	; (8000b38 <CALLBACK_HID_Device_ProcessHIDReport+0xc8>)
 8000b18:	f7ff fc29 	bl	800036e <XMC_GPIO_SetOutputLow>
}
 8000b1c:	bf00      	nop
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2000048c 	.word	0x2000048c
 8000b28:	2000045c 	.word	0x2000045c
 8000b2c:	20000458 	.word	0x20000458
 8000b30:	20000460 	.word	0x20000460
 8000b34:	20000468 	.word	0x20000468
 8000b38:	48028100 	.word	0x48028100
 8000b3c:	20000464 	.word	0x20000464
 8000b40:	08006c5c 	.word	0x08006c5c
 8000b44:	20000466 	.word	0x20000466
 8000b48:	20000485 	.word	0x20000485

08000b4c <SystemCoreClockSetup>:

void SystemCoreClockSetup(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    /* Setup settings for USB clock */
    XMC_SCU_CLOCK_Init(&clock_config);
 8000b50:	480a      	ldr	r0, [pc, #40]	; (8000b7c <SystemCoreClockSetup+0x30>)
 8000b52:	f000 fc57 	bl	8001404 <XMC_SCU_CLOCK_Init>

    XMC_SCU_CLOCK_EnableUsbPll();
 8000b56:	f001 f91b 	bl	8001d90 <XMC_SCU_CLOCK_EnableUsbPll>
    XMC_SCU_CLOCK_StartUsbPll(2, 64);
 8000b5a:	2140      	movs	r1, #64	; 0x40
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f001 f93b 	bl	8001dd8 <XMC_SCU_CLOCK_StartUsbPll>
    XMC_SCU_CLOCK_SetUsbClockDivider(4);
 8000b62:	2004      	movs	r0, #4
 8000b64:	f001 f852 	bl	8001c0c <XMC_SCU_CLOCK_SetUsbClockDivider>
    XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f000 ff57 	bl	8001a1c <XMC_SCU_CLOCK_SetUsbClockSource>
    XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_USB);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f001 f8a6 	bl	8001cc0 <XMC_SCU_CLOCK_EnableClock>

    SystemCoreClockUpdate();
 8000b74:	f005 fe08 	bl	8006788 <SystemCoreClockUpdate>
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	08006c48 	.word	0x08006c48

08000b80 <SysTick_Handler>:

// SysTick interrupt handler for timing
void SysTick_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
    tick_counter++;
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SysTick_Handler+0x18>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	4a03      	ldr	r2, [pc, #12]	; (8000b98 <SysTick_Handler+0x18>)
 8000b8c:	6013      	str	r3, [r2, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	2000048c 	.word	0x2000048c

08000b9c <__NVIC_GetPriorityGrouping>:
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	; (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_ClearPendingIRQ>:
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0c      	blt.n	8000c20 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4907      	ldr	r1, [pc, #28]	; (8000c2c <__NVIC_ClearPendingIRQ+0x38>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	3360      	adds	r3, #96	; 0x60
 8000c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0092      	lsls	r2, r2, #2
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	bf28      	it	cs
 8000ca2:	2306      	movcs	r3, #6
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3306      	adds	r3, #6
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <USB0_0_IRQHandler>:
	.usbd_transfer_mode = XMC_USBD_USE_FIFO,
	.cb_xmc_device_event = USBD_SignalDeviceEventHandler,
	.cb_endpoint_event = USBD_SignalEndpointEvent_Handler
};

void USB0_0_IRQHandler(void) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	XMC_USBD_IRQHandler(&USB_runtime);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <USB0_0_IRQHandler+0x10>)
 8000cf2:	f004 fb21 	bl	8005338 <XMC_USBD_IRQHandler>
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000018 	.word	0x20000018

08000d00 <USB_Init>:

/*The function initializes the USB core layer and register call backs. */
void USB_Init(void) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	USBD_Initialize(&USB_runtime);
 8000d04:	480e      	ldr	r0, [pc, #56]	; (8000d40 <USB_Init+0x40>)
 8000d06:	f003 fc15 	bl	8004534 <USBD_Initialize>

	/* Interrupts configuration*/
	NVIC_SetPriority( USB0_0_IRQn,
 8000d0a:	f7ff ff47 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2200      	movs	r2, #0
 8000d12:	213f      	movs	r1, #63	; 0x3f
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ffb5 	bl	8000c84 <NVIC_EncodePriority>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	206b      	movs	r0, #107	; 0x6b
 8000d20:	f7ff ff86 	bl	8000c30 <__NVIC_SetPriority>
					  NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63, 0) );
	NVIC_ClearPendingIRQ(USB0_0_IRQn);
 8000d24:	206b      	movs	r0, #107	; 0x6b
 8000d26:	f7ff ff65 	bl	8000bf4 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(USB0_0_IRQn);
 8000d2a:	206b      	movs	r0, #107	; 0x6b
 8000d2c:	f7ff ff44 	bl	8000bb8 <__NVIC_EnableIRQ>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				device.Driver->DeviceConnect();
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <USB_Init+0x44>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	4798      	blx	r3
			}
 8000d38:	bf00      	nop

	/* USB Connection*/
	USB_Attach();
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000018 	.word	0x20000018
 8000d44:	20000524 	.word	0x20000524

08000d48 <EVENT_USB_Device_>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_(void) {
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <EVENT_USB_Device_Connect>:
/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void) {
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
	//Device is ready!
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <EVENT_USB_Device_Reset>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Reset(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	if(device.IsConfigured) {
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <EVENT_USB_Device_Reset+0x2c>)
 8000d6a:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d008      	beq.n	8000d8a <EVENT_USB_Device_Reset+0x26>
		USB_Init();
 8000d78:	f7ff ffc2 	bl	8000d00 <USB_Init>
		device.IsConfigured=0;
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <EVENT_USB_Device_Reset+0x2c>)
 8000d7e:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000d82:	f36f 0300 	bfc	r3, #0, #1
 8000d86:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000524 	.word	0x20000524

08000d94 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
	bool ConfigSuccess = true;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	71fb      	strb	r3, [r7, #7]

	USBD_SetEndpointBuffer(KEYBOARD_IN_EPADDR, buffer, KEYBOARD_REPORT_SIZE);
 8000d9e:	2208      	movs	r2, #8
 8000da0:	490d      	ldr	r1, [pc, #52]	; (8000dd8 <EVENT_USB_Device_ConfigurationChanged+0x44>)
 8000da2:	2081      	movs	r0, #129	; 0x81
 8000da4:	f003 fc3c 	bl	8004620 <USBD_SetEndpointBuffer>

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <EVENT_USB_Device_ConfigurationChanged+0x48>)
 8000daa:	f001 ff91 	bl	8002cd0 <HID_Device_ConfigureEndpoints>
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	bf14      	ite	ne
 8000dba:	2301      	movne	r3, #1
 8000dbc:	2300      	moveq	r3, #0
 8000dbe:	71fb      	strb	r3, [r7, #7]

	device.IsConfigured = ConfigSuccess;
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <EVENT_USB_Device_ConfigurationChanged+0x4c>)
 8000dc2:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8000dc6:	79f9      	ldrb	r1, [r7, #7]
 8000dc8:	f361 0300 	bfi	r3, r1, #0, #1
 8000dcc:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000498 	.word	0x20000498
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000524 	.word	0x20000524

08000de4 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <EVENT_USB_Device_ControlRequest+0x10>)
 8000dea:	f001 fd7b 	bl	80028e4 <HID_Device_ProcessControlRequest>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000000 	.word	0x20000000

08000df8 <CALLBACK_HIDParser_FilterHIDReportItem>:

bool CALLBACK_HIDParser_FilterHIDReportItem(
									HID_ReportItem_t* const CurrentItem ) {
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	return true;
 8000e00:	2301      	movs	r3, #1
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <CALLBACK_USB_GetDescriptor>:
  *  the control endpoint, this function is called so that the descriptor details
  *  can be passed back and the appropriate descriptor sent back to the USB host.
  **/
uint16_t CALLBACK_USB_GetDescriptor( const uint16_t wValue,
									 const uint8_t wIndex,
									 const void** const DescriptorAddress ) {
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	603a      	str	r2, [r7, #0]
 8000e1a:	80fb      	strh	r3, [r7, #6]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	717b      	strb	r3, [r7, #5]
	const uint8_t  DescriptorType   = (wValue >> 8);
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	727b      	strb	r3, [r7, #9]
	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	723b      	strb	r3, [r7, #8]

	const void* Address = NULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
	uint16_t    Size    = NO_DESCRIPTOR;
 8000e30:	2300      	movs	r3, #0
 8000e32:	817b      	strh	r3, [r7, #10]

	switch (DescriptorType) {
 8000e34:	7a7b      	ldrb	r3, [r7, #9]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	2b21      	cmp	r3, #33	; 0x21
 8000e3a:	d876      	bhi.n	8000f2a <CALLBACK_USB_GetDescriptor+0x11a>
 8000e3c:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <CALLBACK_USB_GetDescriptor+0x34>)
 8000e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e42:	bf00      	nop
 8000e44:	08000ecd 	.word	0x08000ecd
 8000e48:	08000ed7 	.word	0x08000ed7
 8000e4c:	08000ee1 	.word	0x08000ee1
 8000e50:	08000f2b 	.word	0x08000f2b
 8000e54:	08000f2b 	.word	0x08000f2b
 8000e58:	08000f2b 	.word	0x08000f2b
 8000e5c:	08000f2b 	.word	0x08000f2b
 8000e60:	08000f2b 	.word	0x08000f2b
 8000e64:	08000f2b 	.word	0x08000f2b
 8000e68:	08000f2b 	.word	0x08000f2b
 8000e6c:	08000f2b 	.word	0x08000f2b
 8000e70:	08000f2b 	.word	0x08000f2b
 8000e74:	08000f2b 	.word	0x08000f2b
 8000e78:	08000f2b 	.word	0x08000f2b
 8000e7c:	08000f2b 	.word	0x08000f2b
 8000e80:	08000f2b 	.word	0x08000f2b
 8000e84:	08000f2b 	.word	0x08000f2b
 8000e88:	08000f2b 	.word	0x08000f2b
 8000e8c:	08000f2b 	.word	0x08000f2b
 8000e90:	08000f2b 	.word	0x08000f2b
 8000e94:	08000f2b 	.word	0x08000f2b
 8000e98:	08000f2b 	.word	0x08000f2b
 8000e9c:	08000f2b 	.word	0x08000f2b
 8000ea0:	08000f2b 	.word	0x08000f2b
 8000ea4:	08000f2b 	.word	0x08000f2b
 8000ea8:	08000f2b 	.word	0x08000f2b
 8000eac:	08000f2b 	.word	0x08000f2b
 8000eb0:	08000f2b 	.word	0x08000f2b
 8000eb4:	08000f2b 	.word	0x08000f2b
 8000eb8:	08000f2b 	.word	0x08000f2b
 8000ebc:	08000f2b 	.word	0x08000f2b
 8000ec0:	08000f2b 	.word	0x08000f2b
 8000ec4:	08000f15 	.word	0x08000f15
 8000ec8:	08000f1f 	.word	0x08000f1f
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <CALLBACK_USB_GetDescriptor+0x130>)
 8000ece:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_Descriptor_Device_t);
 8000ed0:	2312      	movs	r3, #18
 8000ed2:	817b      	strh	r3, [r7, #10]
			break;
 8000ed4:	e029      	b.n	8000f2a <CALLBACK_USB_GetDescriptor+0x11a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <CALLBACK_USB_GetDescriptor+0x134>)
 8000ed8:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_Descriptor_Configuration_t);
 8000eda:	2322      	movs	r3, #34	; 0x22
 8000edc:	817b      	strh	r3, [r7, #10]
			break;
 8000ede:	e024      	b.n	8000f2a <CALLBACK_USB_GetDescriptor+0x11a>
		case DTYPE_String:
			switch (DescriptorNumber) {
 8000ee0:	7a3b      	ldrb	r3, [r7, #8]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d010      	beq.n	8000f08 <CALLBACK_USB_GetDescriptor+0xf8>
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	dc1e      	bgt.n	8000f28 <CALLBACK_USB_GetDescriptor+0x118>
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d002      	beq.n	8000ef4 <CALLBACK_USB_GetDescriptor+0xe4>
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d005      	beq.n	8000efe <CALLBACK_USB_GetDescriptor+0xee>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = ProductString.Header.Size;
					break;
			}
			break;
 8000ef2:	e019      	b.n	8000f28 <CALLBACK_USB_GetDescriptor+0x118>
					Address = &LanguageString;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <CALLBACK_USB_GetDescriptor+0x138>)
 8000ef6:	60fb      	str	r3, [r7, #12]
					Size    = LanguageString.Header.Size;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	817b      	strh	r3, [r7, #10]
					break;
 8000efc:	e009      	b.n	8000f12 <CALLBACK_USB_GetDescriptor+0x102>
					Address = &ManufacturerString;
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <CALLBACK_USB_GetDescriptor+0x13c>)
 8000f00:	60fb      	str	r3, [r7, #12]
					Size    = ManufacturerString.Header.Size;
 8000f02:	2350      	movs	r3, #80	; 0x50
 8000f04:	817b      	strh	r3, [r7, #10]
					break;
 8000f06:	e004      	b.n	8000f12 <CALLBACK_USB_GetDescriptor+0x102>
					Address = &ProductString;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <CALLBACK_USB_GetDescriptor+0x140>)
 8000f0a:	60fb      	str	r3, [r7, #12]
					Size    = ProductString.Header.Size;
 8000f0c:	2348      	movs	r3, #72	; 0x48
 8000f0e:	817b      	strh	r3, [r7, #10]
					break;
 8000f10:	bf00      	nop
			break;
 8000f12:	e009      	b.n	8000f28 <CALLBACK_USB_GetDescriptor+0x118>
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <CALLBACK_USB_GetDescriptor+0x144>)
 8000f16:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 8000f18:	2309      	movs	r3, #9
 8000f1a:	817b      	strh	r3, [r7, #10]
			break;
 8000f1c:	e005      	b.n	8000f2a <CALLBACK_USB_GetDescriptor+0x11a>
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <CALLBACK_USB_GetDescriptor+0x148>)
 8000f20:	60fb      	str	r3, [r7, #12]
			Size    = sizeof(KeyboardReport);
 8000f22:	233f      	movs	r3, #63	; 0x3f
 8000f24:	817b      	strh	r3, [r7, #10]
			break;
 8000f26:	e000      	b.n	8000f2a <CALLBACK_USB_GetDescriptor+0x11a>
			break;
 8000f28:	bf00      	nop
	}

	*DescriptorAddress = Address;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	601a      	str	r2, [r3, #0]
	return Size;
 8000f30:	897b      	ldrh	r3, [r7, #10]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	08006d3c 	.word	0x08006d3c
 8000f44:	08006d50 	.word	0x08006d50
 8000f48:	08006d74 	.word	0x08006d74
 8000f4c:	08006d7c 	.word	0x08006d7c
 8000f50:	08006dd0 	.word	0x08006dd0
 8000f54:	08006d62 	.word	0x08006d62
 8000f58:	08006cfc 	.word	0x08006cfc

08000f5c <XMC_SCU_CLOCK_GetUsbClockSource>:
 * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <XMC_SCU_CLOCK_GetUsbClockSource+0x18>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	50004600 	.word	0x50004600

08000f78 <XMC_SCU_CLOCK_GetWdtClockSource>:
 * the clock source selected.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <XMC_SCU_CLOCK_GetWdtClockSource+0x18>)
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	50004600 	.word	0x50004600

08000f94 <XMC_SCU_CLOCK_GetExternalOutputClockSource>:
 * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <XMC_SCU_CLOCK_GetExternalOutputClockSource+0x1c>)
 8000f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	b2db      	uxtb	r3, r3
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	50004600 	.word	0x50004600

08000fb4 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	2000ffc0 	.word	0x2000ffc0
 8000fd8:	50004600 	.word	0x50004600

08000fdc <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	2000ffc0 	.word	0x2000ffc0

08000ff4 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <XMC_SCU_GetMirrorStatus+0x14>)
 8000ffa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	50004000 	.word	0x50004000

0800100c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8001014:	f005 fbb8 	bl	8006788 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <XMC_SCU_lDelay+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <XMC_SCU_lDelay+0x44>)
 800101e:	fba2 2303 	umull	r2, r3, r2, r3
 8001022:	0c9a      	lsrs	r2, r3, #18
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	fb02 f303 	mul.w	r3, r2, r3
 800102a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e003      	b.n	800103a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8001032:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	429a      	cmp	r2, r3
 8001040:	d3f7      	bcc.n	8001032 <XMC_SCU_lDelay+0x26>
  }
}
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000ffc0 	.word	0x2000ffc0
 8001050:	431bde83 	.word	0x431bde83

08001054 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	4904      	ldr	r1, [pc, #16]	; (8001074 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4313      	orrs	r3, r2
 8001066:	608b      	str	r3, [r1, #8]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	50004074 	.word	0x50004074

08001078 <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	43db      	mvns	r3, r3
 8001088:	4904      	ldr	r1, [pc, #16]	; (800109c <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 800108a:	4013      	ands	r3, r2
 800108c:	608b      	str	r3, [r1, #8]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	50004074 	.word	0x50004074

080010a0 <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	4904      	ldr	r1, [pc, #16]	; (80010c0 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	610b      	str	r3, [r1, #16]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	50004074 	.word	0x50004074

080010c4 <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 80010ca:	685b      	ldr	r3, [r3, #4]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	50004074 	.word	0x50004074

080010dc <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <XMC_SCU_INTERRUPT_ClearEventStatus+0x1c>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60d3      	str	r3, [r2, #12]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	50004074 	.word	0x50004074

080010fc <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <XMC_SCU_GetBootMode+0x18>)
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	50004000 	.word	0x50004000

08001118 <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <XMC_SCU_SetBootMode+0x1c>)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	6113      	str	r3, [r2, #16]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	50004000 	.word	0x50004000

08001138 <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  return (SCU_GENERAL->GPR[index]);
 8001140:	4a05      	ldr	r2, [pc, #20]	; (8001158 <XMC_SCU_ReadGPR+0x20>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	330a      	adds	r3, #10
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	685b      	ldr	r3, [r3, #4]
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	50004000 	.word	0x50004000

0800115c <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->GPR[index] = data;
 8001166:	4a06      	ldr	r2, [pc, #24]	; (8001180 <XMC_SCU_WriteGPR+0x24>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	330a      	adds	r3, #10
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	605a      	str	r2, [r3, #4]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	50004000 	.word	0x50004000

08001184 <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3328      	adds	r3, #40	; 0x28
 8001194:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001198:	2101      	movs	r1, #1
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	4905      	ldr	r1, [pc, #20]	; (80011b8 <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3328      	adds	r3, #40	; 0x28
 80011a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	50004000 	.word	0x50004000

080011bc <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3328      	adds	r3, #40	; 0x28
 80011cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011d0:	2101      	movs	r1, #1
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	4906      	ldr	r1, [pc, #24]	; (80011f4 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 80011dc:	401a      	ands	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3328      	adds	r3, #40	; 0x28
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	50004000 	.word	0x50004000

080011f8 <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	011a      	lsls	r2, r3, #4
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	02db      	lsls	r3, r3, #11
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 800120a:	4313      	orrs	r3, r2
 800120c:	4a05      	ldr	r2, [pc, #20]	; (8001224 <XMC_SCU_CalibrateTemperatureSensor+0x2c>)
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 800120e:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8001212:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	50004000 	.word	0x50004000

08001228 <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <XMC_SCU_EnableTemperatureSensor+0x20>)
 800122e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <XMC_SCU_EnableTemperatureSensor+0x20>)
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	50004000 	.word	0x50004000

0800124c <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <XMC_SCU_DisableTemperatureSensor+0x20>)
 8001252:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <XMC_SCU_DisableTemperatureSensor+0x20>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	50004000 	.word	0x50004000

08001270 <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <XMC_SCU_IsTemperatureSensorEnabled+0x24>)
 8001276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	bf0c      	ite	eq
 8001282:	2301      	moveq	r3, #1
 8001284:	2300      	movne	r3, #0
 8001286:	b2db      	uxtb	r3, r3
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	50004000 	.word	0x50004000

08001298 <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <XMC_SCU_IsTemperatureSensorReady+0x24>)
 800129e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bf14      	ite	ne
 80012aa:	2301      	movne	r3, #1
 80012ac:	2300      	moveq	r3, #0
 80012ae:	b2db      	uxtb	r3, r3
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	50004000 	.word	0x50004000

080012c0 <XMC_SCU_StartTemperatureMeasurement>:
/* API to start device temperature measurements */
XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	71fb      	strb	r3, [r7, #7]

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 80012ca:	f7ff ffd1 	bl	8001270 <XMC_SCU_IsTemperatureSensorEnabled>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f083 0301 	eor.w	r3, r3, #1
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <XMC_SCU_StartTemperatureMeasurement+0x1e>
  {
    status = XMC_SCU_STATUS_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	71fb      	strb	r3, [r7, #7]
  }
   
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 80012de:	f000 f831 	bl	8001344 <XMC_SCU_IsTemperatureSensorBusy>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <XMC_SCU_StartTemperatureMeasurement+0x2c>
  {
    status = XMC_SCU_STATUS_BUSY;
 80012e8:	2302      	movs	r3, #2
 80012ea:	71fb      	strb	r3, [r7, #7]
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 80012ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <XMC_SCU_StartTemperatureMeasurement+0x48>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  return (status);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	50004000 	.word	0x50004000

0800130c <XMC_SCU_GetTemperatureMeasurement>:

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8001312:	f7ff ffad 	bl	8001270 <XMC_SCU_IsTemperatureSensorEnabled>
 8001316:	4603      	mov	r3, r0
 8001318:	f083 0301 	eor.w	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <XMC_SCU_GetTemperatureMeasurement+0x1e>
  {
    temperature = 0x7FFFFFFFUL;
 8001322:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	e005      	b.n	8001336 <XMC_SCU_GetTemperatureMeasurement+0x2a>
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 800132a:	4b05      	ldr	r3, [pc, #20]	; (8001340 <XMC_SCU_GetTemperatureMeasurement+0x34>)
 800132c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001334:	607b      	str	r3, [r7, #4]
  }
  
  return ((uint32_t)temperature);
 8001336:	687b      	ldr	r3, [r7, #4]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	50004000 	.word	0x50004000

08001344 <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <XMC_SCU_IsTemperatureSensorBusy+0x24>)
 800134a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800134e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001352:	2b00      	cmp	r3, #0
 8001354:	bf14      	ite	ne
 8001356:	2301      	movne	r3, #1
 8001358:	2300      	moveq	r3, #0
 800135a:	b2db      	uxtb	r3, r3
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	50004000 	.word	0x50004000

0800136c <XMC_SCU_WriteToRetentionMemory>:
}
#endif  

/* API to write into Retention memory in hibernate domain */
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	041b      	lsls	r3, r3, #16
 800137a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800137e:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 8001388:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <XMC_SCU_WriteToRetentionMemory+0x4c>)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8001390:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <XMC_SCU_WriteToRetentionMemory+0x4c>)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8001398:	bf00      	nop
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <XMC_SCU_WriteToRetentionMemory+0x4c>)
 800139c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80013a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1f8      	bne.n	800139a <XMC_SCU_WriteToRetentionMemory+0x2e>
  {
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	50004000 	.word	0x50004000

080013bc <XMC_SCU_ReadFromRetentionMemory>:

/* API to read from Retention memory in hibernate domain */
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	041b      	lsls	r3, r3, #16
 80013c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013cc:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f023 0301 	bic.w	r3, r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 80013de:	bf00      	nop
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 80013e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80013e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f8      	bne.n	80013e0 <XMC_SCU_ReadFromRetentionMemory+0x24>
  {
  }

  return (SCU_GENERAL->RMDATA);
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 80013f0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	50004000 	.word	0x50004000

08001404 <XMC_SCU_CLOCK_Init>:

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b085      	sub	sp, #20
 8001408:	af02      	add	r7, sp, #8
 800140a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800140c:	2000      	movs	r0, #0
 800140e:	f000 faf1 	bl	80019f4 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8001412:	f000 fd7f 	bl	8001f14 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	79db      	ldrb	r3, [r3, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00a      	beq.n	8001434 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800141e:	f000 ff77 	bl	8002310 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8001422:	bf00      	nop
 8001424:	f000 ff62 	bl	80022ec <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8001428:	4603      	mov	r3, r0
 800142a:	f083 0301 	eor.w	r3, r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f7      	bne.n	8001424 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7a5b      	ldrb	r3, [r3, #9]
 8001438:	4618      	mov	r0, r3
 800143a:	f000 fb6f 	bl	8001b1c <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 800143e:	bf00      	nop
 8001440:	f7ff fdd8 	bl	8000ff4 <XMC_SCU_GetMirrorStatus>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1fa      	bne.n	8001440 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7a1b      	ldrb	r3, [r3, #8]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fd0c 	bl	8001e6c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7c1b      	ldrb	r3, [r3, #16]
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fb7f 	bl	8001b5c <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7c5b      	ldrb	r3, [r3, #17]
 8001462:	4618      	mov	r0, r3
 8001464:	f000 fba6 	bl	8001bb4 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	7c9b      	ldrb	r3, [r3, #18]
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fb8b 	bl	8001b88 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7cdb      	ldrb	r3, [r3, #19]
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fbb2 	bl	8001be0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	799b      	ldrb	r3, [r3, #6]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00a      	beq.n	800149a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8001484:	f000 ffd8 	bl	8002438 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8001488:	bf00      	nop
 800148a:	f000 fffd 	bl	8002488 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800148e:	4603      	mov	r3, r0
 8001490:	f083 0301 	eor.w	r3, r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f7      	bne.n	800148a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	78db      	ldrb	r3, [r3, #3]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d102      	bne.n	80014a8 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80014a2:	f001 f855 	bl	8002550 <XMC_SCU_CLOCK_DisableSystemPll>
 80014a6:	e011      	b.n	80014cc <XMC_SCU_CLOCK_Init+0xc8>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80014a8:	f001 f840 	bl	800252c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	8898      	ldrh	r0, [r3, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	78d9      	ldrb	r1, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	785b      	ldrb	r3, [r3, #1]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80014b8:	461a      	mov	r2, r3
                                 (uint32_t)config->syspll_config.n_div,
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	781b      	ldrb	r3, [r3, #0]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80014be:	461c      	mov	r4, r3
                                 (uint32_t)config->syspll_config.k_div);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	789b      	ldrb	r3, [r3, #2]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	4623      	mov	r3, r4
 80014c8:	f001 f854 	bl	8002574 <XMC_SCU_CLOCK_StartSystemPll>
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d4:	d103      	bne.n	80014de <XMC_SCU_CLOCK_Init+0xda>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 80014d6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80014da:	f000 fa8b 	bl	80019f4 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 80014de:	f005 f953 	bl	8006788 <SystemCoreClockUpdate>
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}
	...

080014ec <XMC_SCU_TRAP_Enable>:

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <XMC_SCU_TRAP_Enable+0x24>)
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	4904      	ldr	r1, [pc, #16]	; (8001510 <XMC_SCU_TRAP_Enable+0x24>)
 80014fe:	4013      	ands	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	50004160 	.word	0x50004160

08001514 <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <XMC_SCU_TRAP_Disable+0x20>)
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	4904      	ldr	r1, [pc, #16]	; (8001534 <XMC_SCU_TRAP_Disable+0x20>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4313      	orrs	r3, r2
 8001526:	608b      	str	r3, [r1, #8]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	50004160 	.word	0x50004160

08001538 <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return (SCU_TRAP->TRAPRAW);
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <XMC_SCU_TRAP_GetStatus+0x14>)
 800153e:	685b      	ldr	r3, [r3, #4]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	50004160 	.word	0x50004160

08001550 <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <XMC_SCU_TRAP_Trigger+0x1c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6113      	str	r3, [r2, #16]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	50004160 	.word	0x50004160

08001570 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <XMC_SCU_TRAP_ClearStatus+0x1c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60d3      	str	r3, [r2, #12]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	50004160 	.word	0x50004160

08001590 <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <XMC_SCU_PARITY_ClearStatus+0x20>)
 800159a:	695a      	ldr	r2, [r3, #20]
 800159c:	4904      	ldr	r1, [pc, #16]	; (80015b0 <XMC_SCU_PARITY_ClearStatus+0x20>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	614b      	str	r3, [r1, #20]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	5000413c 	.word	0x5000413c

080015b4 <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return (SCU_PARITY->PEFLAG);
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <XMC_SCU_PARITY_GetStatus+0x14>)
 80015ba:	695b      	ldr	r3, [r3, #20]
} 
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	5000413c 	.word	0x5000413c

080015cc <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <XMC_SCU_PARITY_Enable+0x20>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4904      	ldr	r1, [pc, #16]	; (80015ec <XMC_SCU_PARITY_Enable+0x20>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	5000413c 	.word	0x5000413c

080015f0 <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <XMC_SCU_PARITY_Disable+0x24>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	43db      	mvns	r3, r3
 8001600:	4904      	ldr	r1, [pc, #16]	; (8001614 <XMC_SCU_PARITY_Disable+0x24>)
 8001602:	4013      	ands	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	5000413c 	.word	0x5000413c

08001618 <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE |= (uint32_t)memory; 
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	4904      	ldr	r1, [pc, #16]	; (8001638 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4313      	orrs	r3, r2
 800162a:	608b      	str	r3, [r1, #8]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	5000413c 	.word	0x5000413c

0800163c <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	43db      	mvns	r3, r3
 800164c:	4904      	ldr	r1, [pc, #16]	; (8001660 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 800164e:	4013      	ands	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	5000413c 	.word	0x5000413c

08001664 <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 800166e:	695a      	ldr	r2, [r3, #20]
 8001670:	4904      	ldr	r1, [pc, #16]	; (8001684 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4313      	orrs	r3, r2
 8001676:	614b      	str	r3, [r1, #20]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	50004074 	.word	0x50004074

08001688 <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8001692:	695a      	ldr	r2, [r3, #20]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	43db      	mvns	r3, r3
 8001698:	4904      	ldr	r1, [pc, #16]	; (80016ac <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 800169a:	4013      	ands	r3, r2
 800169c:	614b      	str	r3, [r1, #20]
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	50004074 	.word	0x50004074

080016b0 <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	0f1b      	lsrs	r3, r3, #28
 80016bc:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80016c4:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <XMC_SCU_RESET_AssertPeripheralReset+0x38>)
 80016d4:	4413      	add	r3, r2
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	601a      	str	r2, [r3, #0]
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	50004410 	.word	0x50004410

080016ec <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	0f1b      	lsrs	r3, r3, #28
 80016f8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001700:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	461a      	mov	r2, r3
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8001710:	4413      	add	r3, r2
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	601a      	str	r2, [r3, #0]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	50004414 	.word	0x50004414

08001728 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	0f1b      	lsrs	r3, r3, #28
 8001734:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800173c:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	461a      	mov	r2, r3
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 800174c:	4413      	add	r3, r2
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf14      	ite	ne
 8001758:	2301      	movne	r3, #1
 800175a:	2300      	moveq	r3, #0
 800175c:	b2db      	uxtb	r3, r3
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	5000440c 	.word	0x5000440c

08001770 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:

/*
 * API to retrieve frequency of System PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t p_div;
  uint32_t n_div;
  uint32_t k2_div;

  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 8001776:	f000 f839 	bl	80017ec <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
 800177a:	60f8      	str	r0, [r7, #12]
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d009      	beq.n	800179c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x2c>
  {
    /* Prescalar mode - fOSC is the parent*/
    clock_frequency = (uint32_t)(clock_frequency / 
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001790:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	fbb2 f3f3 	udiv	r3, r2, r3
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	e01f      	b.n	80017dc <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x6c>
  }
  else
  {
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	0e1b      	lsrs	r3, r3, #24
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3301      	adds	r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017b4:	3301      	adds	r3, #1
 80017b6:	607b      	str	r3, [r7, #4]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	0c1b      	lsrs	r3, r3, #16
 80017be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017c2:	3301      	adds	r3, #1
 80017c4:	603b      	str	r3, [r7, #0]
       
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	fb03 f202 	mul.w	r2, r3, r2
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	6839      	ldr	r1, [r7, #0]
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	60fb      	str	r3, [r7, #12]
  }

  return (clock_frequency);
 80017dc:	68fb      	ldr	r3, [r7, #12]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	50004710 	.word	0x50004710

080017ec <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x28>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d103      	bne.n	8001806 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1a>
  {
    clock_frequency = OSCHP_GetFrequency();
 80017fe:	f005 f82d 	bl	800685c <OSCHP_GetFrequency>
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	e001      	b.n	800180a <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1e>
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x2c>)
 8001808:	607b      	str	r3, [r7, #4]
  }
  
  return (clock_frequency);
 800180a:	687b      	ldr	r3, [r7, #4]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	50004710 	.word	0x50004710
 8001818:	016e3600 	.word	0x016e3600

0800181c <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 8001822:	f005 f81b 	bl	800685c <OSCHP_GetFrequency>
 8001826:	60f8      	str	r0, [r7, #12]
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d116      	bne.n	8001862 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x46>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800183e:	3301      	adds	r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	0e1b      	lsrs	r3, r3, #24
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	3301      	adds	r3, #1
 800184e:	607b      	str	r3, [r7, #4]
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	fb03 f202 	mul.w	r2, r3, r2
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001860:	60fb      	str	r3, [r7, #12]
  }
  return (clock_frequency);
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	50004710 	.word	0x50004710

08001870 <XMC_SCU_CLOCK_GetCcuClockFrequency>:

/*
 * API to retrieve frequency of CCU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 800187a:	f7ff fb9b 	bl	8000fb4 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 800187e:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <XMC_SCU_CLOCK_GetCcuClockFrequency+0x28>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	50004600 	.word	0x50004600

0800189c <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 80018a6:	f7ff fb59 	bl	8000f5c <XMC_SCU_CLOCK_GetUsbClockSource>
 80018aa:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b2:	d103      	bne.n	80018bc <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80018b4:	f7ff ff5c 	bl	8001770 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	e005      	b.n	80018c8 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d102      	bne.n	80018c8 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 80018c2:	f7ff ffab 	bl	800181c <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 80018c6:	6078      	str	r0, [r7, #4]
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x44>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 80018d0:	3301      	adds	r3, #1
  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	50004600 	.word	0x50004600

080018e4 <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 80018ea:	f7ff ff41 	bl	8001770 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 80018ee:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <XMC_SCU_CLOCK_GetEbuClockFrequency+0x24>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 80018f8:	3301      	adds	r3, #1
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	50004600 	.word	0x50004600

0800190c <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 8001916:	f7ff fb2f 	bl	8000f78 <XMC_SCU_CLOCK_GetWdtClockSource>
 800191a:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001922:	d103      	bne.n	800192c <XMC_SCU_CLOCK_GetWdtClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001924:	f7ff ff24 	bl	8001770 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	e00c      	b.n	8001946 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d102      	bne.n	8001938 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = OFI_FREQUENCY;
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <XMC_SCU_CLOCK_GetWdtClockFrequency+0x50>)
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	e006      	b.n	8001946 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193e:	d102      	bne.n	8001946 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  {
    frequency = OSI_FREQUENCY;
 8001940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001944:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x54>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 800194c:	3301      	adds	r3, #1
  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	016e3600 	.word	0x016e3600
 8001960:	50004600 	.word	0x50004600

08001964 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 800196e:	f7ff fb11 	bl	8000f94 <XMC_SCU_CLOCK_GetExternalOutputClockSource>
 8001972:	4603      	mov	r3, r0
 8001974:	70fb      	strb	r3, [r7, #3]

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d10d      	bne.n	8001998 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x34>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 800197c:	f7ff fef8 	bl	8001770 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001980:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	0c1b      	lsrs	r3, r3, #16
 8001988:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 800198c:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	fbb2 f3f3 	udiv	r3, r2, r3
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	e016      	b.n	80019c6 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d103      	bne.n	80019a6 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x42>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 800199e:	f7ff fb09 	bl	8000fb4 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	e00f      	b.n	80019c6 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d10c      	bne.n	80019c6 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 80019ac:	f7ff ff36 	bl	800181c <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 80019b0:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b6:	0c1b      	lsrs	r3, r3, #16
 80019b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 80019bc:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c4:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (frequency);
 80019c6:	687b      	ldr	r3, [r7, #4]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	50004600 	.word	0x50004600

080019d4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80019d8:	f7ff fb00 	bl	8000fdc <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80019dc:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80019e6:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	50004600 	.word	0x50004600

080019f4 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001a04:	4904      	ldr	r1, [pc, #16]	; (8001a18 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	50004600 	.word	0x50004600

08001a1c <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001a2c:	4904      	ldr	r1, [pc, #16]	; (8001a40 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	50004600 	.word	0x50004600

08001a44 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a54:	4904      	ldr	r1, [pc, #16]	; (8001a68 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	50004600 	.word	0x50004600

08001a6c <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	f023 0203 	bic.w	r2, r3, #3
                      ((uint32_t)source);
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8001a80:	4904      	ldr	r1, [pc, #16]	; (8001a94 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	50004600 	.word	0x50004600

08001a98 <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d108      	bne.n	8001aba <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001aae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
}
 8001ab8:	e007      	b.n	8001aca <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8001aba:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	60d3      	str	r3, [r2, #12]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	50004710 	.word	0x50004710

08001adc <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001ae6:	bf00      	nop
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8001aea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f8      	bne.n	8001ae8 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8001afe:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8001b00:	4905      	ldr	r1, [pc, #20]	; (8001b18 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	60cb      	str	r3, [r1, #12]
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	50004000 	.word	0x50004000
 8001b18:	50004300 	.word	0x50004300

08001b1c <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001b26:	bf00      	nop
 8001b28:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8001b2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f8      	bne.n	8001b28 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8001b40:	4905      	ldr	r1, [pc, #20]	; (8001b58 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	60cb      	str	r3, [r1, #12]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	50004000 	.word	0x50004000
 8001b58:	50004300 	.word	0x50004300

08001b5c <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001b70:	4904      	ldr	r1, [pc, #16]	; (8001b84 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60cb      	str	r3, [r1, #12]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	50004600 	.word	0x50004600

08001b88 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8001b9c:	4904      	ldr	r1, [pc, #16]	; (8001bb0 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	620b      	str	r3, [r1, #32]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	50004600 	.word	0x50004600

08001bb4 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8001bc8:	4904      	ldr	r1, [pc, #16]	; (8001bdc <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	610b      	str	r3, [r1, #16]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	50004600 	.word	0x50004600

08001be0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8001bf4:	4904      	ldr	r1, [pc, #16]	; (8001c08 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	614b      	str	r3, [r1, #20]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	50004600 	.word	0x50004600

08001c0c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8001c20:	4904      	ldr	r1, [pc, #16]	; (8001c34 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	618b      	str	r3, [r1, #24]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	50004600 	.word	0x50004600

08001c38 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8001c4c:	4904      	ldr	r1, [pc, #16]	; (8001c60 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61cb      	str	r3, [r1, #28]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	50004600 	.word	0x50004600

08001c64 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8001c78:	4904      	ldr	r1, [pc, #16]	; (8001c8c <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	50004600 	.word	0x50004600

08001c90 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:

/* API to program the divider placed between fext and its parent */
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	3a01      	subs	r2, #1
 8001ca8:	0412      	lsls	r2, r2, #16
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8001caa:	4904      	ldr	r1, [pc, #16]	; (8001cbc <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	50004600 	.word	0x50004600

08001cc0 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	6053      	str	r3, [r2, #4]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	50004600 	.word	0x50004600

08001ce0 <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 8001cea:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <XMC_SCU_CLOCK_DisableClock+0x1c>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	6093      	str	r3, [r2, #8]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	50004600 	.word	0x50004600

08001d00 <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <XMC_SCU_CLOCK_IsClockEnabled+0x28>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	bf14      	ite	ne
 8001d16:	2301      	movne	r3, #1
 8001d18:	2300      	moveq	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	50004600 	.word	0x50004600

08001d2c <XMC_SCU_POWER_GetEVR13Voltage>:
  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <XMC_SCU_POWER_GetEVR13Voltage+0x28>)
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d3e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001d58 <XMC_SCU_POWER_GetEVR13Voltage+0x2c>
 8001d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d46:	ee17 3a90 	vmov	r3, s15
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	50004200 	.word	0x50004200
 8001d58:	3bbe0ded 	.word	0x3bbe0ded

08001d5c <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <XMC_SCU_POWER_GetEVR33Voltage+0x2c>)
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	ee07 3a90 	vmov	s15, r3
 8001d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d70:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001d8c <XMC_SCU_POWER_GetEVR33Voltage+0x30>
 8001d74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d78:	ee17 3a90 	vmov	r3, s15
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	50004200 	.word	0x50004200
 8001d8c:	3cb851ec 	.word	0x3cb851ec

08001d90 <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 8001d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9e:	f023 0302 	bic.w	r3, r3, #2
 8001da2:	6153      	str	r3, [r2, #20]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	50004710 	.word	0x50004710

08001db4 <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8001dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc2:	f043 0302 	orr.w	r3, r3, #2
 8001dc6:	6153      	str	r3, [r2, #20]
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	50004710 	.word	0x50004710

08001dd8 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	4a16      	ldr	r2, [pc, #88]	; (8001e4c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001df4:	f043 0310 	orr.w	r3, r3, #16
 8001df8:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	061b      	lsls	r3, r3, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8001e06:	4911      	ldr	r1, [pc, #68]	; (8001e4c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	614b      	str	r3, [r1, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e16:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001e1e:	f023 0310 	bic.w	r3, r3, #16
 8001e22:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001e2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e2e:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8001e30:	bf00      	nop
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f9      	beq.n	8001e32 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	50004710 	.word	0x50004710

08001e50 <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <XMC_SCU_CLOCK_StopUsbPll+0x14>)
 8001e56:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <XMC_SCU_CLOCK_StopUsbPll+0x18>)
 8001e58:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	50004710 	.word	0x50004710
 8001e68:	00010003 	.word	0x00010003

08001e6c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001e7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e80:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d10e      	bne.n	8001ea6 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001e8e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001e92:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8001e94:	2064      	movs	r0, #100	; 0x64
 8001e96:	f7ff f8b9 	bl	800100c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8001ea0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ea4:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8001ea6:	2064      	movs	r0, #100	; 0x64
 8001ea8:	f7ff f8b0 	bl	800100c <XMC_SCU_lDelay>
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	50004710 	.word	0x50004710

08001eb8 <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <XMC_SCU_POWER_EnableUsb+0x18>)
 8001ebe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ec2:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	50004200 	.word	0x50004200

08001ed4 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <XMC_SCU_POWER_DisableUsb+0x18>)
 8001eda:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ede:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	50004200 	.word	0x50004200

08001ef0 <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <XMC_SCU_CLOCK_IsUsbPllLocked+0x20>)
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	50004710 	.word	0x50004710

08001f14 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8001f2a:	bf00      	nop
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f9      	beq.n	8001f2c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00a      	beq.n	8001f5a <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f4a:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8001f4c:	bf00      	nop
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f9      	bne.n	8001f4e <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	50004200 	.word	0x50004200
 8001f68:	50004400 	.word	0x50004400

08001f6c <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <XMC_SCU_HIB_DisableHibernateDomain+0x1c>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <XMC_SCU_HIB_DisableHibernateDomain+0x20>)
 8001f78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f7c:	605a      	str	r2, [r3, #4]
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	50004200 	.word	0x50004200
 8001f8c:	50004400 	.word	0x50004400

08001f90 <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	b2db      	uxtb	r3, r3
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	50004200 	.word	0x50004200
 8001fc8:	50004400 	.word	0x50004400

08001fcc <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8001fd0:	bf00      	nop
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <XMC_SCU_HIB_EnableInternalSlowClock+0x2c>)
 8001fd4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f8      	bne.n	8001fd2 <XMC_SCU_HIB_EnableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	6153      	str	r3, [r2, #20]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	50004000 	.word	0x50004000
 8001ffc:	50004300 	.word	0x50004300

08002000 <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8002004:	bf00      	nop
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <XMC_SCU_HIB_DisableInternalSlowClock+0x2c>)
 8002008:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f8      	bne.n	8002006 <XMC_SCU_HIB_DisableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	4a05      	ldr	r2, [pc, #20]	; (8002030 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6153      	str	r3, [r2, #20]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	50004000 	.word	0x50004000
 8002030:	50004300 	.word	0x50004300

08002034 <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 800203c:	bf00      	nop
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <XMC_SCU_HIB_ClearEventStatus+0x2c>)
 8002040:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f8      	bne.n	800203e <XMC_SCU_HIB_ClearEventStatus+0xa>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 800204c:	4a05      	ldr	r2, [pc, #20]	; (8002064 <XMC_SCU_HIB_ClearEventStatus+0x30>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6053      	str	r3, [r2, #4]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	50004000 	.word	0x50004000
 8002064:	50004300 	.word	0x50004300

08002068 <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8002070:	bf00      	nop
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <XMC_SCU_HIB_TriggerEvent+0x2c>)
 8002074:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f8      	bne.n	8002072 <XMC_SCU_HIB_TriggerEvent+0xa>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 8002080:	4a05      	ldr	r2, [pc, #20]	; (8002098 <XMC_SCU_HIB_TriggerEvent+0x30>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6093      	str	r3, [r2, #8]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	50004000 	.word	0x50004000
 8002098:	50004300 	.word	0x50004300

0800209c <XMC_SCU_HIB_EnableEvent>:

void XMC_SCU_HIB_EnableEvent(int32_t event)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80020a4:	bf00      	nop
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <XMC_SCU_HIB_EnableEvent+0x30>)
 80020a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f8      	bne.n	80020a6 <XMC_SCU_HIB_EnableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <XMC_SCU_HIB_EnableEvent+0x34>)
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4905      	ldr	r1, [pc, #20]	; (80020d0 <XMC_SCU_HIB_EnableEvent+0x34>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	60cb      	str	r3, [r1, #12]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	50004000 	.word	0x50004000
 80020d0:	50004300 	.word	0x50004300

080020d4 <XMC_SCU_HIB_DisableEvent>:

void XMC_SCU_HIB_DisableEvent(int32_t event)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80020dc:	bf00      	nop
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <XMC_SCU_HIB_DisableEvent+0x34>)
 80020e0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f8      	bne.n	80020de <XMC_SCU_HIB_DisableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <XMC_SCU_HIB_DisableEvent+0x38>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	43d2      	mvns	r2, r2
 80020f4:	4611      	mov	r1, r2
 80020f6:	4a05      	ldr	r2, [pc, #20]	; (800210c <XMC_SCU_HIB_DisableEvent+0x38>)
 80020f8:	400b      	ands	r3, r1
 80020fa:	60d3      	str	r3, [r2, #12]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	50004000 	.word	0x50004000
 800210c:	50004300 	.word	0x50004300

08002110 <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002114:	bf00      	nop
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <XMC_SCU_HIB_EnterHibernateState+0x2c>)
 8002118:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f8      	bne.n	8002116 <XMC_SCU_HIB_EnterHibernateState+0x6>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a05      	ldr	r2, [pc, #20]	; (8002140 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 800212a:	f043 0310 	orr.w	r3, r3, #16
 800212e:	60d3      	str	r3, [r2, #12]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	50004000 	.word	0x50004000
 8002140:	50004300 	.word	0x50004300

08002144 <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <XMC_SCU_HIB_EnterHibernateStateEx+0x14>
  {
    XMC_SCU_HIB_EnterHibernateState();
 8002154:	f7ff ffdc 	bl	8002110 <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800216a:	bf00      	nop
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 800216e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f8      	bne.n	800216c <XMC_SCU_HIB_SetWakeupTriggerInput+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d106      	bne.n	800218e <XMC_SCU_HIB_SetWakeupTriggerInput+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a09      	ldr	r2, [pc, #36]	; (80021ac <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8002186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
  }
}
 800218c:	e005      	b.n	800219a <XMC_SCU_HIB_SetWakeupTriggerInput+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 800218e:	4b07      	ldr	r3, [pc, #28]	; (80021ac <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	4a06      	ldr	r2, [pc, #24]	; (80021ac <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8002194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002198:	60d3      	str	r3, [r2, #12]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	50004000 	.word	0x50004000
 80021ac:	50004300 	.word	0x50004300

080021b0 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	6039      	str	r1, [r7, #0]
 80021ba:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80021bc:	bf00      	nop
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <XMC_SCU_HIB_SetPinMode+0x4c>)
 80021c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f8      	bne.n	80021be <XMC_SCU_HIB_SetPinMode+0xe>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <XMC_SCU_HIB_SetPinMode+0x50>)
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	401a      	ands	r2, r3
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	6839      	ldr	r1, [r7, #0]
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 80021ea:	4905      	ldr	r1, [pc, #20]	; (8002200 <XMC_SCU_HIB_SetPinMode+0x50>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60cb      	str	r3, [r1, #12]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	50004000 	.word	0x50004000
 8002200:	50004300 	.word	0x50004300

08002204 <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	460a      	mov	r2, r1
 800220e:	71fb      	strb	r3, [r7, #7]
 8002210:	4613      	mov	r3, r2
 8002212:	80bb      	strh	r3, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002214:	bf00      	nop
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 8002218:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f8      	bne.n	8002216 <XMC_SCU_HIB_SetPinOutputLevel+0x12>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	4013      	ands	r3, r2
                        (level << pin);
 8002236:	88b9      	ldrh	r1, [r7, #4]
 8002238:	79fa      	ldrb	r2, [r7, #7]
 800223a:	fa01 f202 	lsl.w	r2, r1, r2
 800223e:	4611      	mov	r1, r2
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8002240:	4a05      	ldr	r2, [pc, #20]	; (8002258 <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8002242:	430b      	orrs	r3, r1
 8002244:	60d3      	str	r3, [r2, #12]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	50004000 	.word	0x50004000
 8002258:	50004300 	.word	0x50004300

0800225c <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002266:	bf00      	nop
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <XMC_SCU_HIB_SetInput0+0x48>)
 800226a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f8      	bne.n	8002268 <XMC_SCU_HIB_SetInput0+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d106      	bne.n	800228a <XMC_SCU_HIB_SetInput0+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <XMC_SCU_HIB_SetInput0+0x4c>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <XMC_SCU_HIB_SetInput0+0x4c>)
 8002282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002286:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
  }
}
 8002288:	e005      	b.n	8002296 <XMC_SCU_HIB_SetInput0+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 800228a:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <XMC_SCU_HIB_SetInput0+0x4c>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <XMC_SCU_HIB_SetInput0+0x4c>)
 8002290:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002294:	60d3      	str	r3, [r2, #12]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	50004000 	.word	0x50004000
 80022a8:	50004300 	.word	0x50004300

080022ac <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	80fb      	strh	r3, [r7, #6]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80022b6:	bf00      	nop
 80022b8:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <XMC_SCU_HIB_SetSR0Input+0x38>)
 80022ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f8      	bne.n	80022b8 <XMC_SCU_HIB_SetSR0Input+0xc>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 80022c6:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	4905      	ldr	r1, [pc, #20]	; (80022e8 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60cb      	str	r3, [r1, #12]
#endif  
                        input;
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	50004000 	.word	0x50004000
 80022e8:	50004300 	.word	0x50004300

080022ec <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf0c      	ite	eq
 80022fc:	2301      	moveq	r3, #1
 80022fe:	2300      	movne	r3, #0
 8002300:	b2db      	uxtb	r3, r3
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	50004300 	.word	0x50004300

08002310 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002314:	bf00      	nop
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8002318:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800231c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f8      	bne.n	8002316 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	4a13      	ldr	r2, [pc, #76]	; (8002378 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 800232a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800232e:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002330:	bf00      	nop
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8002334:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f8      	bne.n	8002332 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a0c      	ldr	r2, [pc, #48]	; (8002378 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8002346:	f043 0308 	orr.w	r3, r3, #8
 800234a:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 800234c:	bf00      	nop
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8002350:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f8      	bne.n	800234e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 800235e:	2208      	movs	r2, #8
 8002360:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8002362:	bf00      	nop
 8002364:	f7fe fe46 	bl	8000ff4 <XMC_SCU_GetMirrorStatus>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1fa      	bne.n	8002364 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 800236e:	bf00      	nop
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}
 8002374:	50004000 	.word	0x50004000
 8002378:	50004300 	.word	0x50004300

0800237c <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002380:	bf00      	nop
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2c>)
 8002384:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f8      	bne.n	8002382 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	4a05      	ldr	r2, [pc, #20]	; (80023ac <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8002396:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800239a:	61d3      	str	r3, [r2, #28]
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	50004000 	.word	0x50004000
 80023ac:	50004300 	.word	0x50004300

080023b0 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80023b4:	bf00      	nop
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 80023b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80023bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f8      	bne.n	80023b6 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 80023ca:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 80023ce:	61d3      	str	r3, [r2, #28]
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	50004000 	.word	0x50004000
 80023e0:	50004300 	.word	0x50004300

080023e4 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80023e8:	bf00      	nop
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x30>)
 80023ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80023f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f8      	bne.n	80023ea <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 8002400:	4a05      	ldr	r2, [pc, #20]	; (8002418 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 8002402:	f043 0320 	orr.w	r3, r3, #32
 8002406:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	50004000 	.word	0x50004000
 8002418:	50004300 	.word	0x50004300

0800241c <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0x18>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0301 	and.w	r3, r3, #1
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	50004300 	.word	0x50004300

08002438 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8002438:	b598      	push	{r3, r4, r7, lr}
 800243a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a0e      	ldr	r2, [pc, #56]	; (800247c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002446:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002448:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8002450:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8002454:	f004 fa02 	bl	800685c <OSCHP_GetFrequency>
 8002458:	4603      	mov	r3, r0
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	0d1b      	lsrs	r3, r3, #20
 8002462:	3b01      	subs	r3, #1
 8002464:	041b      	lsls	r3, r3, #16
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002466:	4a06      	ldr	r2, [pc, #24]	; (8002480 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8002468:	4323      	orrs	r3, r4
 800246a:	6053      	str	r3, [r2, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4a02      	ldr	r2, [pc, #8]	; (800247c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002472:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002476:	6053      	str	r3, [r2, #4]
}
 8002478:	bf00      	nop
 800247a:	bd98      	pop	{r3, r4, r7, pc}
 800247c:	50004710 	.word	0x50004710
 8002480:	50004700 	.word	0x50004700
 8002484:	6b5fca6b 	.word	0x6b5fca6b

08002488 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002494:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002498:	bf0c      	ite	eq
 800249a:	2301      	moveq	r3, #1
 800249c:	2300      	movne	r3, #0
 800249e:	b2db      	uxtb	r3, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	50004710 	.word	0x50004710

080024b0 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 80024ba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80024be:	6053      	str	r3, [r2, #4]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	50004700 	.word	0x50004700

080024d0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a04      	ldr	r2, [pc, #16]	; (80024ec <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6053      	str	r3, [r2, #4]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	50004700 	.word	0x50004700

080024f0 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	6053      	str	r3, [r2, #4]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	50004700 	.word	0x50004700

08002510 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0x18>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0301 	and.w	r3, r3, #1
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	50004700 	.word	0x50004700

0800252c <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a05      	ldr	r2, [pc, #20]	; (800254c <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 8002536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253a:	f023 0302 	bic.w	r3, r3, #2
 800253e:	6053      	str	r3, [r2, #4]
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	50004710 	.word	0x50004710

08002550 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4a05      	ldr	r2, [pc, #20]	; (8002570 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 800255a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	6053      	str	r3, [r2, #4]
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	50004710 	.word	0x50004710

08002574 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60ba      	str	r2, [r7, #8]
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	4603      	mov	r3, r0
 8002580:	81fb      	strh	r3, [r7, #14]
 8002582:	460b      	mov	r3, r1
 8002584:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8002586:	89fb      	ldrh	r3, [r7, #14]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff fa85 	bl	8001a98 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 800258e:	7b7b      	ldrb	r3, [r7, #13]
 8002590:	2b01      	cmp	r3, #1
 8002592:	f040 8084 	bne.w	800269e <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8002596:	89fb      	ldrh	r3, [r7, #14]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d109      	bne.n	80025b0 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 800259c:	f004 f95e 	bl	800685c <OSCHP_GetFrequency>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4a4c      	ldr	r2, [pc, #304]	; (80026d4 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 80025a4:	fba2 2303 	umull	r2, r3, r2, r3
 80025a8:	0c9b      	lsrs	r3, r3, #18
 80025aa:	059b      	lsls	r3, r3, #22
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e002      	b.n	80025b6 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 80025b0:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80025b4:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	fb03 f202 	mul.w	r2, r3, r2
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	4a43      	ldr	r2, [pc, #268]	; (80026d8 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	0d9b      	lsrs	r3, r3, #22
 80025d2:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 80025d4:	4b41      	ldr	r3, [pc, #260]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a40      	ldr	r2, [pc, #256]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 80025e0:	4b3e      	ldr	r3, [pc, #248]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a3d      	ldr	r2, [pc, #244]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80025e6:	f043 0310 	orr.w	r3, r3, #16
 80025ea:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80025ec:	4b3b      	ldr	r3, [pc, #236]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 80025f2:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	3a01      	subs	r2, #1
 80025f8:	0212      	lsls	r2, r2, #8
 80025fa:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	3b01      	subs	r3, #1
 8002600:	041b      	lsls	r3, r3, #16
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002602:	431a      	orrs	r2, r3
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	3b01      	subs	r3, #1
 8002608:	061b      	lsls	r3, r3, #24
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800260a:	4934      	ldr	r1, [pc, #208]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800260c:	4313      	orrs	r3, r2
 800260e:	608b      	str	r3, [r1, #8]

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002610:	4b32      	ldr	r3, [pc, #200]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a31      	ldr	r2, [pc, #196]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800261a:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 800261c:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4a2e      	ldr	r2, [pc, #184]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002622:	f023 0310 	bic.w	r3, r3, #16
 8002626:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8002628:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a2b      	ldr	r2, [pc, #172]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800262e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002632:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002634:	bf00      	nop
 8002636:	4b29      	ldr	r3, [pc, #164]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f9      	beq.n	8002636 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002642:	4b26      	ldr	r3, [pc, #152]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4a25      	ldr	r2, [pc, #148]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800264e:	bf00      	nop
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f9      	bne.n	8002650 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	4a21      	ldr	r2, [pc, #132]	; (80026e4 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8002660:	fba2 2303 	umull	r2, r3, r2, r3
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	0d9b      	lsrs	r3, r3, #22
 8002668:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 800266a:	6a3a      	ldr	r2, [r7, #32]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	429a      	cmp	r2, r3
 8002670:	d202      	bcs.n	8002678 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002672:	6938      	ldr	r0, [r7, #16]
 8002674:	f000 f84a 	bl	800270c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	085b      	lsrs	r3, r3, #1
 800267c:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <XMC_SCU_CLOCK_StartSystemPll+0x174>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	0d9b      	lsrs	r3, r3, #22
 8002686:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002688:	6a3a      	ldr	r2, [r7, #32]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	429a      	cmp	r2, r3
 800268e:	d202      	bcs.n	8002696 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002690:	6938      	ldr	r0, [r7, #16]
 8002692:	f000 f83b 	bl	800270c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8002696:	6a38      	ldr	r0, [r7, #32]
 8002698:	f000 f838 	bl	800270c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 800269c:	e015      	b.n	80026ca <XMC_SCU_CLOCK_StartSystemPll+0x156>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 800269e:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	3b01      	subs	r3, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 80026aa:	490c      	ldr	r1, [pc, #48]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a09      	ldr	r2, [pc, #36]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 80026bc:	bf00      	nop
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f9      	beq.n	80026be <XMC_SCU_CLOCK_StartSystemPll+0x14a>
}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	431bde83 	.word	0x431bde83
 80026d8:	aaaaaaab 	.word	0xaaaaaaab
 80026dc:	50004710 	.word	0x50004710
 80026e0:	f08080ff 	.word	0xf08080ff
 80026e4:	88888889 	.word	0x88888889
 80026e8:	b60b60b7 	.word	0xb60b60b7

080026ec <XMC_SCU_CLOCK_StopSystemPll>:

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 80026f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fa:	6053      	str	r3, [r2, #4]
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	50004710 	.word	0x50004710

0800270c <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002722:	4905      	ldr	r1, [pc, #20]	; (8002738 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8002724:	4313      	orrs	r3, r2
 8002726:	608b      	str	r3, [r1, #8]

  XMC_SCU_lDelay(50U);
 8002728:	2032      	movs	r0, #50	; 0x32
 800272a:	f7fe fc6f 	bl	800100c <XMC_SCU_lDelay>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	50004710 	.word	0x50004710

0800273c <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <XMC_SCU_CLOCK_IsSystemPllLocked+0x20>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	bf14      	ite	ne
 800274c:	2301      	movne	r3, #1
 800274e:	2300      	moveq	r3, #0
 8002750:	b2db      	uxtb	r3, r3
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	50004710 	.word	0x50004710

08002760 <XMC_SCU_INTERRUPT_SetEventHandler>:
/*
 * API to assign the event handler function to be executed on occurrence of the selected event.
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
                                                   const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 800276e:	e002      	b.n	8002776 <XMC_SCU_INTERRUPT_SetEventHandler+0x16>
  {
    index++;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3301      	adds	r3, #1
 8002774:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	fa22 f303 	lsr.w	r3, r2, r3
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b1f      	cmp	r3, #31
 800278a:	d9f1      	bls.n	8002770 <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b20      	cmp	r3, #32
 8002790:	d102      	bne.n	8002798 <XMC_SCU_INTERRUPT_SetEventHandler+0x38>
  {
    status = XMC_SCU_STATUS_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	72fb      	strb	r3, [r7, #11]
 8002796:	e006      	b.n	80027a6 <XMC_SCU_INTERRUPT_SetEventHandler+0x46>
  }
  else
  {
    event_handler_list[index] = handler;
 8002798:	4906      	ldr	r1, [pc, #24]	; (80027b4 <XMC_SCU_INTERRUPT_SetEventHandler+0x54>)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 80027a2:	2300      	movs	r3, #0
 80027a4:	72fb      	strb	r3, [r7, #11]
  }
  
  return (status);
 80027a6:	7afb      	ldrb	r3, [r7, #11]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	200004a0 	.word	0x200004a0

080027b8 <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
  event = XMC_SCU_INTERUPT_GetEventStatus();
 80027c4:	f7fe fc7e 	bl	80010c4 <XMC_SCU_INTERUPT_GetEventStatus>
 80027c8:	6138      	str	r0, [r7, #16]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 80027ca:	e01c      	b.n	8002806 <XMC_SCU_IRQHandler+0x4e>
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d011      	beq.n	8002800 <XMC_SCU_IRQHandler+0x48>
    {
      event_handler = event_handler_list[index];
 80027dc:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <XMC_SCU_IRQHandler+0x60>)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e4:	60fb      	str	r3, [r7, #12]
      if (event_handler != NULL)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <XMC_SCU_IRQHandler+0x38>
      {
          (event_handler)();
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4798      	blx	r3
      }
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 80027f0:	2201      	movs	r2, #1
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe fc6f 	bl	80010dc <XMC_SCU_INTERRUPT_ClearEventStatus>
      
      break;
 80027fe:	e006      	b.n	800280e <XMC_SCU_IRQHandler+0x56>
    }   
    index++;    
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3301      	adds	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b1f      	cmp	r3, #31
 800280a:	d9df      	bls.n	80027cc <XMC_SCU_IRQHandler+0x14>
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200004a0 	.word	0x200004a0

0800281c <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	70fb      	strb	r3, [r7, #3]
 8002828:	4613      	mov	r3, r2
 800282a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	b2db      	uxtb	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3204      	adds	r2, #4
 8002838:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	21f8      	movs	r1, #248	; 0xf8
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	78f9      	ldrb	r1, [r7, #3]
 800284e:	0889      	lsrs	r1, r1, #2
 8002850:	b2c9      	uxtb	r1, r1
 8002852:	4608      	mov	r0, r1
 8002854:	ea02 0103 	and.w	r1, r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	1d02      	adds	r2, r0, #4
 800285c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	b2db      	uxtb	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3204      	adds	r2, #4
 800286c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002870:	78b9      	ldrb	r1, [r7, #2]
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	78f9      	ldrb	r1, [r7, #3]
 8002880:	0889      	lsrs	r1, r1, #2
 8002882:	b2c9      	uxtb	r1, r1
 8002884:	4608      	mov	r0, r1
 8002886:	ea42 0103 	orr.w	r1, r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	1d02      	adds	r2, r0, #4
 800288e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	460b      	mov	r3, r1
 80028a8:	70fb      	strb	r3, [r7, #3]
 80028aa:	4613      	mov	r3, r2
 80028ac:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2103      	movs	r1, #3
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	401a      	ands	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80028c8:	78b9      	ldrb	r1, [r7, #2]
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 80028e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e8:	b091      	sub	sp, #68	; 0x44
 80028ea:	af02      	add	r7, sp, #8
 80028ec:	60f8      	str	r0, [r7, #12]
	 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsSETUPReceived(void)
	{
		return device.IsSetupRecieved;
 80028ee:	4bb3      	ldr	r3, [pc, #716]	; (8002bbc <HID_Device_ProcessControlRequest+0x2d8>)
 80028f0:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 80028f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bf14      	ite	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	2300      	moveq	r3, #0
 8002902:	b2db      	uxtb	r3, r3
	if (!(Endpoint_IsSETUPReceived()))
 8002904:	f083 0301 	eor.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 81c8 	bne.w	8002ca0 <HID_Device_ProcessControlRequest+0x3bc>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 8002910:	4bab      	ldr	r3, [pc, #684]	; (8002bc0 <HID_Device_ProcessControlRequest+0x2dc>)
 8002912:	889b      	ldrh	r3, [r3, #4]
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	429a      	cmp	r2, r3
 800291e:	f040 81c1 	bne.w	8002ca4 <HID_Device_ProcessControlRequest+0x3c0>
	  return;

	switch (USB_ControlRequest.bRequest)
 8002922:	4ba7      	ldr	r3, [pc, #668]	; (8002bc0 <HID_Device_ProcessControlRequest+0x2dc>)
 8002924:	785b      	ldrb	r3, [r3, #1]
 8002926:	3b01      	subs	r3, #1
 8002928:	2b0a      	cmp	r3, #10
 800292a:	f200 81c8 	bhi.w	8002cbe <HID_Device_ProcessControlRequest+0x3da>
 800292e:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <HID_Device_ProcessControlRequest+0x50>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	08002961 	.word	0x08002961
 8002938:	08002c27 	.word	0x08002c27
 800293c:	08002b47 	.word	0x08002b47
 8002940:	08002cbf 	.word	0x08002cbf
 8002944:	08002cbf 	.word	0x08002cbf
 8002948:	08002cbf 	.word	0x08002cbf
 800294c:	08002cbf 	.word	0x08002cbf
 8002950:	08002cbf 	.word	0x08002cbf
 8002954:	08002a65 	.word	0x08002a65
 8002958:	08002bf7 	.word	0x08002bf7
 800295c:	08002bc5 	.word	0x08002bc5
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 8002960:	4b97      	ldr	r3, [pc, #604]	; (8002bc0 <HID_Device_ProcessControlRequest+0x2dc>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2ba1      	cmp	r3, #161	; 0xa1
 8002966:	f040 819f 	bne.w	8002ca8 <HID_Device_ProcessControlRequest+0x3c4>
			{
 800296a:	466b      	mov	r3, sp
 800296c:	461c      	mov	r4, r3
				uint16_t ReportSize = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	82fb      	strh	r3, [r7, #22]
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 8002972:	4b93      	ldr	r3, [pc, #588]	; (8002bc0 <HID_Device_ProcessControlRequest+0x2dc>)
 8002974:	885b      	ldrh	r3, [r3, #2]
 8002976:	b29b      	uxth	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	757b      	strb	r3, [r7, #21]
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 800297c:	4b90      	ldr	r3, [pc, #576]	; (8002bc0 <HID_Device_ProcessControlRequest+0x2dc>)
 800297e:	885b      	ldrh	r3, [r3, #2]
 8002980:	b29b      	uxth	r3, r3
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	b29b      	uxth	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	7b19      	ldrb	r1, [r3, #12]
 8002992:	460b      	mov	r3, r1
 8002994:	3b01      	subs	r3, #1
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
 8002998:	b2cb      	uxtb	r3, r1
 800299a:	2200      	movs	r2, #0
 800299c:	603b      	str	r3, [r7, #0]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	e9d7 5600 	ldrd	r5, r6, [r7]
 80029ac:	4630      	mov	r0, r6
 80029ae:	00c3      	lsls	r3, r0, #3
 80029b0:	4628      	mov	r0, r5
 80029b2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80029b6:	4628      	mov	r0, r5
 80029b8:	00c2      	lsls	r2, r0, #3
 80029ba:	b2cb      	uxtb	r3, r1
 80029bc:	2200      	movs	r2, #0
 80029be:	469a      	mov	sl, r3
 80029c0:	4693      	mov	fp, r2
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029d6:	460b      	mov	r3, r1
 80029d8:	3307      	adds	r3, #7
 80029da:	08db      	lsrs	r3, r3, #3
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	ebad 0d03 	sub.w	sp, sp, r3
 80029e2:	ab02      	add	r3, sp, #8
 80029e4:	3300      	adds	r3, #0
 80029e6:	623b      	str	r3, [r7, #32]

				memset(ReportData, 0, sizeof(ReportData));
 80029e8:	460b      	mov	r3, r1
 80029ea:	461a      	mov	r2, r3
 80029ec:	2100      	movs	r1, #0
 80029ee:	6a38      	ldr	r0, [r7, #32]
 80029f0:	f004 f872 	bl	8006ad8 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
 80029f4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80029f8:	f107 0115 	add.w	r1, r7, #21
 80029fc:	f107 0316 	add.w	r3, r7, #22
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f7fd feb5 	bl	8000774 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <HID_Device_ProcessControlRequest+0x13e>
				{
					MEMCPY(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6898      	ldr	r0, [r3, #8]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	7b1b      	ldrb	r3, [r3, #12]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6a39      	ldr	r1, [r7, #32]
 8002a1e:	f000 fa5d 	bl	8002edc <thumb2_memcpy>
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002a22:	2200      	movs	r2, #0
 8002a24:	4b65      	ldr	r3, [pc, #404]	; (8002bbc <HID_Device_ProcessControlRequest+0x2d8>)
 8002a26:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <HID_Device_ProcessControlRequest+0x2d8>)
 8002a2e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}
 8002a32:	bf00      	nop
	 *  \note This is not applicable for non CONTROL type endpoints.
	 */
	static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
	static inline void Endpoint_ClearSETUP(void)
	{
		device.IsSetupRecieved = 0;
 8002a34:	4a61      	ldr	r2, [pc, #388]	; (8002bbc <HID_Device_ProcessControlRequest+0x2d8>)
 8002a36:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002a3a:	f36f 0341 	bfc	r3, #1, #1
 8002a3e:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	}
 8002a42:	bf00      	nop

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
 8002a44:	7d7b      	ldrb	r3, [r7, #21]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HID_Device_ProcessControlRequest+0x16e>
				  Endpoint_Write_8(ReportID);
 8002a4a:	7d7b      	ldrb	r3, [r7, #21]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fc2f 	bl	80032b0 <Endpoint_Write_8>

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 8002a52:	8afb      	ldrh	r3, [r7, #22]
 8002a54:	4619      	mov	r1, r3
 8002a56:	6a38      	ldr	r0, [r7, #32]
 8002a58:	f000 ffc0 	bl	80039dc <Endpoint_Write_Control_Stream_LE>
				Endpoint_ClearOUT();
 8002a5c:	f000 fb32 	bl	80030c4 <Endpoint_ClearOUT>
 8002a60:	46a5      	mov	sp, r4
			}

			break;
 8002a62:	e121      	b.n	8002ca8 <HID_Device_ProcessControlRequest+0x3c4>
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8002a64:	4b56      	ldr	r3, [pc, #344]	; (8002bc0 <HID_Device_ProcessControlRequest+0x2dc>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b21      	cmp	r3, #33	; 0x21
 8002a6a:	f040 811f 	bne.w	8002cac <HID_Device_ProcessControlRequest+0x3c8>
			{
 8002a6e:	466b      	mov	r3, sp
 8002a70:	461e      	mov	r6, r3
				uint16_t ReportSize = USB_ControlRequest.wLength;
 8002a72:	4b53      	ldr	r3, [pc, #332]	; (8002bc0 <HID_Device_ProcessControlRequest+0x2dc>)
 8002a74:	799a      	ldrb	r2, [r3, #6]
 8002a76:	79db      	ldrb	r3, [r3, #7]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	86fb      	strh	r3, [r7, #54]	; 0x36
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 8002a7e:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <HID_Device_ProcessControlRequest+0x2dc>)
 8002a80:	885b      	ldrh	r3, [r3, #2]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 8002a88:	4b4d      	ldr	r3, [pc, #308]	; (8002bc0 <HID_Device_ProcessControlRequest+0x2dc>)
 8002a8a:	885b      	ldrh	r3, [r3, #2]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3b01      	subs	r3, #1
 8002a96:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				uint8_t  ReportData[ReportSize];
 8002a9a:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8002aa2:	b28b      	uxth	r3, r1
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	4698      	mov	r8, r3
 8002aa8:	4691      	mov	r9, r2
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ab6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002abe:	b28b      	uxth	r3, r1
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	461c      	mov	r4, r3
 8002ac4:	4615      	mov	r5, r2
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	00eb      	lsls	r3, r5, #3
 8002ad0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ad4:	00e2      	lsls	r2, r4, #3
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	3307      	adds	r3, #7
 8002ada:	08db      	lsrs	r3, r3, #3
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	ebad 0d03 	sub.w	sp, sp, r3
 8002ae2:	ab02      	add	r3, sp, #8
 8002ae4:	3300      	adds	r3, #0
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
		device.IsSetupRecieved = 0;
 8002ae8:	4a34      	ldr	r2, [pc, #208]	; (8002bbc <HID_Device_ProcessControlRequest+0x2d8>)
 8002aea:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002aee:	f36f 0341 	bfc	r3, #1, #1
 8002af2:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	}
 8002af6:	bf00      	nop

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 8002af8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002afa:	4619      	mov	r1, r3
 8002afc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002afe:	f000 ffb5 	bl	8003a6c <Endpoint_Read_Control_Stream_LE>
				Endpoint_ClearIN();
 8002b02:	f000 fb2b 	bl	800315c <Endpoint_ClearIN>

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
 8002b06:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	bf14      	ite	ne
 8002b0e:	2301      	movne	r3, #1
 8002b10:	2300      	moveq	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	1898      	adds	r0, r3, r2
 8002b1a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bf14      	ite	ne
 8002b22:	2301      	movne	r3, #1
 8002b24:	2300      	moveq	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	b29b      	uxth	r3, r3
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
 8002b2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002b34:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7fd ff97 	bl	8000a70 <CALLBACK_HID_Device_ProcessHIDReport>
 8002b42:	46b5      	mov	sp, r6
			}

			break;
 8002b44:	e0b2      	b.n	8002cac <HID_Device_ProcessControlRequest+0x3c8>
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 8002b46:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <HID_Device_ProcessControlRequest+0x2dc>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2ba1      	cmp	r3, #161	; 0xa1
 8002b4c:	f040 80b0 	bne.w	8002cb0 <HID_Device_ProcessControlRequest+0x3cc>
		device.IsSetupRecieved = 0;
 8002b50:	4a1a      	ldr	r2, [pc, #104]	; (8002bbc <HID_Device_ProcessControlRequest+0x2d8>)
 8002b52:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002b56:	f36f 0341 	bfc	r3, #1, #1
 8002b5a:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	}
 8002b5e:	bf00      	nop
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
 8002b60:	bf00      	nop
	 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
	 */
	static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsINReady(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002b62:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <HID_Device_ProcessControlRequest+0x2d8>)
 8002b64:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002b68:	461a      	mov	r2, r3
 8002b6a:	232c      	movs	r3, #44	; 0x2c
 8002b6c:	fb02 f303 	mul.w	r3, r2, r3
 8002b70:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <HID_Device_ProcessControlRequest+0x2d8>)
 8002b72:	4413      	add	r3, r2
 8002b74:	3304      	adds	r3, #4
 8002b76:	61fb      	str	r3, [r7, #28]
		return ep->InInUse == 0 && ep->IsEnabled;
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d108      	bne.n	8002b98 <HID_Device_ProcessControlRequest+0x2b4>
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	791b      	ldrb	r3, [r3, #4]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HID_Device_ProcessControlRequest+0x2b4>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <HID_Device_ProcessControlRequest+0x2b6>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f083 0301 	eor.w	r3, r3, #1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1db      	bne.n	8002b62 <HID_Device_ProcessControlRequest+0x27e>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	7c1b      	ldrb	r3, [r3, #16]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fb7e 	bl	80032b0 <Endpoint_Write_8>
				Endpoint_ClearIN();
 8002bb4:	f000 fad2 	bl	800315c <Endpoint_ClearIN>
	}
 8002bb8:	bf00      	nop
				Endpoint_ClearStatusStage();
			}

			break;
 8002bba:	e079      	b.n	8002cb0 <HID_Device_ProcessControlRequest+0x3cc>
 8002bbc:	20000524 	.word	0x20000524
 8002bc0:	20000aac 	.word	0x20000aac
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8002bc4:	4b40      	ldr	r3, [pc, #256]	; (8002cc8 <HID_Device_ProcessControlRequest+0x3e4>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b21      	cmp	r3, #33	; 0x21
 8002bca:	d173      	bne.n	8002cb4 <HID_Device_ProcessControlRequest+0x3d0>
		device.IsSetupRecieved = 0;
 8002bcc:	4a3f      	ldr	r2, [pc, #252]	; (8002ccc <HID_Device_ProcessControlRequest+0x3e8>)
 8002bce:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002bd2:	f36f 0341 	bfc	r3, #1, #1
 8002bd6:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	}
 8002bda:	bf00      	nop
	}
 8002bdc:	bf00      	nop
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 8002bde:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <HID_Device_ProcessControlRequest+0x3e4>)
 8002be0:	885b      	ldrh	r3, [r3, #2]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf14      	ite	ne
 8002bea:	2301      	movne	r3, #1
 8002bec:	2300      	moveq	r3, #0
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	741a      	strb	r2, [r3, #16]
			}

			break;
 8002bf4:	e05e      	b.n	8002cb4 <HID_Device_ProcessControlRequest+0x3d0>
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 8002bf6:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <HID_Device_ProcessControlRequest+0x3e4>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b21      	cmp	r3, #33	; 0x21
 8002bfc:	d15c      	bne.n	8002cb8 <HID_Device_ProcessControlRequest+0x3d4>
		device.IsSetupRecieved = 0;
 8002bfe:	4a33      	ldr	r2, [pc, #204]	; (8002ccc <HID_Device_ProcessControlRequest+0x3e8>)
 8002c00:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002c04:	f36f 0341 	bfc	r3, #1, #1
 8002c08:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	}
 8002c0c:	bf00      	nop
	}
 8002c0e:	bf00      	nop
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 8002c10:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HID_Device_ProcessControlRequest+0x3e4>)
 8002c12:	885b      	ldrh	r3, [r3, #2]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	119b      	asrs	r3, r3, #6
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	829a      	strh	r2, [r3, #20]
			}

			break;
 8002c24:	e048      	b.n	8002cb8 <HID_Device_ProcessControlRequest+0x3d4>
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 8002c26:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <HID_Device_ProcessControlRequest+0x3e4>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2ba1      	cmp	r3, #161	; 0xa1
 8002c2c:	d146      	bne.n	8002cbc <HID_Device_ProcessControlRequest+0x3d8>
		device.IsSetupRecieved = 0;
 8002c2e:	4a27      	ldr	r2, [pc, #156]	; (8002ccc <HID_Device_ProcessControlRequest+0x3e8>)
 8002c30:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8002c34:	f36f 0341 	bfc	r3, #1, #1
 8002c38:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	}
 8002c3c:	bf00      	nop
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
 8002c3e:	bf00      	nop
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002c40:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <HID_Device_ProcessControlRequest+0x3e8>)
 8002c42:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002c46:	461a      	mov	r2, r3
 8002c48:	232c      	movs	r3, #44	; 0x2c
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	; (8002ccc <HID_Device_ProcessControlRequest+0x3e8>)
 8002c50:	4413      	add	r3, r2
 8002c52:	3304      	adds	r3, #4
 8002c54:	61bb      	str	r3, [r7, #24]
		return ep->InInUse == 0 && ep->IsEnabled;
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d108      	bne.n	8002c76 <HID_Device_ProcessControlRequest+0x392>
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	791b      	ldrb	r3, [r3, #4]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HID_Device_ProcessControlRequest+0x392>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HID_Device_ProcessControlRequest+0x394>
 8002c76:	2300      	movs	r3, #0
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	f083 0301 	eor.w	r3, r3, #1
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1db      	bne.n	8002c40 <HID_Device_ProcessControlRequest+0x35c>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8a9b      	ldrh	r3, [r3, #20]
 8002c8c:	089b      	lsrs	r3, r3, #2
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fb0c 	bl	80032b0 <Endpoint_Write_8>
				Endpoint_ClearIN();
 8002c98:	f000 fa60 	bl	800315c <Endpoint_ClearIN>
	}
 8002c9c:	bf00      	nop
				Endpoint_ClearStatusStage();
			}

			break;
 8002c9e:	e00d      	b.n	8002cbc <HID_Device_ProcessControlRequest+0x3d8>
	  return;
 8002ca0:	bf00      	nop
 8002ca2:	e00c      	b.n	8002cbe <HID_Device_ProcessControlRequest+0x3da>
	  return;
 8002ca4:	bf00      	nop
 8002ca6:	e00a      	b.n	8002cbe <HID_Device_ProcessControlRequest+0x3da>
			break;
 8002ca8:	bf00      	nop
 8002caa:	e008      	b.n	8002cbe <HID_Device_ProcessControlRequest+0x3da>
			break;
 8002cac:	bf00      	nop
 8002cae:	e006      	b.n	8002cbe <HID_Device_ProcessControlRequest+0x3da>
			break;
 8002cb0:	bf00      	nop
 8002cb2:	e004      	b.n	8002cbe <HID_Device_ProcessControlRequest+0x3da>
			break;
 8002cb4:	bf00      	nop
 8002cb6:	e002      	b.n	8002cbe <HID_Device_ProcessControlRequest+0x3da>
			break;
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <HID_Device_ProcessControlRequest+0x3da>
			break;
 8002cbc:	bf00      	nop
	}
}
 8002cbe:	373c      	adds	r7, #60	; 0x3c
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000aac 	.word	0x20000aac
 8002ccc:	20000524 	.word	0x20000524

08002cd0 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3310      	adds	r3, #16
 8002cdc:	2208      	movs	r2, #8
 8002cde:	2100      	movs	r1, #0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f003 fef9 	bl	8006ad8 <memset>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	741a      	strb	r2, [r3, #16]
	HIDInterfaceInfo->State.IdleCount           = 750;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002cf2:	829a      	strh	r2, [r3, #20]

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	719a      	strb	r2, [r3, #6]

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	2101      	movs	r1, #1
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fbb1 	bl	8003468 <Endpoint_ConfigureEndpointTable>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f083 0301 	eor.w	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HID_Device_ConfigureEndpoints+0x46>
	  return false;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e000      	b.n	8002d18 <HID_Device_ConfigureEndpoints+0x48>

	return true;
 8002d16:	2301      	movs	r3, #1
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 8002d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d24:	b08b      	sub	sp, #44	; 0x2c
 8002d26:	af02      	add	r7, sp, #8
 8002d28:	6078      	str	r0, [r7, #4]
	if (USB_DeviceState != DEVICE_STATE_Configured)
 8002d2a:	4b6a      	ldr	r3, [pc, #424]	; (8002ed4 <HID_Device_USBTask+0x1b4>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	f040 80c8 	bne.w	8002ec6 <HID_Device_USBTask+0x1a6>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	8a5e      	ldrh	r6, [r3, #18]
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 8002d3a:	4b67      	ldr	r3, [pc, #412]	; (8002ed8 <HID_Device_USBTask+0x1b8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	4798      	blx	r3
 8002d42:	4603      	mov	r3, r0
 8002d44:	429e      	cmp	r6, r3
 8002d46:	f000 80c0 	beq.w	8002eca <HID_Device_USBTask+0x1aa>
		#else
		return;
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	789b      	ldrb	r3, [r3, #2]
 8002d4e:	747b      	strb	r3, [r7, #17]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002d50:	7c7b      	ldrb	r3, [r7, #17]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	4b5f      	ldr	r3, [pc, #380]	; (8002ed8 <HID_Device_USBTask+0x1b8>)
 8002d5a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002d5e:	7c7b      	ldrb	r3, [r7, #17]
 8002d60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4b5c      	ldr	r3, [pc, #368]	; (8002ed8 <HID_Device_USBTask+0x1b8>)
 8002d68:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}
 8002d6c:	bf00      	nop

	if (Endpoint_IsReadWriteAllowed())
 8002d6e:	f000 fa6d 	bl	800324c <Endpoint_IsReadWriteAllowed>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80a9 	beq.w	8002ecc <HID_Device_USBTask+0x1ac>
	{
 8002d7a:	466b      	mov	r3, sp
 8002d7c:	461e      	mov	r6, r3
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	7b19      	ldrb	r1, [r3, #12]
 8002d82:	460b      	mov	r3, r1
 8002d84:	3b01      	subs	r3, #1
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	b2cb      	uxtb	r3, r1
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	4698      	mov	r8, r3
 8002d8e:	4691      	mov	r9, r2
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002da0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002da4:	b2cb      	uxtb	r3, r1
 8002da6:	2200      	movs	r2, #0
 8002da8:	461c      	mov	r4, r3
 8002daa:	4615      	mov	r5, r2
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	00eb      	lsls	r3, r5, #3
 8002db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dba:	00e2      	lsls	r2, r4, #3
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	3307      	adds	r3, #7
 8002dc0:	08db      	lsrs	r3, r3, #3
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	ebad 0d03 	sub.w	sp, sp, r3
 8002dc8:	ab02      	add	r3, sp, #8
 8002dca:	3300      	adds	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
		uint8_t  ReportID     = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	73fb      	strb	r3, [r7, #15]
		uint16_t ReportINSize = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	81bb      	strh	r3, [r7, #12]

		memset(ReportINData, 0, sizeof(ReportINData));
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2100      	movs	r1, #0
 8002ddc:	6978      	ldr	r0, [r7, #20]
 8002dde:	f003 fe7b 	bl	8006ad8 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
 8002de2:	f107 010f 	add.w	r1, r7, #15
 8002de6:	f107 030c 	add.w	r3, r7, #12
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2200      	movs	r2, #0
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7fd fcbf 	bl	8000774 <CALLBACK_HID_Device_CreateHIDReport>
 8002df6:	4603      	mov	r3, r0
 8002df8:	74fb      	strb	r3, [r7, #19]
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	77fb      	strb	r3, [r7, #31]
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	8a9b      	ldrh	r3, [r3, #20]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HID_Device_USBTask+0xf2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	8adb      	ldrh	r3, [r3, #22]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HID_Device_USBTask+0xf2>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HID_Device_USBTask+0xf4>
 8002e12:	2300      	movs	r3, #0
 8002e14:	74bb      	strb	r3, [r7, #18]
 8002e16:	7cbb      	ldrb	r3, [r7, #18]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	74bb      	strb	r3, [r7, #18]

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d014      	beq.n	8002e50 <HID_Device_USBTask+0x130>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	89ba      	ldrh	r2, [r7, #12]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	6978      	ldr	r0, [r7, #20]
 8002e30:	f003 fd84 	bl	800693c <memcmp>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	bf14      	ite	ne
 8002e3a:	2301      	movne	r3, #1
 8002e3c:	2300      	moveq	r3, #0
 8002e3e:	77fb      	strb	r3, [r7, #31]
			MEMCPY(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6898      	ldr	r0, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7b1b      	ldrb	r3, [r3, #12]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	6979      	ldr	r1, [r7, #20]
 8002e4c:	f000 f846 	bl	8002edc <thumb2_memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 8002e50:	89bb      	ldrh	r3, [r7, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d02d      	beq.n	8002eb2 <HID_Device_USBTask+0x192>
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <HID_Device_USBTask+0x148>
 8002e5c:	7ffb      	ldrb	r3, [r7, #31]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d102      	bne.n	8002e68 <HID_Device_USBTask+0x148>
 8002e62:	7cbb      	ldrb	r3, [r7, #18]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d024      	beq.n	8002eb2 <HID_Device_USBTask+0x192>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	8a9a      	ldrh	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	82da      	strh	r2, [r3, #22]

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	789b      	ldrb	r3, [r3, #2]
 8002e74:	743b      	strb	r3, [r7, #16]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 8002e76:	7c3b      	ldrb	r3, [r7, #16]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <HID_Device_USBTask+0x1b8>)
 8002e80:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8002e84:	7c3b      	ldrb	r3, [r7, #16]
 8002e86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <HID_Device_USBTask+0x1b8>)
 8002e8e:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}
 8002e92:	bf00      	nop

			if (ReportID)
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HID_Device_USBTask+0x182>
			  Endpoint_Write_8(ReportID);
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fa07 	bl	80032b0 <Endpoint_Write_8>

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
 8002ea2:	89bb      	ldrh	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6978      	ldr	r0, [r7, #20]
 8002eaa:	f000 fb85 	bl	80035b8 <Endpoint_Write_Stream_LE>

			Endpoint_ClearIN();
 8002eae:	f000 f955 	bl	800315c <Endpoint_ClearIN>
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <HID_Device_USBTask+0x1b8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	4798      	blx	r3
 8002eba:	4603      	mov	r3, r0
 8002ebc:	461a      	mov	r2, r3
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	825a      	strh	r2, [r3, #18]
 8002ec2:	46b5      	mov	sp, r6
 8002ec4:	e002      	b.n	8002ecc <HID_Device_USBTask+0x1ac>
	  return;
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <HID_Device_USBTask+0x1ac>
		return;
 8002eca:	bf00      	nop
	}
}
 8002ecc:	3724      	adds	r7, #36	; 0x24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ed4:	20000ab4 	.word	0x20000ab4
 8002ed8:	20000524 	.word	0x20000524

08002edc <thumb2_memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void thumb2_memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 8002edc:	0913      	lsrs	r3, r2, #4
 8002ede:	d011      	beq.n	8002f04 <thumb2_memcpy+0x28>
 8002ee0:	f851 cb04 	ldr.w	ip, [r1], #4
 8002ee4:	f840 cb04 	str.w	ip, [r0], #4
 8002ee8:	f851 cb04 	ldr.w	ip, [r1], #4
 8002eec:	f840 cb04 	str.w	ip, [r0], #4
 8002ef0:	f851 cb04 	ldr.w	ip, [r1], #4
 8002ef4:	f840 cb04 	str.w	ip, [r0], #4
 8002ef8:	f851 cb04 	ldr.w	ip, [r1], #4
 8002efc:	f840 cb04 	str.w	ip, [r0], #4
 8002f00:	3b01      	subs	r3, #1
 8002f02:	d1ed      	bne.n	8002ee0 <thumb2_memcpy+0x4>
 8002f04:	f012 030f 	ands.w	r3, r2, #15
 8002f08:	d005      	beq.n	8002f16 <thumb2_memcpy+0x3a>
 8002f0a:	f811 cb01 	ldrb.w	ip, [r1], #1
 8002f0e:	f800 cb01 	strb.w	ip, [r0], #1
 8002f12:	3b01      	subs	r3, #1
 8002f14:	d1f9      	bne.n	8002f0a <thumb2_memcpy+0x2e>
 8002f16:	4770      	bx	lr
        "    bne     3$\n"

        // Return to caller.
        "4$: bx      lr\n"
    );
}
 8002f18:	bf00      	nop
	...

08002f1c <__NVIC_EnableIRQ>:
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	db0b      	blt.n	8002f46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	f003 021f 	and.w	r2, r3, #31
 8002f34:	4907      	ldr	r1, [pc, #28]	; (8002f54 <__NVIC_EnableIRQ+0x38>)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	e000e100 	.word	0xe000e100

08002f58 <__NVIC_DisableIRQ>:
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	db12      	blt.n	8002f90 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	f003 021f 	and.w	r2, r3, #31
 8002f70:	490a      	ldr	r1, [pc, #40]	; (8002f9c <__NVIC_DisableIRQ+0x44>)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	2001      	movs	r0, #1
 8002f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7e:	3320      	adds	r3, #32
 8002f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f84:	f3bf 8f4f 	dsb	sy
}
 8002f88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f8a:	f3bf 8f6f 	isb	sy
}
 8002f8e:	bf00      	nop
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000e100 	.word	0xe000e100

08002fa0 <Endpoint_WaitUntilReady>:
#define USB_STREAM_TIMEOUT_MS 100

extern volatile uint8_t zlp_flag;

uint8_t Endpoint_WaitUntilReady(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 8002fa6:	2364      	movs	r3, #100	; 0x64
 8002fa8:	75fb      	strb	r3, [r7, #23]
			 *  \return Current USB frame number from the USB controller.
			 */
    
            static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE;
            static inline uint16_t USB_Device_GetFrameNumber(void) {
                return device.Driver->GetFrameNumber();
 8002faa:	4b44      	ldr	r3, [pc, #272]	; (80030bc <Endpoint_WaitUntilReady+0x11c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	4798      	blx	r3
 8002fb2:	4603      	mov	r3, r0
	#else
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();
 8002fb4:	82bb      	strh	r3, [r7, #20]
	 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
	 */
	static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline uint8_t Endpoint_GetEndpointDirection(void)
	{
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002fb6:	4b41      	ldr	r3, [pc, #260]	; (80030bc <Endpoint_WaitUntilReady+0x11c>)
 8002fb8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	232c      	movs	r3, #44	; 0x2c
 8002fc0:	fb02 f303 	mul.w	r3, r2, r3
 8002fc4:	4a3d      	ldr	r2, [pc, #244]	; (80030bc <Endpoint_WaitUntilReady+0x11c>)
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3304      	adds	r3, #4
 8002fca:	60fb      	str	r3, [r7, #12]
		return ep->Address & ENDPOINT_DIR_MASK;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002fd4:	b2db      	uxtb	r3, r3

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 8002fd6:	2b80      	cmp	r3, #128	; 0x80
 8002fd8:	d122      	bne.n	8003020 <Endpoint_WaitUntilReady+0x80>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8002fda:	4b38      	ldr	r3, [pc, #224]	; (80030bc <Endpoint_WaitUntilReady+0x11c>)
 8002fdc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	232c      	movs	r3, #44	; 0x2c
 8002fe4:	fb02 f303 	mul.w	r3, r2, r3
 8002fe8:	4a34      	ldr	r2, [pc, #208]	; (80030bc <Endpoint_WaitUntilReady+0x11c>)
 8002fea:	4413      	add	r3, r2
 8002fec:	3304      	adds	r3, #4
 8002fee:	60bb      	str	r3, [r7, #8]
		return ep->InInUse == 0 && ep->IsEnabled;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d108      	bne.n	8003010 <Endpoint_WaitUntilReady+0x70>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	791b      	ldrb	r3, [r3, #4]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <Endpoint_WaitUntilReady+0x70>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <Endpoint_WaitUntilReady+0x72>
 8003010:	2300      	movs	r3, #0
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	b2db      	uxtb	r3, r3
		{
			if (Endpoint_IsINReady())
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01a      	beq.n	8003052 <Endpoint_WaitUntilReady+0xb2>
			  return ENDPOINT_READYWAIT_NoError;
 800301c:	2300      	movs	r3, #0
 800301e:	e048      	b.n	80030b2 <Endpoint_WaitUntilReady+0x112>
		USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003020:	4b26      	ldr	r3, [pc, #152]	; (80030bc <Endpoint_WaitUntilReady+0x11c>)
 8003022:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003026:	461a      	mov	r2, r3
 8003028:	232c      	movs	r3, #44	; 0x2c
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	4a23      	ldr	r2, [pc, #140]	; (80030bc <Endpoint_WaitUntilReady+0x11c>)
 8003030:	4413      	add	r3, r2
 8003032:	3304      	adds	r3, #4
 8003034:	607b      	str	r3, [r7, #4]
		return ep->IsOutRecieved;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf14      	ite	ne
 8003044:	2301      	movne	r3, #1
 8003046:	2300      	moveq	r3, #0
 8003048:	b2db      	uxtb	r3, r3
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <Endpoint_WaitUntilReady+0xb2>
			  return ENDPOINT_READYWAIT_NoError;
 800304e:	2300      	movs	r3, #0
 8003050:	e02f      	b.n	80030b2 <Endpoint_WaitUntilReady+0x112>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8003052:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <Endpoint_WaitUntilReady+0x120>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	74fb      	strb	r3, [r7, #19]

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <Endpoint_WaitUntilReady+0xc2>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 800305e:	2302      	movs	r3, #2
 8003060:	e027      	b.n	80030b2 <Endpoint_WaitUntilReady+0x112>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8003062:	7cfb      	ldrb	r3, [r7, #19]
 8003064:	2b05      	cmp	r3, #5
 8003066:	d101      	bne.n	800306c <Endpoint_WaitUntilReady+0xcc>
		  return ENDPOINT_READYWAIT_BusSuspended;
 8003068:	2303      	movs	r3, #3
 800306a:	e022      	b.n	80030b2 <Endpoint_WaitUntilReady+0x112>
	 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
	 */
	static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
	static inline bool Endpoint_IsStalled(void)
	{
		return device.Endpoints[device.CurrentEndpoint].IsHalted == 1 ? true : false;
 800306c:	4b13      	ldr	r3, [pc, #76]	; (80030bc <Endpoint_WaitUntilReady+0x11c>)
 800306e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003072:	4619      	mov	r1, r3
 8003074:	4a11      	ldr	r2, [pc, #68]	; (80030bc <Endpoint_WaitUntilReady+0x11c>)
 8003076:	232c      	movs	r3, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	7a1b      	ldrb	r3, [r3, #8]
 8003080:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003084:	b2db      	uxtb	r3, r3
		else if (Endpoint_IsStalled())
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <Endpoint_WaitUntilReady+0xee>
		  return ENDPOINT_READYWAIT_EndpointStalled;
 800308a:	2301      	movs	r3, #1
 800308c:	e011      	b.n	80030b2 <Endpoint_WaitUntilReady+0x112>
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <Endpoint_WaitUntilReady+0x11c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003094:	4798      	blx	r3
 8003096:	4603      	mov	r3, r0

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();
 8003098:	823b      	strh	r3, [r7, #16]

		if (CurrentFrameNumber != PreviousFrameNumber)
 800309a:	8a3a      	ldrh	r2, [r7, #16]
 800309c:	8abb      	ldrh	r3, [r7, #20]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d089      	beq.n	8002fb6 <Endpoint_WaitUntilReady+0x16>
		{
			PreviousFrameNumber = CurrentFrameNumber;
 80030a2:	8a3b      	ldrh	r3, [r7, #16]
 80030a4:	82bb      	strh	r3, [r7, #20]

			if (!(TimeoutMSRem--))
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
 80030a8:	1e5a      	subs	r2, r3, #1
 80030aa:	75fa      	strb	r2, [r7, #23]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d182      	bne.n	8002fb6 <Endpoint_WaitUntilReady+0x16>
			  return ENDPOINT_READYWAIT_Timeout;
 80030b0:	2304      	movs	r3, #4
		}
	}
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000524 	.word	0x20000524
 80030c0:	20000ab4 	.word	0x20000ab4

080030c4 <Endpoint_ClearOUT>:

void Endpoint_ClearOUT(void) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 80030ca:	4b23      	ldr	r3, [pc, #140]	; (8003158 <Endpoint_ClearOUT+0x94>)
 80030cc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80030d0:	461a      	mov	r2, r3
 80030d2:	232c      	movs	r3, #44	; 0x2c
 80030d4:	fb02 f303 	mul.w	r3, r2, r3
 80030d8:	4a1f      	ldr	r2, [pc, #124]	; (8003158 <Endpoint_ClearOUT+0x94>)
 80030da:	4413      	add	r3, r2
 80030dc:	3304      	adds	r3, #4
 80030de:	607b      	str	r3, [r7, #4]
	/* if we have data left which isn't read yet, we leave this routine to not override it */
	if (ep->IsEnabled == 0)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	791b      	ldrb	r3, [r3, #4]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d02f      	beq.n	800314e <Endpoint_ClearOUT+0x8a>
		return;
	/* First Check whether we have data in the driver */
	ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 80030ee:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <Endpoint_ClearOUT+0x94>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	7810      	ldrb	r0, [r2, #0]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6911      	ldr	r1, [r2, #16]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6952      	ldr	r2, [r2, #20]
 8003100:	4798      	blx	r3
 8003102:	4603      	mov	r3, r0
 8003104:	461a      	mov	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	609a      	str	r2, [r3, #8]
	ep->OutOffset = 0;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	60da      	str	r2, [r3, #12]
	/* If we didn't request new data and all data has been read, request new */
	if (!ep->OutInUse && !ep->OutBytesAvailable) {
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d118      	bne.n	8003150 <Endpoint_ClearOUT+0x8c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d114      	bne.n	8003150 <Endpoint_ClearOUT+0x8c>
		ep->OutInUse = true;
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	8893      	ldrh	r3, [r2, #4]
 800312a:	f043 0308 	orr.w	r3, r3, #8
 800312e:	8093      	strh	r3, [r2, #4]
		ep->IsOutRecieved = 0;
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	8893      	ldrh	r3, [r2, #4]
 8003134:	f36f 1345 	bfc	r3, #5, #1
 8003138:	8093      	strh	r3, [r2, #4]
		device.Driver->EndpointReadStart(ep->Address,
 800313a:	4b07      	ldr	r3, [pc, #28]	; (8003158 <Endpoint_ClearOUT+0x94>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	7810      	ldrb	r0, [r2, #0]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6952      	ldr	r2, [r2, #20]
 8003148:	4611      	mov	r1, r2
 800314a:	4798      	blx	r3
 800314c:	e000      	b.n	8003150 <Endpoint_ClearOUT+0x8c>
		return;
 800314e:	bf00      	nop
				ep->OutBufferLength);
	}
}
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000524 	.word	0x20000524

0800315c <Endpoint_ClearIN>:

void Endpoint_ClearIN(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *ep = &device.Endpoints[device.CurrentEndpoint];
 8003162:	4b38      	ldr	r3, [pc, #224]	; (8003244 <Endpoint_ClearIN+0xe8>)
 8003164:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003168:	461a      	mov	r2, r3
 800316a:	232c      	movs	r3, #44	; 0x2c
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	4a34      	ldr	r2, [pc, #208]	; (8003244 <Endpoint_ClearIN+0xe8>)
 8003172:	4413      	add	r3, r2
 8003174:	3304      	adds	r3, #4
 8003176:	607b      	str	r3, [r7, #4]
	int32_t data_count;
	/* don't clear if in use or not enabled */
	if (ep->InInUse == 1 || ep->IsEnabled == 0)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d059      	beq.n	800323a <Endpoint_ClearIN+0xde>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	791b      	ldrb	r3, [r3, #4]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d052      	beq.n	800323a <Endpoint_ClearIN+0xde>
		return;
	ep->InInUse = true;
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	8893      	ldrh	r3, [r2, #4]
 8003198:	f043 0310 	orr.w	r3, r3, #16
 800319c:	8093      	strh	r3, [r2, #4]
	/* store transfer information to loop over, if underlying is smaller */
	ep->InDataBuffer = ep->InBuffer;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft = ep->InBytesAvailable;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24
	ep->InBytesAvailable = 0;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	619a      	str	r2, [r3, #24]
	/* make next 3 operations atomic. Do not get interrupted.*/
	NVIC_DisableIRQ(USB0_0_IRQn);
 80031b4:	206b      	movs	r0, #107	; 0x6b
 80031b6:	f7ff fecf 	bl	8002f58 <__NVIC_DisableIRQ>
	data_count = device.Driver->EndpointWrite(ep->Address,
 80031ba:	4b22      	ldr	r3, [pc, #136]	; (8003244 <Endpoint_ClearIN+0xe8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	7810      	ldrb	r0, [r2, #0]
			ep->InDataBuffer,ep->InDataLeft);
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6a91      	ldr	r1, [r2, #40]	; 0x28
	data_count = device.Driver->EndpointWrite(ep->Address,
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031cc:	4798      	blx	r3
 80031ce:	6038      	str	r0, [r7, #0]
	ep->InDataBuffer += data_count;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	441a      	add	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	629a      	str	r2, [r3, #40]	; 0x28
	ep->InDataLeft -= data_count;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	1ad2      	subs	r2, r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24
	NVIC_EnableIRQ(USB0_0_IRQn);
 80031e8:	206b      	movs	r0, #107	; 0x6b
 80031ea:	f7ff fe97 	bl	8002f1c <__NVIC_EnableIRQ>
	if((zlp_flag == true) && (ep->Number != 0))
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <Endpoint_ClearIN+0xec>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d121      	bne.n	800323c <Endpoint_ClearIN+0xe0>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01a      	beq.n	800323c <Endpoint_ClearIN+0xe0>
	{
		/*Send a ZLP from here*/
	  while(ep->InInUse)
 8003206:	bf00      	nop
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f8      	bne.n	8003208 <Endpoint_ClearIN+0xac>
	  {
		;
	  }
	  ep->InInUse = true;
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	8893      	ldrh	r3, [r2, #4]
 800321a:	f043 0310 	orr.w	r3, r3, #16
 800321e:	8093      	strh	r3, [r2, #4]
	  device.Driver->EndpointWrite(ep->Address,
 8003220:	4b08      	ldr	r3, [pc, #32]	; (8003244 <Endpoint_ClearIN+0xe8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	7810      	ldrb	r0, [r2, #0]
	  			ep->InDataBuffer,0);
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6a91      	ldr	r1, [r2, #40]	; 0x28
	  device.Driver->EndpointWrite(ep->Address,
 800322e:	2200      	movs	r2, #0
 8003230:	4798      	blx	r3
	  zlp_flag = false;
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <Endpoint_ClearIN+0xec>)
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	e000      	b.n	800323c <Endpoint_ClearIN+0xe0>
		return;
 800323a:	bf00      	nop
	}
}
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000524 	.word	0x20000524
 8003248:	20000520 	.word	0x20000520

0800324c <Endpoint_IsReadWriteAllowed>:

bool Endpoint_IsReadWriteAllowed(void) {
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003252:	4b16      	ldr	r3, [pc, #88]	; (80032ac <Endpoint_IsReadWriteAllowed+0x60>)
 8003254:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003258:	461a      	mov	r2, r3
 800325a:	232c      	movs	r3, #44	; 0x2c
 800325c:	fb02 f303 	mul.w	r3, r2, r3
 8003260:	4a12      	ldr	r2, [pc, #72]	; (80032ac <Endpoint_IsReadWriteAllowed+0x60>)
 8003262:	4413      	add	r3, r2
 8003264:	3304      	adds	r3, #4
 8003266:	603b      	str	r3, [r7, #0]
	bool Retval = false;
 8003268:	2300      	movs	r3, #0
 800326a:	71fb      	strb	r3, [r7, #7]

	if(EndPoint->Direction)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <Endpoint_IsReadWriteAllowed+0x42>
	{
		Retval = (EndPoint->InBytesAvailable < EndPoint->InBufferLength) ? true : false;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	429a      	cmp	r2, r3
 8003284:	bf34      	ite	cc
 8003286:	2301      	movcc	r3, #1
 8003288:	2300      	movcs	r3, #0
 800328a:	71fb      	strb	r3, [r7, #7]
 800328c:	e006      	b.n	800329c <Endpoint_IsReadWriteAllowed+0x50>
	}
	else
	{
		Retval = (EndPoint->OutBytesAvailable > 0) ? true : false;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf14      	ite	ne
 8003296:	2301      	movne	r3, #1
 8003298:	2300      	moveq	r3, #0
 800329a:	71fb      	strb	r3, [r7, #7]
	}
	return Retval;
 800329c:	79fb      	ldrb	r3, [r7, #7]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000524 	.word	0x20000524

080032b0 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data) {
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80032ba:	4b17      	ldr	r3, [pc, #92]	; (8003318 <Endpoint_Write_8+0x68>)
 80032bc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80032c0:	461a      	mov	r2, r3
 80032c2:	232c      	movs	r3, #44	; 0x2c
 80032c4:	fb02 f303 	mul.w	r3, r2, r3
 80032c8:	4a13      	ldr	r2, [pc, #76]	; (8003318 <Endpoint_Write_8+0x68>)
 80032ca:	4413      	add	r3, r2
 80032cc:	3304      	adds	r3, #4
 80032ce:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 80032d0:	2300      	movs	r3, #0
 80032d2:	73fb      	strb	r3, [r7, #15]

	 do
	  {
	    if(EndPoint->InBytesAvailable < EndPoint->InBufferLength)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	699a      	ldr	r2, [r3, #24]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d20d      	bcs.n	80032fc <Endpoint_Write_8+0x4c>
	    {
	      EndPoint->InBuffer[EndPoint->InBytesAvailable] = Data;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	4413      	add	r3, r2
 80032ea:	79fa      	ldrb	r2, [r7, #7]
 80032ec:	701a      	strb	r2, [r3, #0]
	      EndPoint->InBytesAvailable++;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	619a      	str	r2, [r3, #24]

	      Success = true;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
	    }
	  }while(!Success);
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	f083 0301 	eor.w	r3, r3, #1
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e5      	bne.n	80032d4 <Endpoint_Write_8+0x24>
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20000524 	.word	0x20000524

0800331c <Endpoint_Read_8>:

uint8_t Endpoint_Read_8(void) {
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003322:	4b19      	ldr	r3, [pc, #100]	; (8003388 <Endpoint_Read_8+0x6c>)
 8003324:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003328:	461a      	mov	r2, r3
 800332a:	232c      	movs	r3, #44	; 0x2c
 800332c:	fb02 f303 	mul.w	r3, r2, r3
 8003330:	4a15      	ldr	r2, [pc, #84]	; (8003388 <Endpoint_Read_8+0x6c>)
 8003332:	4413      	add	r3, r2
 8003334:	3304      	adds	r3, #4
 8003336:	603b      	str	r3, [r7, #0]
	bool Success = false;
 8003338:	2300      	movs	r3, #0
 800333a:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	71bb      	strb	r3, [r7, #6]
	 do
	  {
		if(EndPoint->OutBytesAvailable > 0)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d012      	beq.n	800336e <Endpoint_Read_8+0x52>
		{
          data = EndPoint->OutBuffer[EndPoint->OutOffset];
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4413      	add	r3, r2
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	71bb      	strb	r3, [r7, #6]
          EndPoint->OutOffset++;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	60da      	str	r2, [r3, #12]
          EndPoint->OutBytesAvailable--;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	1e5a      	subs	r2, r3, #1
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	609a      	str	r2, [r3, #8]
		  Success = true;
 800336a:	2301      	movs	r3, #1
 800336c:	71fb      	strb	r3, [r7, #7]
		}
	  }while(!Success);
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	f083 0301 	eor.w	r3, r3, #1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e2      	bne.n	8003340 <Endpoint_Read_8+0x24>
	 return data;
 800337a:	79bb      	ldrb	r3, [r7, #6]
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	20000524 	.word	0x20000524

0800338c <Endpoint_Write_32_LE>:

void Endpoint_Write_32_LE(const uint32_t Data) {
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 8003394:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <Endpoint_Write_32_LE+0x68>)
 8003396:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800339a:	461a      	mov	r2, r3
 800339c:	232c      	movs	r3, #44	; 0x2c
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <Endpoint_Write_32_LE+0x68>)
 80033a4:	4413      	add	r3, r2
 80033a6:	3304      	adds	r3, #4
 80033a8:	60bb      	str	r3, [r7, #8]
	bool Success = false;
 80033aa:	2300      	movs	r3, #0
 80033ac:	73fb      	strb	r3, [r7, #15]

	do {
		if(EndPoint->InBytesAvailable < (EndPoint->InBufferLength - 3)) {
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	3b03      	subs	r3, #3
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d20d      	bcs.n	80033d8 <Endpoint_Write_32_LE+0x4c>
			*(uint32_t*)(EndPoint->InBuffer + EndPoint->InBytesAvailable) = Data;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	69da      	ldr	r2, [r3, #28]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	4413      	add	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	601a      	str	r2, [r3, #0]
			EndPoint->InBytesAvailable+=4;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	1d1a      	adds	r2, r3, #4
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	619a      	str	r2, [r3, #24]

			Success = true;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
		}
	}while(!Success);
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	f083 0301 	eor.w	r3, r3, #1
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e4      	bne.n	80033ae <Endpoint_Write_32_LE+0x22>
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000524 	.word	0x20000524

080033f8 <Endpoint_Read_32_LE>:

uint32_t Endpoint_Read_32_LE(void) {
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
	USBD_Endpoint_t *EndPoint = &device.Endpoints[device.CurrentEndpoint];
 80033fe:	4b19      	ldr	r3, [pc, #100]	; (8003464 <Endpoint_Read_32_LE+0x6c>)
 8003400:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003404:	461a      	mov	r2, r3
 8003406:	232c      	movs	r3, #44	; 0x2c
 8003408:	fb02 f303 	mul.w	r3, r2, r3
 800340c:	4a15      	ldr	r2, [pc, #84]	; (8003464 <Endpoint_Read_32_LE+0x6c>)
 800340e:	4413      	add	r3, r2
 8003410:	3304      	adds	r3, #4
 8003412:	607b      	str	r3, [r7, #4]
	bool Success = false;
 8003414:	2300      	movs	r3, #0
 8003416:	73fb      	strb	r3, [r7, #15]
	uint32_t data = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	60bb      	str	r3, [r7, #8]

	do {
		if(EndPoint->OutBytesAvailable > 3) {
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b03      	cmp	r3, #3
 8003422:	d912      	bls.n	800344a <Endpoint_Read_32_LE+0x52>
			data = *(uint32_t*)(EndPoint->OutBuffer + EndPoint->OutOffset);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4413      	add	r3, r2
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60bb      	str	r3, [r7, #8]
			EndPoint->OutOffset+=4;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	1d1a      	adds	r2, r3, #4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	60da      	str	r2, [r3, #12]
			EndPoint->OutBytesAvailable-=4;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	1f1a      	subs	r2, r3, #4
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	609a      	str	r2, [r3, #8]

			Success = true;
 8003446:	2301      	movs	r3, #1
 8003448:	73fb      	strb	r3, [r7, #15]
		}
	} while(!Success);
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	f083 0301 	eor.w	r3, r3, #1
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e2      	bne.n	800341c <Endpoint_Read_32_LE+0x24>
	return data;
 8003456:	68bb      	ldr	r3, [r7, #8]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	20000524 	.word	0x20000524

08003468 <Endpoint_ConfigureEndpointTable>:

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
			                                     const uint8_t Entries) {
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t Number;
	for (i=0;i<Entries;i++) {
 8003474:	2300      	movs	r3, #0
 8003476:	73fb      	strb	r3, [r7, #15]
 8003478:	e092      	b.n	80035a0 <Endpoint_ConfigureEndpointTable+0x138>
		Number = Table[i].Address & ENDPOINT_EPNUM_MASK;
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	4613      	mov	r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	4413      	add	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	461a      	mov	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4413      	add	r3, r2
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	73bb      	strb	r3, [r7, #14]
		/* Configure endpoint in device controller driver */
		if (device.Driver->EndpointConfigure(Table[i].Address, (XMC_USBD_ENDPOINT_TYPE_t)Table[i].Type, Table[i].Size) != XMC_USBD_STATUS_OK)
 8003492:	4b48      	ldr	r3, [pc, #288]	; (80035b4 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69dc      	ldr	r4, [r3, #28]
 8003498:	7bfa      	ldrb	r2, [r7, #15]
 800349a:	4613      	mov	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	461a      	mov	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4413      	add	r3, r2
 80034a8:	7818      	ldrb	r0, [r3, #0]
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	4613      	mov	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4413      	add	r3, r2
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	461a      	mov	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	7919      	ldrb	r1, [r3, #4]
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	4613      	mov	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	4413      	add	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	461a      	mov	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4413      	add	r3, r2
 80034cc:	885b      	ldrh	r3, [r3, #2]
 80034ce:	461a      	mov	r2, r3
 80034d0:	47a0      	blx	r4
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <Endpoint_ConfigureEndpointTable+0x74>
			return false;
 80034d8:	2300      	movs	r3, #0
 80034da:	e067      	b.n	80035ac <Endpoint_ConfigureEndpointTable+0x144>
		/* Set device core values */
		device.Endpoints[Number].Address = Table[i].Address;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	461a      	mov	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	441a      	add	r2, r3
 80034ec:	7bbb      	ldrb	r3, [r7, #14]
 80034ee:	7810      	ldrb	r0, [r2, #0]
 80034f0:	4a30      	ldr	r2, [pc, #192]	; (80035b4 <Endpoint_ConfigureEndpointTable+0x14c>)
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	3304      	adds	r3, #4
 80034fc:	4602      	mov	r2, r0
 80034fe:	701a      	strb	r2, [r3, #0]
		device.Endpoints[Number].MaxPacketSize = Table[i].Size;
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	4613      	mov	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	461a      	mov	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4413      	add	r3, r2
 8003510:	885a      	ldrh	r2, [r3, #2]
 8003512:	7bbb      	ldrb	r3, [r7, #14]
 8003514:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003518:	b2d1      	uxtb	r1, r2
 800351a:	4a26      	ldr	r2, [pc, #152]	; (80035b4 <Endpoint_ConfigureEndpointTable+0x14c>)
 800351c:	202c      	movs	r0, #44	; 0x2c
 800351e:	fb00 f303 	mul.w	r3, r0, r3
 8003522:	441a      	add	r2, r3
 8003524:	8913      	ldrh	r3, [r2, #8]
 8003526:	f361 138c 	bfi	r3, r1, #6, #7
 800352a:	8113      	strh	r3, [r2, #8]
		device.Endpoints[Number].IsConfigured = 1;
 800352c:	7bbb      	ldrb	r3, [r7, #14]
 800352e:	4a21      	ldr	r2, [pc, #132]	; (80035b4 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003530:	212c      	movs	r1, #44	; 0x2c
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	441a      	add	r2, r3
 8003538:	7a13      	ldrb	r3, [r2, #8]
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	7213      	strb	r3, [r2, #8]
		device.Endpoints[Number].IsEnabled = 1;
 8003540:	7bbb      	ldrb	r3, [r7, #14]
 8003542:	4a1c      	ldr	r2, [pc, #112]	; (80035b4 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003544:	212c      	movs	r1, #44	; 0x2c
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	441a      	add	r2, r3
 800354c:	7a13      	ldrb	r3, [r2, #8]
 800354e:	f043 0302 	orr.w	r3, r3, #2
 8003552:	7213      	strb	r3, [r2, #8]
		/* Start read for out endpoints */
		if (!(Table[i].Address & ENDPOINT_DIR_MASK))
 8003554:	7bfa      	ldrb	r2, [r7, #15]
 8003556:	4613      	mov	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	461a      	mov	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4413      	add	r3, r2
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	b25b      	sxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	db16      	blt.n	800359a <Endpoint_ConfigureEndpointTable+0x132>
			device.Driver->EndpointReadStart(Table[i].Address,
 800356c:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <Endpoint_ConfigureEndpointTable+0x14c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003572:	7bfa      	ldrb	r2, [r7, #15]
 8003574:	4613      	mov	r3, r2
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4413      	add	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	461a      	mov	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	781a      	ldrb	r2, [r3, #0]
 8003584:	7bbb      	ldrb	r3, [r7, #14]
 8003586:	490b      	ldr	r1, [pc, #44]	; (80035b4 <Endpoint_ConfigureEndpointTable+0x14c>)
 8003588:	202c      	movs	r0, #44	; 0x2c
 800358a:	fb00 f303 	mul.w	r3, r0, r3
 800358e:	440b      	add	r3, r1
 8003590:	3318      	adds	r3, #24
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	47a0      	blx	r4
	for (i=0;i<Entries;i++) {
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	3301      	adds	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	f4ff af68 	bcc.w	800347a <Endpoint_ConfigureEndpointTable+0x12>
					device.Endpoints[Number].OutBufferLength);
	}
	return true;
 80035aa:	2301      	movs	r3, #1
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd90      	pop	{r4, r7, pc}
 80035b4:	20000524 	.word	0x20000524

080035b8 <Endpoint_Write_Stream_LE>:

#if defined(USB_CAN_BE_DEVICE)

#include "EndpointStream_XMC4000.h"

uint8_t Endpoint_Write_Stream_LE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed)  {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	460b      	mov	r3, r1
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80035c6:	4b3f      	ldr	r3, [pc, #252]	; (80036c4 <Endpoint_Write_Stream_LE+0x10c>)
 80035c8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80035cc:	461a      	mov	r2, r3
 80035ce:	232c      	movs	r3, #44	; 0x2c
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	4a3b      	ldr	r2, [pc, #236]	; (80036c4 <Endpoint_Write_Stream_LE+0x10c>)
 80035d6:	4413      	add	r3, r2
 80035d8:	3304      	adds	r3, #4
 80035da:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;
	uint16_t prev_length = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	83bb      	strh	r3, [r7, #28]
	if (BytesProcessed!=NULL) {
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d052      	beq.n	8003694 <Endpoint_Write_Stream_LE+0xdc>
		Length -= *BytesProcessed;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	897a      	ldrh	r2, [r7, #10]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 80035fe:	e049      	b.n	8003694 <Endpoint_Write_Stream_LE+0xdc>
		if (ep->InInUse)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d000      	beq.n	8003610 <Endpoint_Write_Stream_LE+0x58>
			continue;
 800360e:	e041      	b.n	8003694 <Endpoint_Write_Stream_LE+0xdc>
		if (Endpoint_IsReadWriteAllowed()) {
 8003610:	f7ff fe1c 	bl	800324c <Endpoint_IsReadWriteAllowed>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d029      	beq.n	800366e <Endpoint_Write_Stream_LE+0xb6>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	6a1a      	ldr	r2, [r3, #32]
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	1ad2      	subs	r2, r2, r3
 8003624:	897b      	ldrh	r3, [r7, #10]
 8003626:	4293      	cmp	r3, r2
 8003628:	bf28      	it	cs
 800362a:	4613      	movcs	r3, r2
 800362c:	82fb      	strh	r3, [r7, #22]
			MEMCPY((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable), (void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	461a      	mov	r2, r3
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	4413      	add	r3, r2
 800363a:	4618      	mov	r0, r3
 800363c:	8bfa      	ldrh	r2, [r7, #30]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4413      	add	r3, r2
 8003642:	4619      	mov	r1, r3
 8003644:	8afb      	ldrh	r3, [r7, #22]
 8003646:	461a      	mov	r2, r3
 8003648:	f7ff fc48 	bl	8002edc <thumb2_memcpy>
			ep->InBytesAvailable += Bytes;
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	699a      	ldr	r2, [r3, #24]
 8003650:	8afb      	ldrh	r3, [r7, #22]
 8003652:	441a      	add	r2, r3
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 8003658:	8bfa      	ldrh	r2, [r7, #30]
 800365a:	8afb      	ldrh	r3, [r7, #22]
 800365c:	4413      	add	r3, r2
 800365e:	83fb      	strh	r3, [r7, #30]
			prev_length = Length;
 8003660:	897b      	ldrh	r3, [r7, #10]
 8003662:	83bb      	strh	r3, [r7, #28]
			Length -= Bytes;
 8003664:	897a      	ldrh	r2, [r7, #10]
 8003666:	8afb      	ldrh	r3, [r7, #22]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	817b      	strh	r3, [r7, #10]
 800366c:	e012      	b.n	8003694 <Endpoint_Write_Stream_LE+0xdc>
		}
		else {
			Endpoint_ClearIN();
 800366e:	f7ff fd75 	bl	800315c <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d004      	beq.n	8003682 <Endpoint_Write_Stream_LE+0xca>
				*BytesProcessed = BytesTransfered;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	8bfa      	ldrh	r2, [r7, #30]
 800367c:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 800367e:	2305      	movs	r3, #5
 8003680:	e01b      	b.n	80036ba <Endpoint_Write_Stream_LE+0x102>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003682:	f7ff fc8d 	bl	8002fa0 <Endpoint_WaitUntilReady>
 8003686:	4603      	mov	r3, r0
 8003688:	757b      	strb	r3, [r7, #21]
 800368a:	7d7b      	ldrb	r3, [r7, #21]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <Endpoint_Write_Stream_LE+0xdc>
				return ErrorCode;
 8003690:	7d7b      	ldrb	r3, [r7, #21]
 8003692:	e012      	b.n	80036ba <Endpoint_Write_Stream_LE+0x102>
	while (Length) {
 8003694:	897b      	ldrh	r3, [r7, #10]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1b2      	bne.n	8003600 <Endpoint_Write_Stream_LE+0x48>


		}
	}
	
	if((Length == 0) && (prev_length == ep->MaxPacketSize))
 800369a:	897b      	ldrh	r3, [r7, #10]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10b      	bne.n	80036b8 <Endpoint_Write_Stream_LE+0x100>
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	889b      	ldrh	r3, [r3, #4]
 80036a4:	f3c3 1386 	ubfx	r3, r3, #6, #7
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	8bba      	ldrh	r2, [r7, #28]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d102      	bne.n	80036b8 <Endpoint_Write_Stream_LE+0x100>
	{
	   zlp_flag = true;
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <Endpoint_Write_Stream_LE+0x110>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	701a      	strb	r2, [r3, #0]
	}
	return ENDPOINT_RWSTREAM_NoError;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000524 	.word	0x20000524
 80036c8:	20000520 	.word	0x20000520

080036cc <SwapCopy>:

void SwapCopy(void *const Dest, const void *const Src,uint32_t Length) {
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
	while(i<Length) {
 80036dc:	e00e      	b.n	80036fc <SwapCopy+0x30>
		*(uint8_t*)((uint32_t)Dest + (Length - 1 - i)) = *(uint8_t*)((uint32_t)Src + i);
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	4413      	add	r3, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	1ad2      	subs	r2, r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	3b01      	subs	r3, #1
 80036f2:	780a      	ldrb	r2, [r1, #0]
 80036f4:	701a      	strb	r2, [r3, #0]
		i++;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	3301      	adds	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
	while(i<Length) {
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	d3ec      	bcc.n	80036de <SwapCopy+0x12>
	}
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <Endpoint_Write_Stream_BE>:
uint8_t	Endpoint_Write_Stream_BE (const void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	460b      	mov	r3, r1
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003722:	4b35      	ldr	r3, [pc, #212]	; (80037f8 <Endpoint_Write_Stream_BE+0xe4>)
 8003724:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003728:	461a      	mov	r2, r3
 800372a:	232c      	movs	r3, #44	; 0x2c
 800372c:	fb02 f303 	mul.w	r3, r2, r3
 8003730:	4a31      	ldr	r2, [pc, #196]	; (80037f8 <Endpoint_Write_Stream_BE+0xe4>)
 8003732:	4413      	add	r3, r2
 8003734:	3304      	adds	r3, #4
 8003736:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 800373c:	2300      	movs	r3, #0
 800373e:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d050      	beq.n	80037e8 <Endpoint_Write_Stream_BE+0xd4>
		Length -= *BytesProcessed;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	897a      	ldrh	r2, [r7, #10]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 8003756:	e047      	b.n	80037e8 <Endpoint_Write_Stream_BE+0xd4>
		if (ep->InInUse)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d000      	beq.n	8003768 <Endpoint_Write_Stream_BE+0x54>
			continue;
 8003766:	e03f      	b.n	80037e8 <Endpoint_Write_Stream_BE+0xd4>
		if (Endpoint_IsReadWriteAllowed()) {
 8003768:	f7ff fd70 	bl	800324c <Endpoint_IsReadWriteAllowed>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d027      	beq.n	80037c2 <Endpoint_Write_Stream_BE+0xae>
			Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	6a1a      	ldr	r2, [r3, #32]
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	1ad2      	subs	r2, r2, r3
 800377c:	897b      	ldrh	r3, [r7, #10]
 800377e:	4293      	cmp	r3, r2
 8003780:	bf28      	it	cs
 8003782:	4613      	movcs	r3, r2
 8003784:	82fb      	strh	r3, [r7, #22]
			SwapCopy((void *)((uint32_t)ep->InBuffer + (uint32_t)ep->InBytesAvailable),(void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), Bytes);
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	461a      	mov	r2, r3
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	4413      	add	r3, r2
 8003792:	4618      	mov	r0, r3
 8003794:	8bfa      	ldrh	r2, [r7, #30]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4413      	add	r3, r2
 800379a:	4619      	mov	r1, r3
 800379c:	8afb      	ldrh	r3, [r7, #22]
 800379e:	461a      	mov	r2, r3
 80037a0:	f7ff ff94 	bl	80036cc <SwapCopy>
			ep->InBytesAvailable += Bytes;
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	699a      	ldr	r2, [r3, #24]
 80037a8:	8afb      	ldrh	r3, [r7, #22]
 80037aa:	441a      	add	r2, r3
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	619a      	str	r2, [r3, #24]
			BytesTransfered += Bytes;
 80037b0:	8bfa      	ldrh	r2, [r7, #30]
 80037b2:	8afb      	ldrh	r3, [r7, #22]
 80037b4:	4413      	add	r3, r2
 80037b6:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 80037b8:	897a      	ldrh	r2, [r7, #10]
 80037ba:	8afb      	ldrh	r3, [r7, #22]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	817b      	strh	r3, [r7, #10]
 80037c0:	e012      	b.n	80037e8 <Endpoint_Write_Stream_BE+0xd4>
		}
		else {
			Endpoint_ClearIN();
 80037c2:	f7ff fccb 	bl	800315c <Endpoint_ClearIN>
			if (BytesProcessed!=NULL) {
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d004      	beq.n	80037d6 <Endpoint_Write_Stream_BE+0xc2>
				*BytesProcessed = BytesTransfered;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	8bfa      	ldrh	r2, [r7, #30]
 80037d0:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 80037d2:	2305      	movs	r3, #5
 80037d4:	e00c      	b.n	80037f0 <Endpoint_Write_Stream_BE+0xdc>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 80037d6:	f7ff fbe3 	bl	8002fa0 <Endpoint_WaitUntilReady>
 80037da:	4603      	mov	r3, r0
 80037dc:	757b      	strb	r3, [r7, #21]
 80037de:	7d7b      	ldrb	r3, [r7, #21]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <Endpoint_Write_Stream_BE+0xd4>
				return ErrorCode;
 80037e4:	7d7b      	ldrb	r3, [r7, #21]
 80037e6:	e003      	b.n	80037f0 <Endpoint_Write_Stream_BE+0xdc>
	while (Length) {
 80037e8:	897b      	ldrh	r3, [r7, #10]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1b4      	bne.n	8003758 <Endpoint_Write_Stream_BE+0x44>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20000524 	.word	0x20000524

080037fc <Endpoint_Read_Stream_LE>:

uint8_t	Endpoint_Read_Stream_LE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	460b      	mov	r3, r1
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 800380a:	4b37      	ldr	r3, [pc, #220]	; (80038e8 <Endpoint_Read_Stream_LE+0xec>)
 800380c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003810:	461a      	mov	r2, r3
 8003812:	232c      	movs	r3, #44	; 0x2c
 8003814:	fb02 f303 	mul.w	r3, r2, r3
 8003818:	4a33      	ldr	r2, [pc, #204]	; (80038e8 <Endpoint_Read_Stream_LE+0xec>)
 800381a:	4413      	add	r3, r2
 800381c:	3304      	adds	r3, #4
 800381e:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d053      	beq.n	80038d6 <Endpoint_Read_Stream_LE+0xda>
		Length -= *BytesProcessed;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	897a      	ldrh	r2, [r7, #10]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 800383e:	e04a      	b.n	80038d6 <Endpoint_Read_Stream_LE+0xda>
		if (ep->OutInUse)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d000      	beq.n	8003850 <Endpoint_Read_Stream_LE+0x54>
			continue;
 800384e:	e042      	b.n	80038d6 <Endpoint_Read_Stream_LE+0xda>
		if (Endpoint_IsReadWriteAllowed()) {
 8003850:	f7ff fcfc 	bl	800324c <Endpoint_IsReadWriteAllowed>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d02a      	beq.n	80038b0 <Endpoint_Read_Stream_LE+0xb4>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	897b      	ldrh	r3, [r7, #10]
 8003860:	4293      	cmp	r3, r2
 8003862:	bf28      	it	cs
 8003864:	4613      	movcs	r3, r2
 8003866:	82fb      	strh	r3, [r7, #22]
			MEMCPY((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8003868:	8bfa      	ldrh	r2, [r7, #30]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	4618      	mov	r0, r3
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	461a      	mov	r2, r3
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	4413      	add	r3, r2
 800387c:	4619      	mov	r1, r3
 800387e:	8afb      	ldrh	r3, [r7, #22]
 8003880:	461a      	mov	r2, r3
 8003882:	f7ff fb2b 	bl	8002edc <thumb2_memcpy>
			ep->OutBytesAvailable -= Bytes;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	8afb      	ldrh	r3, [r7, #22]
 800388c:	1ad2      	subs	r2, r2, r3
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	609a      	str	r2, [r3, #8]
			ep->OutOffset += Bytes;
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	8afb      	ldrh	r3, [r7, #22]
 8003898:	441a      	add	r2, r3
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	60da      	str	r2, [r3, #12]
			BytesTransfered += Bytes;
 800389e:	8bfa      	ldrh	r2, [r7, #30]
 80038a0:	8afb      	ldrh	r3, [r7, #22]
 80038a2:	4413      	add	r3, r2
 80038a4:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 80038a6:	897a      	ldrh	r2, [r7, #10]
 80038a8:	8afb      	ldrh	r3, [r7, #22]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	817b      	strh	r3, [r7, #10]
 80038ae:	e012      	b.n	80038d6 <Endpoint_Read_Stream_LE+0xda>
		}
		else {
			Endpoint_ClearOUT();
 80038b0:	f7ff fc08 	bl	80030c4 <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <Endpoint_Read_Stream_LE+0xc8>
				*BytesProcessed = BytesTransfered;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8bfa      	ldrh	r2, [r7, #30]
 80038be:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 80038c0:	2305      	movs	r3, #5
 80038c2:	e00c      	b.n	80038de <Endpoint_Read_Stream_LE+0xe2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 80038c4:	f7ff fb6c 	bl	8002fa0 <Endpoint_WaitUntilReady>
 80038c8:	4603      	mov	r3, r0
 80038ca:	757b      	strb	r3, [r7, #21]
 80038cc:	7d7b      	ldrb	r3, [r7, #21]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <Endpoint_Read_Stream_LE+0xda>
				return ErrorCode;
 80038d2:	7d7b      	ldrb	r3, [r7, #21]
 80038d4:	e003      	b.n	80038de <Endpoint_Read_Stream_LE+0xe2>
	while (Length) {
 80038d6:	897b      	ldrh	r3, [r7, #10]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1b1      	bne.n	8003840 <Endpoint_Read_Stream_LE+0x44>
			}

		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000524 	.word	0x20000524

080038ec <Endpoint_Read_Stream_BE>:

uint8_t	Endpoint_Read_Stream_BE (void *const Buffer, uint16_t Length, uint16_t *const BytesProcessed) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	460b      	mov	r3, r1
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	817b      	strh	r3, [r7, #10]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 80038fa:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <Endpoint_Read_Stream_BE+0xec>)
 80038fc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003900:	461a      	mov	r2, r3
 8003902:	232c      	movs	r3, #44	; 0x2c
 8003904:	fb02 f303 	mul.w	r3, r2, r3
 8003908:	4a33      	ldr	r2, [pc, #204]	; (80039d8 <Endpoint_Read_Stream_BE+0xec>)
 800390a:	4413      	add	r3, r2
 800390c:	3304      	adds	r3, #4
 800390e:	61bb      	str	r3, [r7, #24]
	uint16_t Bytes = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	82fb      	strh	r3, [r7, #22]
	uint16_t BytesTransfered = 0;
 8003914:	2300      	movs	r3, #0
 8003916:	83fb      	strh	r3, [r7, #30]
	uint8_t ErrorCode;

	if (BytesProcessed!=NULL) {
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d053      	beq.n	80039c6 <Endpoint_Read_Stream_BE+0xda>
		Length -= *BytesProcessed;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	897a      	ldrh	r2, [r7, #10]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	817b      	strh	r3, [r7, #10]
		BytesTransfered = *BytesProcessed;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	83fb      	strh	r3, [r7, #30]
	}

	while (Length) {
 800392e:	e04a      	b.n	80039c6 <Endpoint_Read_Stream_BE+0xda>
		if (ep->InInUse)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d000      	beq.n	8003940 <Endpoint_Read_Stream_BE+0x54>
			continue;
 800393e:	e042      	b.n	80039c6 <Endpoint_Read_Stream_BE+0xda>
		if (Endpoint_IsReadWriteAllowed()) {
 8003940:	f7ff fc84 	bl	800324c <Endpoint_IsReadWriteAllowed>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d02a      	beq.n	80039a0 <Endpoint_Read_Stream_BE+0xb4>
			Bytes = ep->OutBytesAvailable  > Length ? Length : ep->OutBytesAvailable;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	897b      	ldrh	r3, [r7, #10]
 8003950:	4293      	cmp	r3, r2
 8003952:	bf28      	it	cs
 8003954:	4613      	movcs	r3, r2
 8003956:	82fb      	strh	r3, [r7, #22]
			SwapCopy((void *)((uint32_t)Buffer + (uint32_t)BytesTransfered), (void *)((uint32_t)ep->OutBuffer + (uint32_t)ep->OutOffset), Bytes);
 8003958:	8bfa      	ldrh	r2, [r7, #30]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	4618      	mov	r0, r3
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	461a      	mov	r2, r3
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	4413      	add	r3, r2
 800396c:	4619      	mov	r1, r3
 800396e:	8afb      	ldrh	r3, [r7, #22]
 8003970:	461a      	mov	r2, r3
 8003972:	f7ff feab 	bl	80036cc <SwapCopy>
			ep->OutBytesAvailable -= Bytes;
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	8afb      	ldrh	r3, [r7, #22]
 800397c:	1ad2      	subs	r2, r2, r3
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	609a      	str	r2, [r3, #8]
			ep->OutOffset += Bytes;
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	8afb      	ldrh	r3, [r7, #22]
 8003988:	441a      	add	r2, r3
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	60da      	str	r2, [r3, #12]
			BytesTransfered += Bytes;
 800398e:	8bfa      	ldrh	r2, [r7, #30]
 8003990:	8afb      	ldrh	r3, [r7, #22]
 8003992:	4413      	add	r3, r2
 8003994:	83fb      	strh	r3, [r7, #30]
			Length -= Bytes;
 8003996:	897a      	ldrh	r2, [r7, #10]
 8003998:	8afb      	ldrh	r3, [r7, #22]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	817b      	strh	r3, [r7, #10]
 800399e:	e012      	b.n	80039c6 <Endpoint_Read_Stream_BE+0xda>
		}
		else {
			Endpoint_ClearOUT();
 80039a0:	f7ff fb90 	bl	80030c4 <Endpoint_ClearOUT>
			if (BytesProcessed!=NULL) {
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d004      	beq.n	80039b4 <Endpoint_Read_Stream_BE+0xc8>
				*BytesProcessed = BytesTransfered;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8bfa      	ldrh	r2, [r7, #30]
 80039ae:	801a      	strh	r2, [r3, #0]
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
 80039b0:	2305      	movs	r3, #5
 80039b2:	e00c      	b.n	80039ce <Endpoint_Read_Stream_BE+0xe2>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 80039b4:	f7ff faf4 	bl	8002fa0 <Endpoint_WaitUntilReady>
 80039b8:	4603      	mov	r3, r0
 80039ba:	757b      	strb	r3, [r7, #21]
 80039bc:	7d7b      	ldrb	r3, [r7, #21]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <Endpoint_Read_Stream_BE+0xda>
				return ErrorCode;
 80039c2:	7d7b      	ldrb	r3, [r7, #21]
 80039c4:	e003      	b.n	80039ce <Endpoint_Read_Stream_BE+0xe2>
	while (Length) {
 80039c6:	897b      	ldrh	r3, [r7, #10]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1b1      	bne.n	8003930 <Endpoint_Read_Stream_BE+0x44>
			}


		}
	}
	return ENDPOINT_RWSTREAM_NoError;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3720      	adds	r7, #32
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000524 	.word	0x20000524

080039dc <Endpoint_Write_Control_Stream_LE>:

uint8_t	Endpoint_Write_Control_Stream_LE (const void *const Buffer, uint16_t Length) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
 80039e8:	4b17      	ldr	r3, [pc, #92]	; (8003a48 <Endpoint_Write_Control_Stream_LE+0x6c>)
 80039ea:	60bb      	str	r3, [r7, #8]
	uint16_t Bytes;

	while (Length) {
 80039ec:	e024      	b.n	8003a38 <Endpoint_Write_Control_Stream_LE+0x5c>
		if (!EndPoint->InInUse) {
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d11d      	bne.n	8003a38 <Endpoint_Write_Control_Stream_LE+0x5c>
			if (EndPoint->InBufferLength > Length) {
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	6a1a      	ldr	r2, [r3, #32]
 8003a00:	887b      	ldrh	r3, [r7, #2]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d902      	bls.n	8003a0c <Endpoint_Write_Control_Stream_LE+0x30>
				Bytes = Length;
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	81fb      	strh	r3, [r7, #14]
 8003a0a:	e002      	b.n	8003a12 <Endpoint_Write_Control_Stream_LE+0x36>
			} else {
				Bytes = EndPoint->InBufferLength;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	81fb      	strh	r3, [r7, #14]
			}
			MEMCPY(EndPoint->InBuffer,Buffer,Bytes);
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	89fa      	ldrh	r2, [r7, #14]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff fa5e 	bl	8002edc <thumb2_memcpy>
			EndPoint->InBytesAvailable += Bytes;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	89fb      	ldrh	r3, [r7, #14]
 8003a26:	441a      	add	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	619a      	str	r2, [r3, #24]
			Length -= Bytes;
 8003a2c:	887a      	ldrh	r2, [r7, #2]
 8003a2e:	89fb      	ldrh	r3, [r7, #14]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	807b      	strh	r3, [r7, #2]

			Endpoint_ClearIN();
 8003a34:	f7ff fb92 	bl	800315c <Endpoint_ClearIN>
	while (Length) {
 8003a38:	887b      	ldrh	r3, [r7, #2]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1d7      	bne.n	80039ee <Endpoint_Write_Control_Stream_LE+0x12>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000528 	.word	0x20000528

08003a4c <Endpoint_Write_Control_Stream_BE>:

uint8_t	Endpoint_Write_Control_Stream_BE (const void *const Buffer, uint16_t Length) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	807b      	strh	r3, [r7, #2]
	return Endpoint_Write_Control_Stream_LE(Buffer,Length);
 8003a58:	887b      	ldrh	r3, [r7, #2]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff ffbd 	bl	80039dc <Endpoint_Write_Control_Stream_LE>
 8003a62:	4603      	mov	r3, r0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <Endpoint_Read_Control_Stream_LE>:

uint8_t	Endpoint_Read_Control_Stream_LE (void *const Buffer, uint16_t Length) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
	USBD_Endpoint_t *EndPoint = &device.Endpoints[0];
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <Endpoint_Read_Control_Stream_LE+0x64>)
 8003a7a:	60fb      	str	r3, [r7, #12]
	uint16_t Bytes;

	while (Length) {
 8003a7c:	e020      	b.n	8003ac0 <Endpoint_Read_Control_Stream_LE+0x54>
		if (EndPoint->IsOutRecieved) {
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d019      	beq.n	8003ac0 <Endpoint_Read_Control_Stream_LE+0x54>
			Bytes = EndPoint->OutBytesAvailable > Length
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	887b      	ldrh	r3, [r7, #2]
					? Length : EndPoint->OutBytesAvailable;
 8003a92:	4293      	cmp	r3, r2
 8003a94:	bf28      	it	cs
 8003a96:	4613      	movcs	r3, r2
			Bytes = EndPoint->OutBytesAvailable > Length
 8003a98:	817b      	strh	r3, [r7, #10]
			MEMCPY(Buffer,EndPoint->OutBuffer,Bytes);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	897a      	ldrh	r2, [r7, #10]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff fa1a 	bl	8002edc <thumb2_memcpy>
			EndPoint->OutBytesAvailable -= Bytes;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	897b      	ldrh	r3, [r7, #10]
 8003aae:	1ad2      	subs	r2, r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	609a      	str	r2, [r3, #8]
			Length -= Bytes;
 8003ab4:	887a      	ldrh	r2, [r7, #2]
 8003ab6:	897b      	ldrh	r3, [r7, #10]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	807b      	strh	r3, [r7, #2]

			Endpoint_ClearOUT();
 8003abc:	f7ff fb02 	bl	80030c4 <Endpoint_ClearOUT>
	while (Length) {
 8003ac0:	887b      	ldrh	r3, [r7, #2]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1db      	bne.n	8003a7e <Endpoint_Read_Control_Stream_LE+0x12>
		}
	}
	return ENDPOINT_RWCSTREAM_NoError;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000528 	.word	0x20000528

08003ad4 <Endpoint_Read_Control_Stream_BE>:

uint8_t	Endpoint_Read_Control_Stream_BE (void *const Buffer, uint16_t Length) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]
	return Endpoint_Read_Control_Stream_LE(Buffer,Length);
 8003ae0:	887b      	ldrh	r3, [r7, #2]
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ffc1 	bl	8003a6c <Endpoint_Read_Control_Stream_LE>
 8003aea:	4603      	mov	r3, r0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <Endpoint_Null_Stream>:

uint8_t Endpoint_Null_Stream(uint16_t Length,
								 uint16_t* const BytesProcessed) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	6039      	str	r1, [r7, #0]
 8003afe:	80fb      	strh	r3, [r7, #6]
	USBD_Endpoint_t* ep = &device.Endpoints[device.CurrentEndpoint];
 8003b00:	4b32      	ldr	r3, [pc, #200]	; (8003bcc <Endpoint_Null_Stream+0xd8>)
 8003b02:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003b06:	461a      	mov	r2, r3
 8003b08:	232c      	movs	r3, #44	; 0x2c
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	4a2f      	ldr	r2, [pc, #188]	; (8003bcc <Endpoint_Null_Stream+0xd8>)
 8003b10:	4413      	add	r3, r2
 8003b12:	3304      	adds	r3, #4
 8003b14:	613b      	str	r3, [r7, #16]
		uint16_t Bytes = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	81fb      	strh	r3, [r7, #14]
		uint16_t BytesTransfered = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	82fb      	strh	r3, [r7, #22]
		uint8_t ErrorCode;

		if (BytesProcessed!=NULL) {
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d04b      	beq.n	8003bbc <Endpoint_Null_Stream+0xc8>
			Length -= *BytesProcessed;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	88fa      	ldrh	r2, [r7, #6]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	80fb      	strh	r3, [r7, #6]
			BytesTransfered = *BytesProcessed;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	82fb      	strh	r3, [r7, #22]
		}

		while (Length) {
 8003b34:	e042      	b.n	8003bbc <Endpoint_Null_Stream+0xc8>
			if (ep->InInUse)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d000      	beq.n	8003b46 <Endpoint_Null_Stream+0x52>
				continue;
 8003b44:	e03a      	b.n	8003bbc <Endpoint_Null_Stream+0xc8>
			if (Endpoint_IsReadWriteAllowed()) {
 8003b46:	f7ff fb81 	bl	800324c <Endpoint_IsReadWriteAllowed>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d022      	beq.n	8003b96 <Endpoint_Null_Stream+0xa2>
				Bytes = ep->InBufferLength - ep->InBytesAvailable  > Length ? Length : ep->InBufferLength - ep->InBytesAvailable;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	1ad2      	subs	r2, r2, r3
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	bf28      	it	cs
 8003b60:	4613      	movcs	r3, r2
 8003b62:	81fb      	strh	r3, [r7, #14]
				memset(ep->InBuffer + ep->InBytesAvailable,0x0,Bytes);
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	89fa      	ldrh	r2, [r7, #14]
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f002 ffb0 	bl	8006ad8 <memset>
				ep->InBytesAvailable += Bytes;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	699a      	ldr	r2, [r3, #24]
 8003b7c:	89fb      	ldrh	r3, [r7, #14]
 8003b7e:	441a      	add	r2, r3
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	619a      	str	r2, [r3, #24]
				BytesTransfered += Bytes;
 8003b84:	8afa      	ldrh	r2, [r7, #22]
 8003b86:	89fb      	ldrh	r3, [r7, #14]
 8003b88:	4413      	add	r3, r2
 8003b8a:	82fb      	strh	r3, [r7, #22]
				Length -= Bytes;
 8003b8c:	88fa      	ldrh	r2, [r7, #6]
 8003b8e:	89fb      	ldrh	r3, [r7, #14]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	80fb      	strh	r3, [r7, #6]
 8003b94:	e012      	b.n	8003bbc <Endpoint_Null_Stream+0xc8>
			}
			else {
				Endpoint_ClearIN();
 8003b96:	f7ff fae1 	bl	800315c <Endpoint_ClearIN>
				if (BytesProcessed!=NULL) {
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d004      	beq.n	8003baa <Endpoint_Null_Stream+0xb6>
					*BytesProcessed = BytesTransfered;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	8afa      	ldrh	r2, [r7, #22]
 8003ba4:	801a      	strh	r2, [r3, #0]
					return ENDPOINT_RWSTREAM_IncompleteTransfer;
 8003ba6:	2305      	movs	r3, #5
 8003ba8:	e00c      	b.n	8003bc4 <Endpoint_Null_Stream+0xd0>
				}

				if ((ErrorCode = Endpoint_WaitUntilReady()) != 0) {
 8003baa:	f7ff f9f9 	bl	8002fa0 <Endpoint_WaitUntilReady>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	737b      	strb	r3, [r7, #13]
 8003bb2:	7b7b      	ldrb	r3, [r7, #13]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <Endpoint_Null_Stream+0xc8>
					return ErrorCode;
 8003bb8:	7b7b      	ldrb	r3, [r7, #13]
 8003bba:	e003      	b.n	8003bc4 <Endpoint_Null_Stream+0xd0>
		while (Length) {
 8003bbc:	88fb      	ldrh	r3, [r7, #6]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1b9      	bne.n	8003b36 <Endpoint_Null_Stream+0x42>
				}


			}
		}
		return ENDPOINT_RWSTREAM_NoError;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000524 	.word	0x20000524

08003bd0 <USBD_HandleEP0_Stall>:
/**
 * \brief Handle protocol stall on EP0
 *
 * Stalls EP0 and then restarts a new transfer including setting state to \ref IDLE.
 */
void USBD_HandleEP0_Stall() {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
	/* When we stall ep0 as protocol stall, we go back into idle state and start a new read */
	device.Driver->EndpointStall(ENDPOINT_DIR_IN | 0,1);
 8003bd4:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <USBD_HandleEP0_Stall+0x28>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	2101      	movs	r1, #1
 8003bdc:	2080      	movs	r0, #128	; 0x80
 8003bde:	4798      	blx	r3
	device.EP0_State = IDLE;
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <USBD_HandleEP0_Stall+0x28>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Driver->EndpointReadStart(0,24);
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <USBD_HandleEP0_Stall+0x28>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bee:	2118      	movs	r1, #24
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	4798      	blx	r3
}
 8003bf4:	bf00      	nop
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20000524 	.word	0x20000524

08003bfc <USB_Device_ProcessControlRequest>:
 * \ref EVENT_USB_Device_ControlRequest function. There the user has the chance to complete
 * some custom request or override the handling of this function. If the user has handled the
 * request, he has to call \ref Endpoint_ClearSETUP.
 *
 */
void USB_Device_ProcessControlRequest() {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
	uint32_t length = 0,ret;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
	uint16_t status = 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	813b      	strh	r3, [r7, #8]
	void *buffer;
	uint8_t Value;
	uint16_t Index;

	Value = USB_ControlRequest.wValue & 0x00FF;
 8003c0a:	4ba5      	ldr	r3, [pc, #660]	; (8003ea0 <USB_Device_ProcessControlRequest+0x2a4>)
 8003c0c:	885b      	ldrh	r3, [r3, #2]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	74fb      	strb	r3, [r7, #19]

	/* Handling of descriptors */
	EVENT_USB_Device_ControlRequest();
 8003c12:	f7fd f8e7 	bl	8000de4 <EVENT_USB_Device_ControlRequest>
	if (!device.IsSetupRecieved)
 8003c16:	4ba3      	ldr	r3, [pc, #652]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003c18:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003c1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 81fd 	beq.w	8004022 <USB_Device_ProcessControlRequest+0x426>
		return;

	/* default request handling */
	switch (USB_ControlRequest.bRequest) {
 8003c28:	4b9d      	ldr	r3, [pc, #628]	; (8003ea0 <USB_Device_ProcessControlRequest+0x2a4>)
 8003c2a:	785b      	ldrb	r3, [r3, #1]
 8003c2c:	2b0c      	cmp	r3, #12
 8003c2e:	f200 81e8 	bhi.w	8004002 <USB_Device_ProcessControlRequest+0x406>
 8003c32:	a201      	add	r2, pc, #4	; (adr r2, 8003c38 <USB_Device_ProcessControlRequest+0x3c>)
 8003c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c38:	08003daf 	.word	0x08003daf
 8003c3c:	08003c6d 	.word	0x08003c6d
 8003c40:	08004003 	.word	0x08004003
 8003c44:	08003f39 	.word	0x08003f39
 8003c48:	08004003 	.word	0x08004003
 8003c4c:	08003e93 	.word	0x08003e93
 8003c50:	08003d13 	.word	0x08003d13
 8003c54:	08003eff 	.word	0x08003eff
 8003c58:	08003d03 	.word	0x08003d03
 8003c5c:	08003ec7 	.word	0x08003ec7
 8003c60:	08003d77 	.word	0x08003d77
 8003c64:	08003f05 	.word	0x08003f05
 8003c68:	08003ffd 	.word	0x08003ffd
	case REQ_ClearFeature:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 8003c6c:	4b8c      	ldr	r3, [pc, #560]	; (8003ea0 <USB_Device_ProcessControlRequest+0x2a4>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d133      	bne.n	8003ce0 <USB_Device_ProcessControlRequest+0xe4>
			Index = USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK;
 8003c78:	4b89      	ldr	r3, [pc, #548]	; (8003ea0 <USB_Device_ProcessControlRequest+0x2a4>)
 8003c7a:	889b      	ldrh	r3, [r3, #4]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	817b      	strh	r3, [r7, #10]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8003c84:	4b88      	ldr	r3, [pc, #544]	; (8003ea8 <USB_Device_ProcessControlRequest+0x2ac>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d004      	beq.n	8003c98 <USB_Device_ProcessControlRequest+0x9c>
 8003c8e:	4b84      	ldr	r3, [pc, #528]	; (8003ea0 <USB_Device_ProcessControlRequest+0x2a4>)
 8003c90:	889b      	ldrh	r3, [r3, #4]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d120      	bne.n	8003cda <USB_Device_ProcessControlRequest+0xde>
					device.Endpoints[Index].IsConfigured==1) {
 8003c98:	897b      	ldrh	r3, [r7, #10]
 8003c9a:	4a82      	ldr	r2, [pc, #520]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003c9c:	212c      	movs	r1, #44	; 0x2c
 8003c9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	7a1b      	ldrb	r3, [r3, #8]
 8003ca6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003caa:	b2db      	uxtb	r3, r3
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0)  &&
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d114      	bne.n	8003cda <USB_Device_ProcessControlRequest+0xde>
				device.Endpoints[Index].IsHalted = 0;
 8003cb0:	897b      	ldrh	r3, [r7, #10]
 8003cb2:	4a7c      	ldr	r2, [pc, #496]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	441a      	add	r2, r3
 8003cbc:	7a13      	ldrb	r3, [r2, #8]
 8003cbe:	f36f 0382 	bfc	r3, #2, #1
 8003cc2:	7213      	strb	r3, [r2, #8]
				device.Driver->EndpointStall(USB_ControlRequest.wIndex,0);
 8003cc4:	4b77      	ldr	r3, [pc, #476]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	4a75      	ldr	r2, [pc, #468]	; (8003ea0 <USB_Device_ProcessControlRequest+0x2a4>)
 8003ccc:	8892      	ldrh	r2, [r2, #4]
 8003cce:	b292      	uxth	r2, r2
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4798      	blx	r3
			} else {
				USBD_HandleEP0_Stall();
			}
			break;
 8003cd8:	e19b      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
				USBD_HandleEP0_Stall();
 8003cda:	f7ff ff79 	bl	8003bd0 <USBD_HandleEP0_Stall>
			break;
 8003cde:	e198      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8003ce0:	4b6f      	ldr	r3, [pc, #444]	; (8003ea0 <USB_Device_ProcessControlRequest+0x2a4>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d107      	bne.n	8003cfc <USB_Device_ProcessControlRequest+0x100>
			 device.RemoteWakeUp = 0;
 8003cec:	4a6d      	ldr	r2, [pc, #436]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003cee:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003cf2:	f36f 0382 	bfc	r3, #2, #1
 8003cf6:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
			 break;
 8003cfa:	e18a      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
		}
		USBD_HandleEP0_Stall();
 8003cfc:	f7ff ff68 	bl	8003bd0 <USBD_HandleEP0_Stall>
		break;
 8003d00:	e187      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetConfiguration:
		device.Driver->EndpointWrite(0,&device.Configuration,1);
 8003d02:	4b68      	ldr	r3, [pc, #416]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	2201      	movs	r2, #1
 8003d0a:	4968      	ldr	r1, [pc, #416]	; (8003eac <USB_Device_ProcessControlRequest+0x2b0>)
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	4798      	blx	r3
		break;
 8003d10:	e17f      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetDescriptor:
		length = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue,USB_ControlRequest.wIndex,(void*)&buffer);
 8003d12:	4b63      	ldr	r3, [pc, #396]	; (8003ea0 <USB_Device_ProcessControlRequest+0x2a4>)
 8003d14:	885b      	ldrh	r3, [r3, #2]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4a61      	ldr	r2, [pc, #388]	; (8003ea0 <USB_Device_ProcessControlRequest+0x2a4>)
 8003d1a:	8892      	ldrh	r2, [r2, #4]
 8003d1c:	b292      	uxth	r2, r2
 8003d1e:	b2d1      	uxtb	r1, r2
 8003d20:	1d3a      	adds	r2, r7, #4
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fd f874 	bl	8000e10 <CALLBACK_USB_GetDescriptor>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	617b      	str	r3, [r7, #20]
		if (length==0)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <USB_Device_ProcessControlRequest+0x13c>
			USBD_HandleEP0_Stall();
 8003d32:	f7ff ff4d 	bl	8003bd0 <USBD_HandleEP0_Stall>
					length : USB_ControlRequest.wLength;
			ret = device.Driver->EndpointWrite(0,buffer,length);
			device.Endpoints[0].InDataLeft = length - ret;
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
		}
		break;
 8003d36:	e16c      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
			length = length < USB_ControlRequest.wLength ?
 8003d38:	4b59      	ldr	r3, [pc, #356]	; (8003ea0 <USB_Device_ProcessControlRequest+0x2a4>)
 8003d3a:	88db      	ldrh	r3, [r3, #6]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	4293      	cmp	r3, r2
 8003d44:	bf28      	it	cs
 8003d46:	4613      	movcs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]
			ret = device.Driver->EndpointWrite(0,buffer,length);
 8003d4a:	4b56      	ldr	r3, [pc, #344]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	2000      	movs	r0, #0
 8003d56:	4798      	blx	r3
 8003d58:	4603      	mov	r3, r0
 8003d5a:	60fb      	str	r3, [r7, #12]
			device.Endpoints[0].InDataLeft = length - ret;
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	4a50      	ldr	r2, [pc, #320]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003d64:	6293      	str	r3, [r2, #40]	; 0x28
			device.Endpoints[0].InDataBuffer = (uint8_t *)((uint32_t)buffer + ret);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4b4c      	ldr	r3, [pc, #304]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003d72:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 8003d74:	e14d      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>

	case REQ_GetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8003d76:	4b4c      	ldr	r3, [pc, #304]	; (8003ea8 <USB_Device_ProcessControlRequest+0x2ac>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d10d      	bne.n	8003d9c <USB_Device_ProcessControlRequest+0x1a0>
			device.Driver->EndpointWrite(0,&device.InterfaceSettings[USB_ControlRequest.wIndex],1);
 8003d80:	4b48      	ldr	r3, [pc, #288]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	4a46      	ldr	r2, [pc, #280]	; (8003ea0 <USB_Device_ProcessControlRequest+0x2a4>)
 8003d88:	8892      	ldrh	r2, [r2, #4]
 8003d8a:	b292      	uxth	r2, r2
 8003d8c:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8003d90:	4944      	ldr	r1, [pc, #272]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003d92:	4411      	add	r1, r2
 8003d94:	2201      	movs	r2, #1
 8003d96:	2000      	movs	r0, #0
 8003d98:	4798      	blx	r3
			break;
 8003d9a:	e13a      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8003d9c:	4b42      	ldr	r3, [pc, #264]	; (8003ea8 <USB_Device_ProcessControlRequest+0x2ac>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	f040 8130 	bne.w	8004008 <USB_Device_ProcessControlRequest+0x40c>
			USBD_HandleEP0_Stall();
 8003da8:	f7ff ff12 	bl	8003bd0 <USBD_HandleEP0_Stall>
			break;
 8003dac:	e131      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
		}
		break;

	case REQ_GetStatus:
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_DEVICE) {
 8003dae:	4b3c      	ldr	r3, [pc, #240]	; (8003ea0 <USB_Device_ProcessControlRequest+0x2a4>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d11b      	bne.n	8003df2 <USB_Device_ProcessControlRequest+0x1f6>
			status = device.RemoteWakeUp << 1 | device.SelfPowered;
 8003dba:	4b3a      	ldr	r3, [pc, #232]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003dbc:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003dc0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	b21a      	sxth	r2, r3
 8003dca:	4b36      	ldr	r3, [pc, #216]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003dcc:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003dd0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	b21b      	sxth	r3, r3
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	b21b      	sxth	r3, r3
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	813b      	strh	r3, [r7, #8]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8003de0:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	f107 0108 	add.w	r1, r7, #8
 8003dea:	2202      	movs	r2, #2
 8003dec:	2000      	movs	r0, #0
 8003dee:	4798      	blx	r3
			break;
 8003df0:	e10f      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
		}
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_INTERFACE && USB_DeviceState == DEVICE_STATE_Configured) {
 8003df2:	4b2b      	ldr	r3, [pc, #172]	; (8003ea0 <USB_Device_ProcessControlRequest+0x2a4>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d10f      	bne.n	8003e1e <USB_Device_ProcessControlRequest+0x222>
 8003dfe:	4b2a      	ldr	r3, [pc, #168]	; (8003ea8 <USB_Device_ProcessControlRequest+0x2ac>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d10a      	bne.n	8003e1e <USB_Device_ProcessControlRequest+0x222>
			status = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	813b      	strh	r3, [r7, #8]
			device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f107 0108 	add.w	r1, r7, #8
 8003e16:	2202      	movs	r2, #2
 8003e18:	2000      	movs	r0, #0
 8003e1a:	4798      	blx	r3
			break;
 8003e1c:	e0f9      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
		}
		/* print endpoint status only when(or):
		 * - Device_Address_state and ep == 0
		 * - Device_configured_state and ep is configured
		 */
		if ((USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT) {
 8003e1e:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <USB_Device_ProcessControlRequest+0x2a4>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d130      	bne.n	8003e8c <USB_Device_ProcessControlRequest+0x290>
			Index = USB_ControlRequest.wIndex & 0xFF & ENDPOINT_EPNUM_MASK;
 8003e2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <USB_Device_ProcessControlRequest+0x2a4>)
 8003e2c:	889b      	ldrh	r3, [r3, #4]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	817b      	strh	r3, [r7, #10]
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8003e36:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <USB_Device_ProcessControlRequest+0x2ac>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d004      	beq.n	8003e4a <USB_Device_ProcessControlRequest+0x24e>
 8003e40:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <USB_Device_ProcessControlRequest+0x2a4>)
 8003e42:	889b      	ldrh	r3, [r3, #4]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d120      	bne.n	8003e8c <USB_Device_ProcessControlRequest+0x290>
					device.Endpoints[Index].IsConfigured==1) {
 8003e4a:	897b      	ldrh	r3, [r7, #10]
 8003e4c:	4a15      	ldr	r2, [pc, #84]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003e4e:	212c      	movs	r1, #44	; 0x2c
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	4413      	add	r3, r2
 8003e56:	7a1b      	ldrb	r3, [r3, #8]
 8003e58:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003e5c:	b2db      	uxtb	r3, r3
			if ((USB_DeviceState == DEVICE_STATE_Configured || USB_ControlRequest.wIndex==0) &&
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d114      	bne.n	8003e8c <USB_Device_ProcessControlRequest+0x290>
				status = device.Endpoints[Index].IsHalted;
 8003e62:	897b      	ldrh	r3, [r7, #10]
 8003e64:	4a0f      	ldr	r2, [pc, #60]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003e66:	212c      	movs	r1, #44	; 0x2c
 8003e68:	fb01 f303 	mul.w	r3, r1, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	7a1b      	ldrb	r3, [r3, #8]
 8003e70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	813b      	strh	r3, [r7, #8]
				device.Driver->EndpointWrite(0,(uint8_t*)&status,2);
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <USB_Device_ProcessControlRequest+0x2a8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	f107 0108 	add.w	r1, r7, #8
 8003e84:	2202      	movs	r2, #2
 8003e86:	2000      	movs	r0, #0
 8003e88:	4798      	blx	r3
				break;
 8003e8a:	e0c2      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
			}
		}
		/* default stall */
		USBD_HandleEP0_Stall();
 8003e8c:	f7ff fea0 	bl	8003bd0 <USBD_HandleEP0_Stall>
		break;
 8003e90:	e0bf      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetAddress:
		if (Value == 0)
 8003e92:	7cfb      	ldrb	r3, [r7, #19]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10b      	bne.n	8003eb0 <USB_Device_ProcessControlRequest+0x2b4>
			USB_DeviceState = DEVICE_STATE_Default;
 8003e98:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <USB_Device_ProcessControlRequest+0x2ac>)
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	e00a      	b.n	8003eb6 <USB_Device_ProcessControlRequest+0x2ba>
 8003ea0:	20000aac 	.word	0x20000aac
 8003ea4:	20000524 	.word	0x20000524
 8003ea8:	20000ab4 	.word	0x20000ab4
 8003eac:	2000065d 	.word	0x2000065d
		else
			USB_DeviceState = DEVICE_STATE_Addressed;
 8003eb0:	4b5e      	ldr	r3, [pc, #376]	; (800402c <USB_Device_ProcessControlRequest+0x430>)
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	701a      	strb	r2, [r3, #0]
		device.Driver->DeviceSetAddress(Value,XMC_USBD_SET_ADDRESS_STAGE_SETUP);
 8003eb6:	4b5e      	ldr	r3, [pc, #376]	; (8004030 <USB_Device_ProcessControlRequest+0x434>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	7cfa      	ldrb	r2, [r7, #19]
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4798      	blx	r3
		break;
 8003ec4:	e0a5      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetConfiguration:
		/* Regardless the state update the configuration to unconfigure endpoints */
		device.Configuration = Value;
 8003ec6:	4a5a      	ldr	r2, [pc, #360]	; (8004030 <USB_Device_ProcessControlRequest+0x434>)
 8003ec8:	7cfb      	ldrb	r3, [r7, #19]
 8003eca:	f882 3139 	strb.w	r3, [r2, #313]	; 0x139
		EVENT_USB_Device_ConfigurationChanged();
 8003ece:	f7fc ff61 	bl	8000d94 <EVENT_USB_Device_ConfigurationChanged>
		/* when config 0 is choosen, we are back in address state */
		if (Value == 0) {
 8003ed2:	7cfb      	ldrb	r3, [r7, #19]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d103      	bne.n	8003ee0 <USB_Device_ProcessControlRequest+0x2e4>
			USB_DeviceState = DEVICE_STATE_Addressed;
 8003ed8:	4b54      	ldr	r3, [pc, #336]	; (800402c <USB_Device_ProcessControlRequest+0x430>)
 8003eda:	2203      	movs	r2, #3
 8003edc:	701a      	strb	r2, [r3, #0]
			break;
 8003ede:	e098      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
		}
		/* go ahead only with vailid config. (must be set in event) */
		if (device.IsConfigured == 1)
 8003ee0:	4b53      	ldr	r3, [pc, #332]	; (8004030 <USB_Device_ProcessControlRequest+0x434>)
 8003ee2:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <USB_Device_ProcessControlRequest+0x2fc>
			USB_DeviceState = DEVICE_STATE_Configured;
 8003ef0:	4b4e      	ldr	r3, [pc, #312]	; (800402c <USB_Device_ProcessControlRequest+0x430>)
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	701a      	strb	r2, [r3, #0]
		else
			USBD_HandleEP0_Stall();
		break;
 8003ef6:	e08c      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
			USBD_HandleEP0_Stall();
 8003ef8:	f7ff fe6a 	bl	8003bd0 <USBD_HandleEP0_Stall>
		break;
 8003efc:	e089      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetDescriptor:
		/* Set Descriptor not supported, so stall */
		USBD_HandleEP0_Stall();
 8003efe:	f7ff fe67 	bl	8003bd0 <USBD_HandleEP0_Stall>
		break;
 8003f02:	e086      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SetInterface:
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8003f04:	4b49      	ldr	r3, [pc, #292]	; (800402c <USB_Device_ProcessControlRequest+0x430>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d10c      	bne.n	8003f28 <USB_Device_ProcessControlRequest+0x32c>
			/* TODO: Check if interface and altsetting exists and configuration is allowed, else stall */
			device.InterfaceSettings[USB_ControlRequest.wIndex] = USB_ControlRequest.wValue;
 8003f0e:	4b49      	ldr	r3, [pc, #292]	; (8004034 <USB_Device_ProcessControlRequest+0x438>)
 8003f10:	885b      	ldrh	r3, [r3, #2]
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	4b47      	ldr	r3, [pc, #284]	; (8004034 <USB_Device_ProcessControlRequest+0x438>)
 8003f16:	889b      	ldrh	r3, [r3, #4]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	4b44      	ldr	r3, [pc, #272]	; (8004030 <USB_Device_ProcessControlRequest+0x434>)
 8003f20:	440b      	add	r3, r1
 8003f22:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			break;
 8003f26:	e074      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
		}
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8003f28:	4b40      	ldr	r3, [pc, #256]	; (800402c <USB_Device_ProcessControlRequest+0x430>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d16c      	bne.n	800400c <USB_Device_ProcessControlRequest+0x410>
			USBD_HandleEP0_Stall();
 8003f32:	f7ff fe4d 	bl	8003bd0 <USBD_HandleEP0_Stall>
			break;
 8003f36:	e06c      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
		}
		break;

	case REQ_SetFeature:
		/* we do not support test mode */
		if (Value == FEATURE_SEL_TestMode) {
 8003f38:	7cfb      	ldrb	r3, [r7, #19]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d102      	bne.n	8003f44 <USB_Device_ProcessControlRequest+0x348>
			USBD_HandleEP0_Stall();
 8003f3e:	f7ff fe47 	bl	8003bd0 <USBD_HandleEP0_Stall>
			break;
 8003f42:	e066      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
		}
		/* configured state */
		if (USB_DeviceState == DEVICE_STATE_Configured) {
 8003f44:	4b39      	ldr	r3, [pc, #228]	; (800402c <USB_Device_ProcessControlRequest+0x430>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d137      	bne.n	8003fbe <USB_Device_ProcessControlRequest+0x3c2>
			switch (Value) {
 8003f4e:	7cfb      	ldrb	r3, [r7, #19]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d009      	beq.n	8003f68 <USB_Device_ProcessControlRequest+0x36c>
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d15b      	bne.n	8004010 <USB_Device_ProcessControlRequest+0x414>
			case FEATURE_SEL_DeviceRemoteWakeup:
				device.RemoteWakeUp = 1;
 8003f58:	4a35      	ldr	r2, [pc, #212]	; (8004030 <USB_Device_ProcessControlRequest+0x434>)
 8003f5a:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8003f5e:	f043 0304 	orr.w	r3, r3, #4
 8003f62:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				break;
 8003f66:	e029      	b.n	8003fbc <USB_Device_ProcessControlRequest+0x3c0>
			case FEATURE_SEL_EndpointHalt:
				Index = USB_ControlRequest.wIndex & 0xFF & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK;
 8003f68:	4b32      	ldr	r3, [pc, #200]	; (8004034 <USB_Device_ProcessControlRequest+0x438>)
 8003f6a:	889b      	ldrh	r3, [r3, #4]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	817b      	strh	r3, [r7, #10]
				if (device.Endpoints[Index].IsConfigured == 0)
 8003f74:	897b      	ldrh	r3, [r7, #10]
 8003f76:	4a2e      	ldr	r2, [pc, #184]	; (8004030 <USB_Device_ProcessControlRequest+0x434>)
 8003f78:	212c      	movs	r1, #44	; 0x2c
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	4413      	add	r3, r2
 8003f80:	7a1b      	ldrb	r3, [r3, #8]
 8003f82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d102      	bne.n	8003f92 <USB_Device_ProcessControlRequest+0x396>
					USBD_HandleEP0_Stall();
 8003f8c:	f7ff fe20 	bl	8003bd0 <USBD_HandleEP0_Stall>
				else {
					device.Endpoints[Index].IsHalted = 1;
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
				}
				break;
 8003f90:	e013      	b.n	8003fba <USB_Device_ProcessControlRequest+0x3be>
					device.Endpoints[Index].IsHalted = 1;
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	4a26      	ldr	r2, [pc, #152]	; (8004030 <USB_Device_ProcessControlRequest+0x434>)
 8003f96:	212c      	movs	r1, #44	; 0x2c
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	441a      	add	r2, r3
 8003f9e:	7a13      	ldrb	r3, [r2, #8]
 8003fa0:	f043 0304 	orr.w	r3, r3, #4
 8003fa4:	7213      	strb	r3, [r2, #8]
					device.Driver->EndpointStall(USB_ControlRequest.wIndex,1);
 8003fa6:	4b22      	ldr	r3, [pc, #136]	; (8004030 <USB_Device_ProcessControlRequest+0x434>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	4a21      	ldr	r2, [pc, #132]	; (8004034 <USB_Device_ProcessControlRequest+0x438>)
 8003fae:	8892      	ldrh	r2, [r2, #4]
 8003fb0:	b292      	uxth	r2, r2
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	4798      	blx	r3
				break;
 8003fba:	bf00      	nop
			}
			break;
 8003fbc:	e028      	b.n	8004010 <USB_Device_ProcessControlRequest+0x414>
		}
		/* when addressed, only ep0 can be halted */
		if (USB_DeviceState == DEVICE_STATE_Addressed) {
 8003fbe:	4b1b      	ldr	r3, [pc, #108]	; (800402c <USB_Device_ProcessControlRequest+0x430>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d116      	bne.n	8003ff6 <USB_Device_ProcessControlRequest+0x3fa>
			if (Value == FEATURE_SEL_EndpointHalt &&
 8003fc8:	7cfb      	ldrb	r3, [r7, #19]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d113      	bne.n	8003ff6 <USB_Device_ProcessControlRequest+0x3fa>
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8003fce:	4b19      	ldr	r3, [pc, #100]	; (8004034 <USB_Device_ProcessControlRequest+0x438>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
			if (Value == FEATURE_SEL_EndpointHalt &&
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d10d      	bne.n	8003ff6 <USB_Device_ProcessControlRequest+0x3fa>
					(USB_ControlRequest.wIndex & 0x00FF) == 0x0) {
 8003fda:	4b16      	ldr	r3, [pc, #88]	; (8004034 <USB_Device_ProcessControlRequest+0x438>)
 8003fdc:	889b      	ldrh	r3, [r3, #4]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	b2db      	uxtb	r3, r3
					(USB_ControlRequest.bmRequestType & 0x3) == REQREC_ENDPOINT &&
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d107      	bne.n	8003ff6 <USB_Device_ProcessControlRequest+0x3fa>
				device.Endpoints[0].IsHalted = 1;
 8003fe6:	4a12      	ldr	r2, [pc, #72]	; (8004030 <USB_Device_ProcessControlRequest+0x434>)
 8003fe8:	7a13      	ldrb	r3, [r2, #8]
 8003fea:	f043 0304 	orr.w	r3, r3, #4
 8003fee:	7213      	strb	r3, [r2, #8]
				USBD_HandleEP0_Stall();
 8003ff0:	f7ff fdee 	bl	8003bd0 <USBD_HandleEP0_Stall>
				break;
 8003ff4:	e00d      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
			}
		}
		/* default behaviour is stall */
		USBD_HandleEP0_Stall();
 8003ff6:	f7ff fdeb 	bl	8003bd0 <USBD_HandleEP0_Stall>
		break;
 8003ffa:	e00a      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>

	case REQ_SynchFrame:
		/* Not yet supported */
		USBD_HandleEP0_Stall();
 8003ffc:	f7ff fde8 	bl	8003bd0 <USBD_HandleEP0_Stall>
		break;
 8004000:	e007      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>

	default:
		USBD_HandleEP0_Stall();
 8004002:	f7ff fde5 	bl	8003bd0 <USBD_HandleEP0_Stall>
 8004006:	e004      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
		break;
 8004008:	bf00      	nop
 800400a:	e002      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
		break;
 800400c:	bf00      	nop
 800400e:	e000      	b.n	8004012 <USB_Device_ProcessControlRequest+0x416>
			break;
 8004010:	bf00      	nop
	}
	device.IsSetupRecieved = 0;
 8004012:	4a07      	ldr	r2, [pc, #28]	; (8004030 <USB_Device_ProcessControlRequest+0x434>)
 8004014:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 8004018:	f36f 0341 	bfc	r3, #1, #1
 800401c:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
 8004020:	e000      	b.n	8004024 <USB_Device_ProcessControlRequest+0x428>
		return;
 8004022:	bf00      	nop
}
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000ab4 	.word	0x20000ab4
 8004030:	20000524 	.word	0x20000524
 8004034:	20000aac 	.word	0x20000aac

08004038 <USBD_HandleEP0_IN>:
 * \brief Handle complete IN transfer on EP0
 *
 * In \ref IN_DATA state it starts a receive and switches to \ref OUT_STATUS state.
 * In \ref IN_STATUS state its starts a new read of setup packets and switches to \ref IDLE.
 */
void USBD_HandleEP0_IN() {
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
	if (device.EP0_State == IN_DATA) {
 800403c:	4b10      	ldr	r3, [pc, #64]	; (8004080 <USBD_HandleEP0_IN+0x48>)
 800403e:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8004042:	2b02      	cmp	r3, #2
 8004044:	d109      	bne.n	800405a <USBD_HandleEP0_IN+0x22>
		/* Read zero length out data packet */
		device.Driver->EndpointReadStart(0,0);
 8004046:	4b0e      	ldr	r3, [pc, #56]	; (8004080 <USBD_HandleEP0_IN+0x48>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	2100      	movs	r1, #0
 800404e:	2000      	movs	r0, #0
 8004050:	4798      	blx	r3
		device.EP0_State = OUT_STATUS;
 8004052:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <USBD_HandleEP0_IN+0x48>)
 8004054:	2205      	movs	r2, #5
 8004056:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	if (device.EP0_State == IN_STATUS) {
 800405a:	4b09      	ldr	r3, [pc, #36]	; (8004080 <USBD_HandleEP0_IN+0x48>)
 800405c:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 8004060:	2b03      	cmp	r3, #3
 8004062:	d10b      	bne.n	800407c <USBD_HandleEP0_IN+0x44>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <USBD_HandleEP0_IN+0x48>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	4a05      	ldr	r2, [pc, #20]	; (8004080 <USBD_HandleEP0_IN+0x48>)
 800406c:	7912      	ldrb	r2, [r2, #4]
 800406e:	2118      	movs	r1, #24
 8004070:	4610      	mov	r0, r2
 8004072:	4798      	blx	r3
		device.EP0_State = IDLE;
 8004074:	4b02      	ldr	r3, [pc, #8]	; (8004080 <USBD_HandleEP0_IN+0x48>)
 8004076:	2201      	movs	r2, #1
 8004078:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
}
 800407c:	bf00      	nop
 800407e:	bd80      	pop	{r7, pc}
 8004080:	20000524 	.word	0x20000524

08004084 <USBD_HandleEP0_OUT>:
 * \brief Handle complete OUT transfer on EP0
 *
 * Handles the OUT packet based on the state of endpoint 0. Starts a new read for new SETUP packets, when in \ref OUT_STATUS.
 * When endpoint 0 is in \ref OUT_DATA state, it handles the received data and starts a write transaction for \ref IN_STATUS.
 */
void USBD_HandleEP0_OUT() {
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
	if (device.EP0_State == OUT_DATA) {
 8004088:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <USBD_HandleEP0_OUT+0x50>)
 800408a:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 800408e:	2b04      	cmp	r3, #4
 8004090:	d10c      	bne.n	80040ac <USBD_HandleEP0_OUT+0x28>
		/* Now we have the data for handling the request */
		USB_Device_ProcessControlRequest();
 8004092:	f7ff fdb3 	bl	8003bfc <USB_Device_ProcessControlRequest>
		/* Zero length packet for status stage */
		device.Driver->EndpointWrite(ENDPOINT_DIR_MASK & 0,0,0);
 8004096:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <USBD_HandleEP0_OUT+0x50>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	2200      	movs	r2, #0
 800409e:	2100      	movs	r1, #0
 80040a0:	2000      	movs	r0, #0
 80040a2:	4798      	blx	r3
		device.EP0_State = IN_STATUS;
 80040a4:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <USBD_HandleEP0_OUT+0x50>)
 80040a6:	2203      	movs	r2, #3
 80040a8:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
	if (device.EP0_State == OUT_STATUS) {
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <USBD_HandleEP0_OUT+0x50>)
 80040ae:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 80040b2:	2b05      	cmp	r3, #5
 80040b4:	d10b      	bne.n	80040ce <USBD_HandleEP0_OUT+0x4a>
		/* Request new setup packet */
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 80040b6:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <USBD_HandleEP0_OUT+0x50>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	4a05      	ldr	r2, [pc, #20]	; (80040d4 <USBD_HandleEP0_OUT+0x50>)
 80040be:	7912      	ldrb	r2, [r2, #4]
 80040c0:	2118      	movs	r1, #24
 80040c2:	4610      	mov	r0, r2
 80040c4:	4798      	blx	r3
		device.EP0_State = IDLE;
 80040c6:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <USBD_HandleEP0_OUT+0x50>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	}
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000524 	.word	0x20000524

080040d8 <USBD_HandleEP0_SETUP>:
 * Handles the setup package an switches to correct state. If data is send from host to device it switches into \ref OUT_DATA state.
 * When the hosts sends all data within the setup package and \ref wLength equals zero, starts processing the request and sends a
 * in status reponse including the switch to \ref IN_STATUS.
 * When the host expects data from the device, the function processes the control request and switches to \ref IN_DATA state.
 */
void USBD_HandleEP0_SETUP() {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
	/* read setup package from ep0 */
	int32_t ret_val = device.Driver->EndpointRead(0,(void*)&USB_ControlRequest,8);
 80040de:	4b21      	ldr	r3, [pc, #132]	; (8004164 <USBD_HandleEP0_SETUP+0x8c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	2208      	movs	r2, #8
 80040e6:	4920      	ldr	r1, [pc, #128]	; (8004168 <USBD_HandleEP0_SETUP+0x90>)
 80040e8:	2000      	movs	r0, #0
 80040ea:	4798      	blx	r3
 80040ec:	6078      	str	r0, [r7, #4]
#if NO_COPY_DRIVER
	MEMCPY(&USB_ControlRequest,device.Endpoints[0].OutBuffer,sizeof(USB_ControlRequest));
#endif
	device.IsSetupRecieved = true;
 80040ee:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <USBD_HandleEP0_SETUP+0x8c>)
 80040f0:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80040f4:	f043 0302 	orr.w	r3, r3, #2
 80040f8:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
	if (ret_val != 8 )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d12c      	bne.n	800415c <USBD_HandleEP0_SETUP+0x84>
		return;

	/* preprocess */
	/* if length is zero we have only a in_status phase */
	if (USB_ControlRequest.wLength==0) {
 8004102:	4b19      	ldr	r3, [pc, #100]	; (8004168 <USBD_HandleEP0_SETUP+0x90>)
 8004104:	88db      	ldrh	r3, [r3, #6]
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10d      	bne.n	8004128 <USBD_HandleEP0_SETUP+0x50>
		device.EP0_State = IN_STATUS;
 800410c:	4b15      	ldr	r3, [pc, #84]	; (8004164 <USBD_HandleEP0_SETUP+0x8c>)
 800410e:	2203      	movs	r2, #3
 8004110:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		USB_Device_ProcessControlRequest();
 8004114:	f7ff fd72 	bl	8003bfc <USB_Device_ProcessControlRequest>
		device.Driver->EndpointWrite(0,0,0);
 8004118:	4b12      	ldr	r3, [pc, #72]	; (8004164 <USBD_HandleEP0_SETUP+0x8c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	2200      	movs	r2, #0
 8004120:	2100      	movs	r1, #0
 8004122:	2000      	movs	r0, #0
 8004124:	4798      	blx	r3
 8004126:	e01a      	b.n	800415e <USBD_HandleEP0_SETUP+0x86>
	} else {
		if (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) {
 8004128:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <USBD_HandleEP0_SETUP+0x90>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	b25b      	sxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	da06      	bge.n	8004140 <USBD_HandleEP0_SETUP+0x68>
			device.EP0_State = IN_DATA;
 8004132:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <USBD_HandleEP0_SETUP+0x8c>)
 8004134:	2202      	movs	r2, #2
 8004136:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			USB_Device_ProcessControlRequest();
 800413a:	f7ff fd5f 	bl	8003bfc <USB_Device_ProcessControlRequest>
 800413e:	e00e      	b.n	800415e <USBD_HandleEP0_SETUP+0x86>
		}
		else {
			device.EP0_State = OUT_DATA;
 8004140:	4b08      	ldr	r3, [pc, #32]	; (8004164 <USBD_HandleEP0_SETUP+0x8c>)
 8004142:	2204      	movs	r2, #4
 8004144:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
			/* Do not process request here, first read data */
			device.Driver->EndpointReadStart(0,USB_ControlRequest.wLength);
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <USBD_HandleEP0_SETUP+0x8c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	4a06      	ldr	r2, [pc, #24]	; (8004168 <USBD_HandleEP0_SETUP+0x90>)
 8004150:	88d2      	ldrh	r2, [r2, #6]
 8004152:	b292      	uxth	r2, r2
 8004154:	4611      	mov	r1, r2
 8004156:	2000      	movs	r0, #0
 8004158:	4798      	blx	r3
 800415a:	e000      	b.n	800415e <USBD_HandleEP0_SETUP+0x86>
		return;
 800415c:	bf00      	nop
		}
	}
}
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20000524 	.word	0x20000524
 8004168:	20000aac 	.word	0x20000aac

0800416c <USBD_SignalDeviceEventHandler>:
 * The device can have several events, where it notifies the application about.
 *
 * \note Not all events are available on all chip series. (Power Events are only supported on XMC4500)
 * \see USB_USBD_EVENT
 */
void USBD_SignalDeviceEventHandler(XMC_USBD_EVENT_t event) {
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	71fb      	strb	r3, [r7, #7]
	int i;
	switch (event) {
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	2b09      	cmp	r3, #9
 800417a:	f200 80fd 	bhi.w	8004378 <USBD_SignalDeviceEventHandler+0x20c>
 800417e:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <USBD_SignalDeviceEventHandler+0x18>)
 8004180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004184:	080042db 	.word	0x080042db
 8004188:	080042c9 	.word	0x080042c9
 800418c:	080042b7 	.word	0x080042b7
 8004190:	080042bd 	.word	0x080042bd
 8004194:	080041ad 	.word	0x080041ad
 8004198:	08004379 	.word	0x08004379
 800419c:	08004361 	.word	0x08004361
 80041a0:	08004351 	.word	0x08004351
 80041a4:	08004379 	.word	0x08004379
 80041a8:	080042b1 	.word	0x080042b1
	case XMC_USBD_EVENT_RESET:
		USB_DeviceState = DEVICE_STATE_Default;
 80041ac:	4b74      	ldr	r3, [pc, #464]	; (8004380 <USBD_SignalDeviceEventHandler+0x214>)
 80041ae:	2202      	movs	r2, #2
 80041b0:	701a      	strb	r2, [r3, #0]
		device.EP0_State = IDLE;
 80041b2:	4b74      	ldr	r3, [pc, #464]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		device.RemoteWakeUp = 0;
 80041ba:	4a72      	ldr	r2, [pc, #456]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 80041bc:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
 80041c0:	f36f 0382 	bfc	r3, #2, #1
 80041c4:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
		/* Reset endpoints and configuration */
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e050      	b.n	8004270 <USBD_SignalDeviceEventHandler+0x104>
			device.Endpoints[i].InInUse = 0;
 80041ce:	4a6d      	ldr	r2, [pc, #436]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	212c      	movs	r1, #44	; 0x2c
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	441a      	add	r2, r3
 80041da:	8913      	ldrh	r3, [r2, #8]
 80041dc:	f36f 1304 	bfc	r3, #4, #1
 80041e0:	8113      	strh	r3, [r2, #8]
			device.Endpoints[i].OutInUse = 0;
 80041e2:	4a68      	ldr	r2, [pc, #416]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	212c      	movs	r1, #44	; 0x2c
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	441a      	add	r2, r3
 80041ee:	8913      	ldrh	r3, [r2, #8]
 80041f0:	f36f 03c3 	bfc	r3, #3, #1
 80041f4:	8113      	strh	r3, [r2, #8]
			device.Endpoints[i].IsHalted = 0;
 80041f6:	4a63      	ldr	r2, [pc, #396]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	212c      	movs	r1, #44	; 0x2c
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	441a      	add	r2, r3
 8004202:	7a13      	ldrb	r3, [r2, #8]
 8004204:	f36f 0382 	bfc	r3, #2, #1
 8004208:	7213      	strb	r3, [r2, #8]
			if (i!=0 && device.Endpoints[i].IsConfigured) {
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d02c      	beq.n	800426a <USBD_SignalDeviceEventHandler+0xfe>
 8004210:	4a5c      	ldr	r2, [pc, #368]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	212c      	movs	r1, #44	; 0x2c
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	4413      	add	r3, r2
 800421c:	7a1b      	ldrb	r3, [r3, #8]
 800421e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d020      	beq.n	800426a <USBD_SignalDeviceEventHandler+0xfe>
				device.Driver->EndpointUnconfigure(device.Endpoints[i].Address);
 8004228:	4b56      	ldr	r3, [pc, #344]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	4955      	ldr	r1, [pc, #340]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	202c      	movs	r0, #44	; 0x2c
 8004234:	fb00 f202 	mul.w	r2, r0, r2
 8004238:	440a      	add	r2, r1
 800423a:	3204      	adds	r2, #4
 800423c:	7812      	ldrb	r2, [r2, #0]
 800423e:	4610      	mov	r0, r2
 8004240:	4798      	blx	r3
				device.Endpoints[i].IsConfigured = 0;
 8004242:	4a50      	ldr	r2, [pc, #320]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	212c      	movs	r1, #44	; 0x2c
 8004248:	fb01 f303 	mul.w	r3, r1, r3
 800424c:	441a      	add	r2, r3
 800424e:	7a13      	ldrb	r3, [r2, #8]
 8004250:	f36f 0300 	bfc	r3, #0, #1
 8004254:	7213      	strb	r3, [r2, #8]
				device.Endpoints[i].IsEnabled = 0;
 8004256:	4a4b      	ldr	r2, [pc, #300]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	212c      	movs	r1, #44	; 0x2c
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	441a      	add	r2, r3
 8004262:	7a13      	ldrb	r3, [r2, #8]
 8004264:	f36f 0341 	bfc	r3, #1, #1
 8004268:	7213      	strb	r3, [r2, #8]
		for (i=0;i<(uint8_t)XMC_USBD_NUM_EPS; i++) {
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3301      	adds	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b06      	cmp	r3, #6
 8004274:	ddab      	ble.n	80041ce <USBD_SignalDeviceEventHandler+0x62>
			}
		}
		device.Configuration = 0;
 8004276:	4b43      	ldr	r3, [pc, #268]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
		for (i=0;i<NUM_INTERFACES;i++) {
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	e009      	b.n	8004298 <USBD_SignalDeviceEventHandler+0x12c>
			device.InterfaceSettings[i] = 0;
 8004284:	4a3f      	ldr	r2, [pc, #252]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	4413      	add	r3, r2
 800428a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
		for (i=0;i<NUM_INTERFACES;i++) {
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3301      	adds	r3, #1
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	ddf2      	ble.n	8004284 <USBD_SignalDeviceEventHandler+0x118>
		}
		device.Driver->EndpointReadStart(device.Endpoints[0].Address,24);
 800429e:	4b39      	ldr	r3, [pc, #228]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	4a37      	ldr	r2, [pc, #220]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 80042a6:	7912      	ldrb	r2, [r2, #4]
 80042a8:	2118      	movs	r1, #24
 80042aa:	4610      	mov	r0, r2
 80042ac:	4798      	blx	r3
		break;
 80042ae:	e064      	b.n	800437a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_SOF:
		EVENT_USB_Device_StartOfFrame();
 80042b0:	f002 f8fc 	bl	80064ac <USB_Event_Stub>
		break;
 80042b4:	e061      	b.n	800437a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_CONNECT:
		EVENT_USB_Device_Connect();
 80042b6:	f7fc fd4e 	bl	8000d56 <EVENT_USB_Device_Connect>
		break;
 80042ba:	e05e      	b.n	800437a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_DISCONNECT:
		USB_DeviceState = DEVICE_STATE_Powered;
 80042bc:	4b30      	ldr	r3, [pc, #192]	; (8004380 <USBD_SignalDeviceEventHandler+0x214>)
 80042be:	2201      	movs	r2, #1
 80042c0:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Disconnect();
 80042c2:	f002 f8f3 	bl	80064ac <USB_Event_Stub>
		break;
 80042c6:	e058      	b.n	800437a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_POWER_OFF:
		 USB_DeviceState = DEVICE_STATE_Unattached;
 80042c8:	4b2d      	ldr	r3, [pc, #180]	; (8004380 <USBD_SignalDeviceEventHandler+0x214>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]
		 device.Driver->EndpointUnconfigure(0);
 80042ce:	4b2d      	ldr	r3, [pc, #180]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	2000      	movs	r0, #0
 80042d6:	4798      	blx	r3
		 break;
 80042d8:	e04f      	b.n	800437a <USBD_SignalDeviceEventHandler+0x20e>
    case XMC_USBD_EVENT_POWER_ON:
		 USB_DeviceState = DEVICE_STATE_Powered;
 80042da:	4b29      	ldr	r3, [pc, #164]	; (8004380 <USBD_SignalDeviceEventHandler+0x214>)
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
		 memset(&device,0x0,sizeof(USB_Device_t));
 80042e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80042e4:	2100      	movs	r1, #0
 80042e6:	4827      	ldr	r0, [pc, #156]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 80042e8:	f002 fbf6 	bl	8006ad8 <memset>
		 device.Driver = &Driver_USBD0;
 80042ec:	4b25      	ldr	r3, [pc, #148]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 80042ee:	4a26      	ldr	r2, [pc, #152]	; (8004388 <USBD_SignalDeviceEventHandler+0x21c>)
 80042f0:	601a      	str	r2, [r3, #0]
		 device.EP0_State = IDLE;
 80042f2:	4b24      	ldr	r3, [pc, #144]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
		 device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 80042fa:	4b22      	ldr	r3, [pc, #136]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 80042fc:	4a23      	ldr	r2, [pc, #140]	; (800438c <USBD_SignalDeviceEventHandler+0x220>)
 80042fe:	621a      	str	r2, [r3, #32]
		 device.Endpoints[0].InBufferLength = 256;
 8004300:	4b20      	ldr	r3, [pc, #128]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 8004302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004306:	625a      	str	r2, [r3, #36]	; 0x24
		 device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 8004308:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 800430a:	4a21      	ldr	r2, [pc, #132]	; (8004390 <USBD_SignalDeviceEventHandler+0x224>)
 800430c:	615a      	str	r2, [r3, #20]
		 device.Endpoints[0].OutBufferLength = 256;
 800430e:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 8004310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004314:	619a      	str	r2, [r3, #24]
		 device.Endpoints[0].Direction = 0;
 8004316:	4a1b      	ldr	r2, [pc, #108]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 8004318:	7913      	ldrb	r3, [r2, #4]
 800431a:	f36f 13c7 	bfc	r3, #7, #1
 800431e:	7113      	strb	r3, [r2, #4]
		 device.Endpoints[0].IsConfigured = 1;
 8004320:	4a18      	ldr	r2, [pc, #96]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 8004322:	7a13      	ldrb	r3, [r2, #8]
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	7213      	strb	r3, [r2, #8]
		 device.Endpoints[0].IsEnabled = 1;
 800432a:	4a16      	ldr	r2, [pc, #88]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 800432c:	7a13      	ldrb	r3, [r2, #8]
 800432e:	f043 0302 	orr.w	r3, r3, #2
 8004332:	7213      	strb	r3, [r2, #8]
		 device.Endpoints[0].MaxPacketSize = 64;
 8004334:	4a13      	ldr	r2, [pc, #76]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 8004336:	8913      	ldrh	r3, [r2, #8]
 8004338:	2140      	movs	r1, #64	; 0x40
 800433a:	f361 138c 	bfi	r3, r1, #6, #7
 800433e:	8113      	strh	r3, [r2, #8]

		  /* then configure endpoint 0 */
		 device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 8004340:	4b10      	ldr	r3, [pc, #64]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	2240      	movs	r2, #64	; 0x40
 8004348:	2100      	movs	r1, #0
 800434a:	2000      	movs	r0, #0
 800434c:	4798      	blx	r3
					   (uint8_t)XMC_USBD_MAX_PACKET_SIZE);

		break;
 800434e:	e014      	b.n	800437a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_REMOTE_WAKEUP:
		break;
	case XMC_USBD_EVENT_RESUME:
		USB_DeviceState = device.PreSuspendDeviceState;
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 8004352:	f893 213a 	ldrb.w	r2, [r3, #314]	; 0x13a
 8004356:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <USBD_SignalDeviceEventHandler+0x214>)
 8004358:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_WakeUp();
 800435a:	f002 f8a7 	bl	80064ac <USB_Event_Stub>
		break;
 800435e:	e00c      	b.n	800437a <USBD_SignalDeviceEventHandler+0x20e>
	case XMC_USBD_EVENT_SUSPEND:
		device.PreSuspendDeviceState = USB_DeviceState;
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <USBD_SignalDeviceEventHandler+0x214>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	4b07      	ldr	r3, [pc, #28]	; (8004384 <USBD_SignalDeviceEventHandler+0x218>)
 8004368:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		USB_DeviceState = DEVICE_STATE_Suspended;
 800436c:	4b04      	ldr	r3, [pc, #16]	; (8004380 <USBD_SignalDeviceEventHandler+0x214>)
 800436e:	2205      	movs	r2, #5
 8004370:	701a      	strb	r2, [r3, #0]
		EVENT_USB_Device_Suspend();
 8004372:	f002 f89b 	bl	80064ac <USB_Event_Stub>
		break;
 8004376:	e000      	b.n	800437a <USBD_SignalDeviceEventHandler+0x20e>
	default:
		return;
 8004378:	bf00      	nop
	}
}
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	20000ab4 	.word	0x20000ab4
 8004384:	20000524 	.word	0x20000524
 8004388:	08006e1c 	.word	0x08006e1c
 800438c:	20000664 	.word	0x20000664
 8004390:	20000764 	.word	0x20000764

08004394 <USBD_SignalEndpointEvent_Handler>:
 *
 * \param[in] ep_addr Endpoint address
 * \param[in] ep_event Endpoint event type
 *
 */
void USBD_SignalEndpointEvent_Handler (uint8_t ep_addr, XMC_USBD_EP_EVENT_t ep_event) {
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	460a      	mov	r2, r1
 800439e:	71fb      	strb	r3, [r7, #7]
 80043a0:	4613      	mov	r3, r2
 80043a2:	71bb      	strb	r3, [r7, #6]
	USBD_Endpoint_t *ep =  &device.Endpoints[ep_addr & ENDPOINT_EPNUM_MASK];
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	222c      	movs	r2, #44	; 0x2c
 80043ac:	fb02 f303 	mul.w	r3, r2, r3
 80043b0:	4a5e      	ldr	r2, [pc, #376]	; (800452c <USBD_SignalEndpointEvent_Handler+0x198>)
 80043b2:	4413      	add	r3, r2
 80043b4:	3304      	adds	r3, #4
 80043b6:	617b      	str	r3, [r7, #20]
	uint8_t temp_num,temp_dir;
	int32_t data_count;
	/* store CurrentEndpoint and direction for restore after handling */
	temp_num = device.CurrentEndpoint;
 80043b8:	4b5c      	ldr	r3, [pc, #368]	; (800452c <USBD_SignalEndpointEvent_Handler+0x198>)
 80043ba:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80043be:	74fb      	strb	r3, [r7, #19]
	temp_dir = device.CurrentDirection;
 80043c0:	4b5a      	ldr	r3, [pc, #360]	; (800452c <USBD_SignalEndpointEvent_Handler+0x198>)
 80043c2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 80043c6:	74bb      	strb	r3, [r7, #18]
	/* select the given endpoint */
	device.CurrentEndpoint = ep_addr & ENDPOINT_EPNUM_MASK;
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	4b56      	ldr	r3, [pc, #344]	; (800452c <USBD_SignalEndpointEvent_Handler+0x198>)
 80043d2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
	device.CurrentDirection = ep_addr & ENDPOINT_DIR_MASK;
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	4b53      	ldr	r3, [pc, #332]	; (800452c <USBD_SignalEndpointEvent_Handler+0x198>)
 80043e0:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	/* choose what to do based on the event */
	switch (ep_event) {
 80043e4:	79bb      	ldrb	r3, [r7, #6]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d03f      	beq.n	800446a <USBD_SignalEndpointEvent_Handler+0xd6>
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	f300 8093 	bgt.w	8004516 <USBD_SignalEndpointEvent_Handler+0x182>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <USBD_SignalEndpointEvent_Handler+0x66>
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d00f      	beq.n	8004418 <USBD_SignalEndpointEvent_Handler+0x84>
 80043f8:	e08d      	b.n	8004516 <USBD_SignalEndpointEvent_Handler+0x182>
	case XMC_USBD_EP_EVENT_SETUP:
		ep->OutInUse = 0;
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	8893      	ldrh	r3, [r2, #4]
 80043fe:	f36f 03c3 	bfc	r3, #3, #1
 8004402:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 8004404:	4b49      	ldr	r3, [pc, #292]	; (800452c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004406:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <USBD_SignalEndpointEvent_Handler+0x80>
		case 0:
			USBD_HandleEP0_SETUP();
 800440e:	f7ff fe63 	bl	80040d8 <USBD_HandleEP0_SETUP>
			break;
 8004412:	e000      	b.n	8004416 <USBD_SignalEndpointEvent_Handler+0x82>
		default:
			break;
 8004414:	bf00      	nop
		}
		break;
 8004416:	e07e      	b.n	8004516 <USBD_SignalEndpointEvent_Handler+0x182>
	case XMC_USBD_EP_EVENT_OUT:
		ep->IsOutRecieved = 1;
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	8893      	ldrh	r3, [r2, #4]
 800441c:	f043 0320 	orr.w	r3, r3, #32
 8004420:	8093      	strh	r3, [r2, #4]
		if (ep->OutBytesAvailable == 0) {
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d110      	bne.n	800444c <USBD_SignalEndpointEvent_Handler+0xb8>
			ep->OutOffset = 0; /* clear offset, new data is there */
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2200      	movs	r2, #0
 800442e:	60da      	str	r2, [r3, #12]
			ep->OutBytesAvailable = device.Driver->EndpointRead(ep->Address,ep->OutBuffer,ep->OutBufferLength);
 8004430:	4b3e      	ldr	r3, [pc, #248]	; (800452c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	7810      	ldrb	r0, [r2, #0]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	6911      	ldr	r1, [r2, #16]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	6952      	ldr	r2, [r2, #20]
 8004442:	4798      	blx	r3
 8004444:	4603      	mov	r3, r0
 8004446:	461a      	mov	r2, r3
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	609a      	str	r2, [r3, #8]
		}
		ep->OutInUse = 0;
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	8893      	ldrh	r3, [r2, #4]
 8004450:	f36f 03c3 	bfc	r3, #3, #1
 8004454:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 8004456:	4b35      	ldr	r3, [pc, #212]	; (800452c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004458:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800445c:	2b00      	cmp	r3, #0
 800445e:	d102      	bne.n	8004466 <USBD_SignalEndpointEvent_Handler+0xd2>
		case 0:
			USBD_HandleEP0_OUT();
 8004460:	f7ff fe10 	bl	8004084 <USBD_HandleEP0_OUT>
			break;
 8004464:	e000      	b.n	8004468 <USBD_SignalEndpointEvent_Handler+0xd4>
		default:
			break;
 8004466:	bf00      	nop
		}
		break;
 8004468:	e055      	b.n	8004516 <USBD_SignalEndpointEvent_Handler+0x182>
	case XMC_USBD_EP_EVENT_IN:
		/* loop write transfers */
		if (ep->InDataLeft> 0) {
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	2b00      	cmp	r3, #0
 8004470:	d017      	beq.n	80044a2 <USBD_SignalEndpointEvent_Handler+0x10e>
			data_count = device.Driver->EndpointWrite(ep->Address,ep->InDataBuffer,ep->InDataLeft);
 8004472:	4b2e      	ldr	r3, [pc, #184]	; (800452c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	7810      	ldrb	r0, [r2, #0]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004484:	4798      	blx	r3
 8004486:	60f8      	str	r0, [r7, #12]
			ep->InDataLeft -= data_count;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1ad2      	subs	r2, r2, r3
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	625a      	str	r2, [r3, #36]	; 0x24
			ep->InDataBuffer+= data_count;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	441a      	add	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	629a      	str	r2, [r3, #40]	; 0x28
			return;
 80044a0:	e041      	b.n	8004526 <USBD_SignalEndpointEvent_Handler+0x192>
		} else if (ep->Number == 0 && ep->InBytesAvailable > 0 && ep->InBytesAvailable!=USB_ControlRequest.wLength && ep->InBytesAvailable % ep->MaxPacketSize == 0) {
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d120      	bne.n	80044f2 <USBD_SignalEndpointEvent_Handler+0x15e>
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01c      	beq.n	80044f2 <USBD_SignalEndpointEvent_Handler+0x15e>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	4a1c      	ldr	r2, [pc, #112]	; (8004530 <USBD_SignalEndpointEvent_Handler+0x19c>)
 80044be:	88d2      	ldrh	r2, [r2, #6]
 80044c0:	b292      	uxth	r2, r2
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d015      	beq.n	80044f2 <USBD_SignalEndpointEvent_Handler+0x15e>
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	8892      	ldrh	r2, [r2, #4]
 80044ce:	f3c2 1286 	ubfx	r2, r2, #6, #7
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80044d8:	fb01 f202 	mul.w	r2, r1, r2
 80044dc:	1a9b      	subs	r3, r3, r2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d107      	bne.n	80044f2 <USBD_SignalEndpointEvent_Handler+0x15e>
			/* if the amount of data for endpoint 0 is exact the requested amount, then no zlp has to be send */
			device.Driver->EndpointWrite(ep->Address,0,0);
 80044e2:	4b12      	ldr	r3, [pc, #72]	; (800452c <USBD_SignalEndpointEvent_Handler+0x198>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	7810      	ldrb	r0, [r2, #0]
 80044ec:	2200      	movs	r2, #0
 80044ee:	2100      	movs	r1, #0
 80044f0:	4798      	blx	r3
		}
		ep->InBytesAvailable = 0;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2200      	movs	r2, #0
 80044f6:	619a      	str	r2, [r3, #24]
		ep->InInUse = 0;
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	8893      	ldrh	r3, [r2, #4]
 80044fc:	f36f 1304 	bfc	r3, #4, #1
 8004500:	8093      	strh	r3, [r2, #4]
		switch(device.CurrentEndpoint) {
 8004502:	4b0a      	ldr	r3, [pc, #40]	; (800452c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004504:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004508:	2b00      	cmp	r3, #0
 800450a:	d102      	bne.n	8004512 <USBD_SignalEndpointEvent_Handler+0x17e>
		case 0:
			USBD_HandleEP0_IN();
 800450c:	f7ff fd94 	bl	8004038 <USBD_HandleEP0_IN>
			break;
 8004510:	e000      	b.n	8004514 <USBD_SignalEndpointEvent_Handler+0x180>
		default:
			break;
 8004512:	bf00      	nop
		}
		break;
 8004514:	bf00      	nop
	}
	device.CurrentEndpoint = temp_num;
 8004516:	4a05      	ldr	r2, [pc, #20]	; (800452c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004518:	7cfb      	ldrb	r3, [r7, #19]
 800451a:	f882 313c 	strb.w	r3, [r2, #316]	; 0x13c
	device.CurrentDirection = temp_dir;
 800451e:	4a03      	ldr	r2, [pc, #12]	; (800452c <USBD_SignalEndpointEvent_Handler+0x198>)
 8004520:	7cbb      	ldrb	r3, [r7, #18]
 8004522:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
}
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000524 	.word	0x20000524
 8004530:	20000aac 	.word	0x20000aac

08004534 <USBD_Initialize>:
 * \brief Initialize driver core and driver
 *
 * Intializes the USB driver core data structures and sets it into default state. Afterwards
 * it initializes the USB device controller driver and prepare it for connection via \ref USBD_Connect.
 */
int USBD_Initialize(XMC_USBD_t *usb_init) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
	int32_t status = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]
	memset(&device,0x0,sizeof(USB_Device_t));
 8004540:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004544:	2100      	movs	r1, #0
 8004546:	4829      	ldr	r0, [pc, #164]	; (80045ec <USBD_Initialize+0xb8>)
 8004548:	f002 fac6 	bl	8006ad8 <memset>
	USB_DeviceState = DEVICE_STATE_Unattached;
 800454c:	4b28      	ldr	r3, [pc, #160]	; (80045f0 <USBD_Initialize+0xbc>)
 800454e:	2200      	movs	r2, #0
 8004550:	701a      	strb	r2, [r3, #0]
	device.Driver = &Driver_USBD0;
 8004552:	4b26      	ldr	r3, [pc, #152]	; (80045ec <USBD_Initialize+0xb8>)
 8004554:	4a27      	ldr	r2, [pc, #156]	; (80045f4 <USBD_Initialize+0xc0>)
 8004556:	601a      	str	r2, [r3, #0]
	device.EP0_State = IDLE;
 8004558:	4b24      	ldr	r3, [pc, #144]	; (80045ec <USBD_Initialize+0xb8>)
 800455a:	2201      	movs	r2, #1
 800455c:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
	device.Endpoints[0].InBuffer = endpoint0_in_buffer;
 8004560:	4b22      	ldr	r3, [pc, #136]	; (80045ec <USBD_Initialize+0xb8>)
 8004562:	4a25      	ldr	r2, [pc, #148]	; (80045f8 <USBD_Initialize+0xc4>)
 8004564:	621a      	str	r2, [r3, #32]
	device.Endpoints[0].InBufferLength = 256;
 8004566:	4b21      	ldr	r3, [pc, #132]	; (80045ec <USBD_Initialize+0xb8>)
 8004568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800456c:	625a      	str	r2, [r3, #36]	; 0x24
	device.Endpoints[0].OutBuffer = endpoint0_out_buffer;
 800456e:	4b1f      	ldr	r3, [pc, #124]	; (80045ec <USBD_Initialize+0xb8>)
 8004570:	4a22      	ldr	r2, [pc, #136]	; (80045fc <USBD_Initialize+0xc8>)
 8004572:	615a      	str	r2, [r3, #20]
	device.Endpoints[0].OutBufferLength = 256;
 8004574:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <USBD_Initialize+0xb8>)
 8004576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800457a:	619a      	str	r2, [r3, #24]
	device.Endpoints[0].Direction = 0;
 800457c:	4a1b      	ldr	r2, [pc, #108]	; (80045ec <USBD_Initialize+0xb8>)
 800457e:	7913      	ldrb	r3, [r2, #4]
 8004580:	f36f 13c7 	bfc	r3, #7, #1
 8004584:	7113      	strb	r3, [r2, #4]
	device.Endpoints[0].IsConfigured = 1;
 8004586:	4a19      	ldr	r2, [pc, #100]	; (80045ec <USBD_Initialize+0xb8>)
 8004588:	7a13      	ldrb	r3, [r2, #8]
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].IsEnabled = 1;
 8004590:	4a16      	ldr	r2, [pc, #88]	; (80045ec <USBD_Initialize+0xb8>)
 8004592:	7a13      	ldrb	r3, [r2, #8]
 8004594:	f043 0302 	orr.w	r3, r3, #2
 8004598:	7213      	strb	r3, [r2, #8]
	device.Endpoints[0].MaxPacketSize = 64;
 800459a:	4a14      	ldr	r2, [pc, #80]	; (80045ec <USBD_Initialize+0xb8>)
 800459c:	8913      	ldrh	r3, [r2, #8]
 800459e:	2140      	movs	r1, #64	; 0x40
 80045a0:	f361 138c 	bfi	r3, r1, #6, #7
 80045a4:	8113      	strh	r3, [r2, #8]

	/* First initalize the device */
	status = device.Driver->Initialize(usb_init);
 80045a6:	4b11      	ldr	r3, [pc, #68]	; (80045ec <USBD_Initialize+0xb8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	4798      	blx	r3
 80045b0:	4603      	mov	r3, r0
 80045b2:	60fb      	str	r3, [r7, #12]
	if (status != XMC_USBD_STATUS_OK)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d002      	beq.n	80045c0 <USBD_Initialize+0x8c>
		return -1;
 80045ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045be:	e011      	b.n	80045e4 <USBD_Initialize+0xb0>

	/* then configure endpoint 0 */
	device.Driver->EndpointConfigure(0,XMC_USBD_ENDPOINT_TYPE_CONTROL,
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <USBD_Initialize+0xb8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	2240      	movs	r2, #64	; 0x40
 80045c8:	2100      	movs	r1, #0
 80045ca:	2000      	movs	r0, #0
 80045cc:	4798      	blx	r3
			(uint8_t)XMC_USBD_MAX_PACKET_SIZE);
	if (status != XMC_USBD_STATUS_OK) {
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d006      	beq.n	80045e2 <USBD_Initialize+0xae>
		device.Driver->Uninitialize();
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <USBD_Initialize+0xb8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	4798      	blx	r3
		return -1;
 80045dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045e0:	e000      	b.n	80045e4 <USBD_Initialize+0xb0>
	}

	return 0;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20000524 	.word	0x20000524
 80045f0:	20000ab4 	.word	0x20000ab4
 80045f4:	08006e1c 	.word	0x08006e1c
 80045f8:	20000664 	.word	0x20000664
 80045fc:	20000764 	.word	0x20000764

08004600 <USB_IsEnumDone>:
/**
 * \brief Is the enumeration finished?
 *
 * Tell the USB device controller driver if the enumeration interrupt have been reached
 */
int USB_IsEnumDone(void){
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
	if (device.Driver->IsEnumDone())
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <USB_IsEnumDone+0x1c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	4798      	blx	r3
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <USB_IsEnumDone+0x16>
		return 1;
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <USB_IsEnumDone+0x18>
	else
		return 0;
 8004616:	2300      	movs	r3, #0
 }
 8004618:	4618      	mov	r0, r3
 800461a:	bd80      	pop	{r7, pc}
 800461c:	20000524 	.word	0x20000524

08004620 <USBD_SetEndpointBuffer>:
 *
 * \param[in] addr Endpoint address
 * \param[in] buf Buffer pointer
 * \param[in] len Buffer length
 */
void USBD_SetEndpointBuffer(uint8_t addr,uint8_t *buf,uint16_t len) {
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	6039      	str	r1, [r7, #0]
 800462a:	71fb      	strb	r3, [r7, #7]
 800462c:	4613      	mov	r3, r2
 800462e:	80bb      	strh	r3, [r7, #4]
	uint8_t number  = addr & ENDPOINT_EPNUM_MASK;
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	73fb      	strb	r3, [r7, #15]
	if (addr & ENDPOINT_DIR_MASK) {
 8004638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463c:	2b00      	cmp	r3, #0
 800463e:	da12      	bge.n	8004666 <USBD_SetEndpointBuffer+0x46>
		device.Endpoints[number].InBuffer = buf;
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	4a15      	ldr	r2, [pc, #84]	; (8004698 <USBD_SetEndpointBuffer+0x78>)
 8004644:	212c      	movs	r1, #44	; 0x2c
 8004646:	fb01 f303 	mul.w	r3, r1, r3
 800464a:	4413      	add	r3, r2
 800464c:	3320      	adds	r3, #32
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	601a      	str	r2, [r3, #0]
		device.Endpoints[number].InBufferLength = len;
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	88ba      	ldrh	r2, [r7, #4]
 8004656:	4910      	ldr	r1, [pc, #64]	; (8004698 <USBD_SetEndpointBuffer+0x78>)
 8004658:	202c      	movs	r0, #44	; 0x2c
 800465a:	fb00 f303 	mul.w	r3, r0, r3
 800465e:	440b      	add	r3, r1
 8004660:	3324      	adds	r3, #36	; 0x24
 8004662:	601a      	str	r2, [r3, #0]
	} else {
		device.Endpoints[number].OutBuffer = buf;
		device.Endpoints[number].OutBufferLength = len;
	}
}
 8004664:	e011      	b.n	800468a <USBD_SetEndpointBuffer+0x6a>
		device.Endpoints[number].OutBuffer = buf;
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	4a0b      	ldr	r2, [pc, #44]	; (8004698 <USBD_SetEndpointBuffer+0x78>)
 800466a:	212c      	movs	r1, #44	; 0x2c
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	4413      	add	r3, r2
 8004672:	3314      	adds	r3, #20
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	601a      	str	r2, [r3, #0]
		device.Endpoints[number].OutBufferLength = len;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	88ba      	ldrh	r2, [r7, #4]
 800467c:	4906      	ldr	r1, [pc, #24]	; (8004698 <USBD_SetEndpointBuffer+0x78>)
 800467e:	202c      	movs	r0, #44	; 0x2c
 8004680:	fb00 f303 	mul.w	r3, r0, r3
 8004684:	440b      	add	r3, r1
 8004686:	3318      	adds	r3, #24
 8004688:	601a      	str	r2, [r3, #0]
}
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000524 	.word	0x20000524

0800469c <XMC_USBD_lDeviceActive>:
 * Therefore the endpoint inInUse flag are checked and if one endpoint is in use, 1 is returned,
 * else 0 is returned.
 * @return 1 if an endpoint is active else 0
 */
uint8_t XMC_USBD_lDeviceActive(const XMC_USBD_t *const obj) 
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t result = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 80046a8:	2300      	movs	r3, #0
 80046aa:	73fb      	strb	r3, [r7, #15]
 80046ac:	e01c      	b.n	80046e8 <XMC_USBD_lDeviceActive+0x4c>
  {
    if (xmc_device.ep[i].inInUse || xmc_device.ep[i].outInUse)
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	4a13      	ldr	r2, [pc, #76]	; (8004700 <XMC_USBD_lDeviceActive+0x64>)
 80046b2:	2134      	movs	r1, #52	; 0x34
 80046b4:	fb01 f303 	mul.w	r3, r1, r3
 80046b8:	4413      	add	r3, r2
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10b      	bne.n	80046de <XMC_USBD_lDeviceActive+0x42>
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	4a0d      	ldr	r2, [pc, #52]	; (8004700 <XMC_USBD_lDeviceActive+0x64>)
 80046ca:	2134      	movs	r1, #52	; 0x34
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	4413      	add	r3, r2
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <XMC_USBD_lDeviceActive+0x46>
    {
      result = 1U;
 80046de:	2301      	movs	r3, #1
 80046e0:	73bb      	strb	r3, [r7, #14]
  for (i = 0U; i < (uint8_t)obj->usbd_max_num_eps; i++)
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	3301      	adds	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	7b1b      	ldrb	r3, [r3, #12]
 80046ec:	7bfa      	ldrb	r2, [r7, #15]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d3dd      	bcc.n	80046ae <XMC_USBD_lDeviceActive+0x12>
    }
  }
  return result;
 80046f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	2000089c 	.word	0x2000089c

08004704 <XMC_USBD_lReadFifo>:
 *
 * @arg ep_num the endpoint to read for
 * @arg byte_count the byte count to read
 */
static void XMC_USBD_lReadFifo(const uint32_t ep_num,const uint32_t byte_count) 
{
 8004704:	b480      	push	{r7}
 8004706:	b08b      	sub	sp, #44	; 0x2c
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num];
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2234      	movs	r2, #52	; 0x34
 8004712:	fb02 f303 	mul.w	r3, r2, r3
 8004716:	4a34      	ldr	r2, [pc, #208]	; (80047e8 <XMC_USBD_lReadFifo+0xe4>)
 8004718:	4413      	add	r3, r2
 800471a:	623b      	str	r3, [r7, #32]
  uint32_t word_count;
  uint32_t temp_data;
  uint32_t temp_word_count;
  volatile uint32_t *fifo = xmc_device.fifo[0U];
 800471c:	4b32      	ldr	r3, [pc, #200]	; (80047e8 <XMC_USBD_lReadFifo+0xe4>)
 800471e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8004722:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  depctl_data_t data;
  data.d32 = xmc_device.endpoint_out_register[ep_num]->doepctl;
 8004724:	4a30      	ldr	r2, [pc, #192]	; (80047e8 <XMC_USBD_lReadFifo+0xe4>)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3370      	adds	r3, #112	; 0x70
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60fb      	str	r3, [r7, #12]
  word_count = (byte_count >> 2U );
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	089b      	lsrs	r3, r3, #2
 8004738:	61bb      	str	r3, [r7, #24]
  temp_word_count = (word_count << 2U);
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	617b      	str	r3, [r7, #20]
  /* Check if ep is enabled and has buffer */
  if (!data.b.usbactep)
 8004740:	7b7b      	ldrb	r3, [r7, #13]
 8004742:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d047      	beq.n	80047dc <XMC_USBD_lReadFifo+0xd8>
  {
    /*Do Nothing*/
  }
  else if (ep->xferBuffer == NULL)
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	2b00      	cmp	r3, #0
 8004752:	d043      	beq.n	80047dc <XMC_USBD_lReadFifo+0xd8>
	/*Do Nothing*/
  }
  else
  {
    /* store the data */
    for (i = 0U;i < word_count; i++)
 8004754:	2300      	movs	r3, #0
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
 8004758:	e00a      	b.n	8004770 <XMC_USBD_lReadFifo+0x6c>
    {
      *(((uint32_t*)ep->xferBuffer)+i) = *fifo;
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	601a      	str	r2, [r3, #0]
    for (i = 0U;i < word_count; i++)
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	3301      	adds	r3, #1
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
 8004770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	429a      	cmp	r2, r3
 8004776:	d3f0      	bcc.n	800475a <XMC_USBD_lReadFifo+0x56>
    }
    /* space is not devidable by 4 */
    if (byte_count!=temp_word_count)
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	429a      	cmp	r2, r3
 800477e:	d021      	beq.n	80047c4 <XMC_USBD_lReadFifo+0xc0>
    {
      temp_data = *fifo;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	613b      	str	r3, [r7, #16]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 8004786:	2300      	movs	r3, #0
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
 800478a:	e015      	b.n	80047b8 <XMC_USBD_lReadFifo+0xb4>
      {
        ep->xferBuffer[(word_count << 2)+i] = (uint8_t)((temp_data & ((uint32_t)0xFFU << (i * 8U))) >> (i * 8U));
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	22ff      	movs	r2, #255	; 0xff
 8004792:	409a      	lsls	r2, r3
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	401a      	ands	r2, r3
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	fa22 f003 	lsr.w	r0, r2, r3
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	0099      	lsls	r1, r3, #2
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	440b      	add	r3, r1
 80047ac:	4413      	add	r3, r2
 80047ae:	b2c2      	uxtb	r2, r0
 80047b0:	701a      	strb	r2, [r3, #0]
      for (i = 0U;(temp_word_count + i) < byte_count;i++)
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	3301      	adds	r3, #1
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	4413      	add	r3, r2
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d8e3      	bhi.n	800478c <XMC_USBD_lReadFifo+0x88>
      }
    }

    /* save the amount of data */
    ep->xferCount += byte_count;
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	441a      	add	r2, r3
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferBuffer += byte_count;
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	441a      	add	r2, r3
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80047dc:	bf00      	nop
 80047de:	372c      	adds	r7, #44	; 0x2c
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	2000089c 	.word	0x2000089c

080047ec <XMC_USBD_lWriteFifo>:
 *
 * @arg[in] ep the endpoint to use
 * @return the number of bytes written to the fifo
 */
static uint32_t XMC_USBD_lWriteFifo(XMC_USBD_EP_t *const ep) 
{
 80047ec:	b480      	push	{r7}
 80047ee:	b089      	sub	sp, #36	; 0x24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  volatile uint32_t *fifo;
  uint32_t byte_count;
  uint32_t word_count;
  uint32_t result;
  uint32_t i;
  fifo = xmc_device.fifo[ep->address_u.address_st.number]; /* fifo */
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	4a23      	ldr	r2, [pc, #140]	; (800488c <XMC_USBD_lWriteFifo+0xa0>)
 8004800:	3378      	adds	r3, #120	; 0x78
 8004802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004806:	60fb      	str	r3, [r7, #12]
  freeSpace.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dtxfsts;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004810:	b2db      	uxtb	r3, r3
 8004812:	4a1e      	ldr	r2, [pc, #120]	; (800488c <XMC_USBD_lWriteFifo+0xa0>)
 8004814:	336a      	adds	r3, #106	; 0x6a
 8004816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	60bb      	str	r3, [r7, #8]
  /* calculate the length and the amount of dwords to copy based on the fifo status */
  byte_count = ep->xferLength - ep->xferCount;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	61fb      	str	r3, [r7, #28]
  if (!byte_count)
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d102      	bne.n	8004836 <XMC_USBD_lWriteFifo+0x4a>
  {
    result = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e023      	b.n	800487e <XMC_USBD_lWriteFifo+0x92>
  }
  else
  {
    /* add the unaligned bytes to the word count to compare with the fifo space */
    word_count = ((uint32_t)byte_count + 3U) >> 2U;
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	3303      	adds	r3, #3
 800483a:	089b      	lsrs	r3, r3, #2
 800483c:	61bb      	str	r3, [r7, #24]
    if (word_count > (uint32_t)freeSpace.b.txfspcavail )
 800483e:	893b      	ldrh	r3, [r7, #8]
 8004840:	461a      	mov	r2, r3
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	4293      	cmp	r3, r2
 8004846:	d904      	bls.n	8004852 <XMC_USBD_lWriteFifo+0x66>
    {
      word_count = (uint32_t)freeSpace.b.txfspcavail;
 8004848:	893b      	ldrh	r3, [r7, #8]
 800484a:	61bb      	str	r3, [r7, #24]
      byte_count = (uint32_t)word_count << (uint32_t)2U;
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	61fb      	str	r3, [r7, #28]
    }

    /* copy data dword wise */
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	e00c      	b.n	8004872 <XMC_USBD_lWriteFifo+0x86>
    {
      *fifo = *(uint32_t*)ep->xferBuffer;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	601a      	str	r2, [r3, #0]
      i++;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	3301      	adds	r3, #1
 8004866:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < word_count;ep->xferBuffer+= 4U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	1d1a      	adds	r2, r3, #4
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	625a      	str	r2, [r3, #36]	; 0x24
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	429a      	cmp	r2, r3
 8004878:	d3ee      	bcc.n	8004858 <XMC_USBD_lWriteFifo+0x6c>
    }
    result=byte_count;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	617b      	str	r3, [r7, #20]
  }
  return result;
 800487e:	697b      	ldr	r3, [r7, #20]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3724      	adds	r7, #36	; 0x24
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	2000089c 	.word	0x2000089c

08004890 <XMC_USBD_lFlushTXFifo>:
 * @param[in] fifo_num Fifo number to flush
 *
 * @note Use 0x10 as parameter to flush all tx fifos.
 */
static void XMC_USBD_lFlushTXFifo(const uint8_t fifo_num) 
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	71fb      	strb	r3, [r7, #7]
  volatile grstctl_t data;  
  uint32_t count;
  data.d32 = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	60bb      	str	r3, [r7, #8]
  /*flush fifo */
  data.b.txfflsh = 1U;
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f043 0320 	orr.w	r3, r3, #32
 80048a4:	60bb      	str	r3, [r7, #8]
  data.b.txfnum = fifo_num;
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	f003 031f 	and.w	r3, r3, #31
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f362 138a 	bfi	r3, r2, #6, #5
 80048b4:	60bb      	str	r3, [r7, #8]
  xmc_device.global_register->grstctl = data.d32;
 80048b6:	4b15      	ldr	r3, [pc, #84]	; (800490c <XMC_USBD_lFlushTXFifo+0x7c>)
 80048b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	611a      	str	r2, [r3, #16]
  for (count = 0U;count < 1000U; count++){}
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	e002      	b.n	80048cc <XMC_USBD_lFlushTXFifo+0x3c>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3301      	adds	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048d2:	d3f8      	bcc.n	80048c6 <XMC_USBD_lFlushTXFifo+0x36>
  do
  {
   data.d32 = xmc_device.global_register->grstctl;
 80048d4:	4b0d      	ldr	r3, [pc, #52]	; (800490c <XMC_USBD_lFlushTXFifo+0x7c>)
 80048d6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	60bb      	str	r3, [r7, #8]
  } while (data.b.txfflsh);
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f4      	bne.n	80048d4 <XMC_USBD_lFlushTXFifo+0x44>
    count = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
  while (count++ < 1000U)
 80048ee:	bf00      	nop
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	60fa      	str	r2, [r7, #12]
 80048f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048fa:	d3f9      	bcc.n	80048f0 <XMC_USBD_lFlushTXFifo+0x60>
  {
    /* wait 3 phy clocks */
  }
}
 80048fc:	bf00      	nop
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	2000089c 	.word	0x2000089c

08004910 <XMC_USBD_lFlushRXFifo>:

/**
 * @brief Flush the rx fifo
 */
static void XMC_USBD_lFlushRXFifo(void) 
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
  volatile grstctl_t data;  
  uint32_t count;
	
	data.d32 = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	603b      	str	r3, [r7, #0]
  data.b.rxfflsh = 1U;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	f043 0310 	orr.w	r3, r3, #16
 8004920:	603b      	str	r3, [r7, #0]
  /* flush FIFO */
  xmc_device.global_register->grstctl = data.d32;
 8004922:	4b15      	ldr	r3, [pc, #84]	; (8004978 <XMC_USBD_lFlushRXFifo+0x68>)
 8004924:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	611a      	str	r2, [r3, #16]
  do
  {
    for (count = 0U; count < 1000U; count++){}
 800492c:	2300      	movs	r3, #0
 800492e:	607b      	str	r3, [r7, #4]
 8004930:	e002      	b.n	8004938 <XMC_USBD_lFlushRXFifo+0x28>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3301      	adds	r3, #1
 8004936:	607b      	str	r3, [r7, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800493e:	d3f8      	bcc.n	8004932 <XMC_USBD_lFlushRXFifo+0x22>
    data.d32 = xmc_device.global_register->grstctl;
 8004940:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <XMC_USBD_lFlushRXFifo+0x68>)
 8004942:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	603b      	str	r3, [r7, #0]
  } while (data.b.rxfflsh);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1ea      	bne.n	800492c <XMC_USBD_lFlushRXFifo+0x1c>
  count = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	607b      	str	r3, [r7, #4]
  while (count++ < 1000U)
 800495a:	bf00      	nop
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	607a      	str	r2, [r7, #4]
 8004962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004966:	d3f9      	bcc.n	800495c <XMC_USBD_lFlushRXFifo+0x4c>
  {
    /* wait 3 phy clocks */
  }
}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	2000089c 	.word	0x2000089c

0800497c <XMC_USBD_lAssignTXFifo>:
 * A free tx fifo will be searched and the number will be returned.
 *
 * @return Fifo number for a free fifo
 */
static uint8_t XMC_USBD_lAssignTXFifo(void) 
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
  uint16_t mask = 1U;
 8004982:	2301      	movs	r3, #1
 8004984:	80fb      	strh	r3, [r7, #6]
  uint8_t i = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	717b      	strb	r3, [r7, #5]
  uint8_t result = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	713b      	strb	r3, [r7, #4]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 800498e:	e005      	b.n	800499c <XMC_USBD_lAssignTXFifo+0x20>
  {
    mask = (uint16_t)(mask << 1U);
 8004990:	88fb      	ldrh	r3, [r7, #6]
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	80fb      	strh	r3, [r7, #6]
    i++;
 8004996:	797b      	ldrb	r3, [r7, #5]
 8004998:	3301      	adds	r3, #1
 800499a:	717b      	strb	r3, [r7, #5]
  while( (i < (uint8_t)XMC_USBD_NUM_TX_FIFOS)&&((xmc_device.txfifomsk & mask) != 0U))
 800499c:	797b      	ldrb	r3, [r7, #5]
 800499e:	2b06      	cmp	r3, #6
 80049a0:	d807      	bhi.n	80049b2 <XMC_USBD_lAssignTXFifo+0x36>
 80049a2:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <XMC_USBD_lAssignTXFifo+0x6c>)
 80049a4:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	4013      	ands	r3, r2
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1ee      	bne.n	8004990 <XMC_USBD_lAssignTXFifo+0x14>
  }
  if ((xmc_device.txfifomsk & mask) == 0U)
 80049b2:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <XMC_USBD_lAssignTXFifo+0x6c>)
 80049b4:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80049b8:	88fb      	ldrh	r3, [r7, #6]
 80049ba:	4013      	ands	r3, r2
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <XMC_USBD_lAssignTXFifo+0x5c>
  {
    xmc_device.txfifomsk |= mask;
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <XMC_USBD_lAssignTXFifo+0x6c>)
 80049c4:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <XMC_USBD_lAssignTXFifo+0x6c>)
 80049d0:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    result=i;
 80049d4:	797b      	ldrb	r3, [r7, #5]
 80049d6:	713b      	strb	r3, [r7, #4]
  }
  return result;
 80049d8:	793b      	ldrb	r3, [r7, #4]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	2000089c 	.word	0x2000089c

080049ec <XMC_USBD_lUnassignFifo>:
 *
 * Mark an used tx fifo as free.
 * @param[in] fifo_nr Fifo number to free
 */
static void XMC_USBD_lUnassignFifo(const uint8_t fifo_nr) 
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4603      	mov	r3, r0
 80049f4:	71fb      	strb	r3, [r7, #7]
  xmc_device.txfifomsk = (uint16_t)((uint32_t)xmc_device.txfifomsk & (uint32_t)(~((uint32_t)((uint32_t)1U << fifo_nr))));
 80049f6:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <XMC_USBD_lUnassignFifo+0x34>)
 80049f8:	f8b3 21fc 	ldrh.w	r2, [r3, #508]	; 0x1fc
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	2101      	movs	r1, #1
 8004a00:	fa01 f303 	lsl.w	r3, r1, r3
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	43db      	mvns	r3, r3
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <XMC_USBD_lUnassignFifo+0x34>)
 8004a10:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	2000089c 	.word	0x2000089c

08004a24 <XMC_USBD_lStartReadXfer>:
 * that the transfer values are reasonable (e.g. buffer size is not exceeded).
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartReadXfer(XMC_USBD_EP_t *const ep) 
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  deptsiz_data_t data;
  depctl_data_t epctl;
	
  data.d32 =  0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	613b      	str	r3, [r7, #16]
  if ((ep->xferTotal - ep->xferLength) > ep->maxTransferSize)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6892      	ldr	r2, [r2, #8]
 8004a3e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d909      	bls.n	8004a5a <XMC_USBD_lStartReadXfer+0x36>
  {
    ep->xferLength += ep->maxTransferSize;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6892      	ldr	r2, [r2, #8]
 8004a4e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8004a52:	441a      	add	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28
 8004a58:	e003      	b.n	8004a62 <XMC_USBD_lStartReadXfer+0x3e>
  }
  else
  {
    ep->xferLength = ep->xferTotal;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->address_u.address_st.number == 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d118      	bne.n	8004aa2 <XMC_USBD_lStartReadXfer+0x7e>
  {
	/* Setup the endpoint to receive 3 setup packages and one normal package.*/
	/* Cast the data pointer to use only one variable */
    deptsiz0_data_t *ep0_data = (deptsiz0_data_t*)&data;
 8004a70:	f107 0310 	add.w	r3, r7, #16
 8004a74:	617b      	str	r3, [r7, #20]
    ep0_data->b.pktcnt = 0x1U;
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	7893      	ldrb	r3, [r2, #2]
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	f361 03c4 	bfi	r3, r1, #3, #2
 8004a80:	7093      	strb	r3, [r2, #2]
    ep0_data->b.supcnt = 0x3U;
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	78d3      	ldrb	r3, [r2, #3]
 8004a86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a8a:	70d3      	strb	r3, [r2, #3]
    ep0_data->b.xfersize = (uint8_t)ep->xferTotal;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a94:	b2d9      	uxtb	r1, r3
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	7813      	ldrb	r3, [r2, #0]
 8004a9a:	f361 0306 	bfi	r3, r1, #0, #7
 8004a9e:	7013      	strb	r3, [r2, #0]
 8004aa0:	e032      	b.n	8004b08 <XMC_USBD_lStartReadXfer+0xe4>
  }
  else
  {
    /* If requested length is zero, just receive one zero length packet */
    if (ep->xferLength == 0U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <XMC_USBD_lStartReadXfer+0x9a>
    {
      data.b.xfersize = 0U;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f36f 0312 	bfc	r3, #0, #19
 8004ab0:	613b      	str	r3, [r7, #16]
      data.b.pktcnt = 1U;
 8004ab2:	8a7b      	ldrh	r3, [r7, #18]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f362 03cc 	bfi	r3, r2, #3, #10
 8004aba:	827b      	strh	r3, [r7, #18]
 8004abc:	e024      	b.n	8004b08 <XMC_USBD_lStartReadXfer+0xe4>
    }
    else
    {
      /* setup endpoint to recive a amount of packages by given size */
      data.b.pktcnt = (uint16_t)(((ep->xferLength - ep->xferCount) + (ep->maxPacketSize -(uint32_t)1U))/ep->maxPacketSize);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6852      	ldr	r2, [r2, #4]
 8004acc:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6852      	ldr	r2, [r2, #4]
 8004ada:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	8a7b      	ldrh	r3, [r7, #18]
 8004aec:	f362 03cc 	bfi	r3, r2, #3, #10
 8004af0:	827b      	strh	r3, [r7, #18]
      data.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f362 0312 	bfi	r3, r2, #0, #19
 8004b06:	613b      	str	r3, [r7, #16]
    }
  }
  if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004b08:	4b22      	ldr	r3, [pc, #136]	; (8004b94 <XMC_USBD_lStartReadXfer+0x170>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	7b5b      	ldrb	r3, [r3, #13]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10d      	bne.n	8004b2e <XMC_USBD_lStartReadXfer+0x10a>
  {
    /* Programm dma address if needed */
    xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepdma = (uint32_t)(ep->xferBuffer);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	4a1d      	ldr	r2, [pc, #116]	; (8004b98 <XMC_USBD_lStartReadXfer+0x174>)
 8004b22:	3370      	adds	r3, #112	; 0x70
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	460a      	mov	r2, r1
 8004b2c:	615a      	str	r2, [r3, #20]
  }
  /* setup endpoint size and enable endpoint */
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doeptsiz = data.d32;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	4a17      	ldr	r2, [pc, #92]	; (8004b98 <XMC_USBD_lStartReadXfer+0x174>)
 8004b3a:	3370      	adds	r3, #112	; 0x70
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	611a      	str	r2, [r3, #16]
 
  epctl.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	4a11      	ldr	r2, [pc, #68]	; (8004b98 <XMC_USBD_lStartReadXfer+0x174>)
 8004b52:	3370      	adds	r3, #112	; 0x70
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60fb      	str	r3, [r7, #12]
  epctl.b.cnak = 1U;
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	f043 0304 	orr.w	r3, r3, #4
 8004b64:	73fb      	strb	r3, [r7, #15]
  epctl.b.epena = 1U;
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6c:	73fb      	strb	r3, [r7, #15]
  xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = epctl.d32;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	4a07      	ldr	r2, [pc, #28]	; (8004b98 <XMC_USBD_lStartReadXfer+0x174>)
 8004b7a:	3370      	adds	r3, #112	; 0x70
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	601a      	str	r2, [r3, #0]
}
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000aa4 	.word	0x20000aa4
 8004b98:	2000089c 	.word	0x2000089c

08004b9c <XMC_USBD_lStartWriteXfer>:
 * to start a new in transfer
 *
 * @param[in] ep Endpoint to start the transfer
 */
static void XMC_USBD_lStartWriteXfer(XMC_USBD_EP_t *const ep) 
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  deptsiz_data_t size;
  depctl_data_t ctl;
	
  size.d32 = 0U;  
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]
  ctl.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	4a5e      	ldr	r2, [pc, #376]	; (8004d2c <XMC_USBD_lStartWriteXfer+0x190>)
 8004bb4:	336a      	adds	r3, #106	; 0x6a
 8004bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60bb      	str	r3, [r7, #8]

  if ((ep->xferTotal - ep->xferLength)  < ep->maxTransferSize)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6892      	ldr	r2, [r2, #8]
 8004bcc:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d204      	bcs.n	8004bde <XMC_USBD_lStartWriteXfer+0x42>
  {
    ep->xferLength = ep->xferTotal;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28
 8004bdc:	e008      	b.n	8004bf0 <XMC_USBD_lStartWriteXfer+0x54>
  }
  else
  {
    ep->xferLength += ep->maxTransferSize;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6892      	ldr	r2, [r2, #8]
 8004be6:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8004bea:	441a      	add	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (ep->xferLength == 0U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <XMC_USBD_lStartWriteXfer+0x70>
  {
    size.b.xfersize = 0U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f36f 0312 	bfc	r3, #0, #19
 8004bfe:	60fb      	str	r3, [r7, #12]
    size.b.pktcnt = 1U;
 8004c00:	89fb      	ldrh	r3, [r7, #14]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f362 03cc 	bfi	r3, r2, #3, #10
 8004c08:	81fb      	strh	r3, [r7, #14]
 8004c0a:	e06b      	b.n	8004ce4 <XMC_USBD_lStartWriteXfer+0x148>
  }
  else
  {
    if (ep->address_u.address_st.number == 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	f003 030f 	and.w	r3, r3, #15
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d110      	bne.n	8004c3c <XMC_USBD_lStartWriteXfer+0xa0>
    {
      size.b.pktcnt = 1U;
 8004c1a:	89fb      	ldrh	r3, [r7, #14]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f362 03cc 	bfi	r3, r2, #3, #10
 8004c22:	81fb      	strh	r3, [r7, #14]
      /* ep->maxXferSize equals maxPacketSize */
      size.b.xfersize = (uint32_t)(ep->xferLength - ep->xferCount);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f362 0312 	bfi	r3, r2, #0, #19
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	e02a      	b.n	8004c92 <XMC_USBD_lStartWriteXfer+0xf6>
    }
    else
    {
      size.b.xfersize =(uint32_t)(ep->xferLength - ep->xferCount);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f362 0312 	bfi	r3, r2, #0, #19
 8004c50:	60fb      	str	r3, [r7, #12]
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f3c3 23c6 	ubfx	r3, r3, #11, #7
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	4413      	add	r3, r2
    		 ep->maxPacketSize);
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6852      	ldr	r2, [r2, #4]
 8004c7a:	f3c2 22c6 	ubfx	r2, r2, #11, #7
 8004c7e:	b2d2      	uxtb	r2, r2
      size.b.pktcnt = (uint16_t)(((uint16_t)(ep->xferLength - ep->xferCount) + (uint16_t)((uint16_t)ep->maxPacketSize - 1U))/
 8004c80:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	89fb      	ldrh	r3, [r7, #14]
 8004c8c:	f362 03cc 	bfi	r3, r2, #3, #10
 8004c90:	81fb      	strh	r3, [r7, #14]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004c92:	4b27      	ldr	r3, [pc, #156]	; (8004d30 <XMC_USBD_lStartWriteXfer+0x194>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	7b5b      	ldrb	r3, [r3, #13]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10c      	bne.n	8004cb6 <XMC_USBD_lStartWriteXfer+0x11a>
    {
      /* Program dma*/
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepdma = (uint32_t)ep->xferBuffer;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	4a20      	ldr	r2, [pc, #128]	; (8004d2c <XMC_USBD_lStartWriteXfer+0x190>)
 8004cac:	336a      	adds	r3, #106	; 0x6a
 8004cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb2:	460a      	mov	r2, r1
 8004cb4:	615a      	str	r2, [r3, #20]
    }
    if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8004cb6:	4b1e      	ldr	r3, [pc, #120]	; (8004d30 <XMC_USBD_lStartWriteXfer+0x194>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	7b5b      	ldrb	r3, [r3, #13]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d111      	bne.n	8004ce4 <XMC_USBD_lStartWriteXfer+0x148>
    {
      /* enable fifo empty interrupt */
			xmc_device.device_register->dtknqr4_fifoemptymsk |= (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8004cc0:	4b1a      	ldr	r3, [pc, #104]	; (8004d2c <XMC_USBD_lStartWriteXfer+0x190>)
 8004cc2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004cc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	fa03 f202 	lsl.w	r2, r3, r2
 8004cda:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <XMC_USBD_lStartWriteXfer+0x190>)
 8004cdc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Program size of transfer and enable endpoint */
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->dieptsiz = size.d32;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	4a0f      	ldr	r2, [pc, #60]	; (8004d2c <XMC_USBD_lStartWriteXfer+0x190>)
 8004cf0:	336a      	adds	r3, #106	; 0x6a
 8004cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	611a      	str	r2, [r3, #16]
  ctl.b.epena = 1U;
 8004cfa:	7afb      	ldrb	r3, [r7, #11]
 8004cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d00:	72fb      	strb	r3, [r7, #11]
  ctl.b.cnak = 1U;
 8004d02:	7afb      	ldrb	r3, [r7, #11]
 8004d04:	f043 0304 	orr.w	r3, r3, #4
 8004d08:	72fb      	strb	r3, [r7, #11]
  xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = ctl.d32;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	4a05      	ldr	r2, [pc, #20]	; (8004d2c <XMC_USBD_lStartWriteXfer+0x190>)
 8004d16:	336a      	adds	r3, #106	; 0x6a
 8004d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	601a      	str	r2, [r3, #0]
}
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	2000089c 	.word	0x2000089c
 8004d30:	20000aa4 	.word	0x20000aa4

08004d34 <XMC_USBD_lHandleUSBReset>:
 * When ever the host sets the bus into reset condition the usb otg_core generates
 * an interrupt, which is handled by this function. It resets the complete otg_core
 * into the default state.
 */
static void XMC_USBD_lHandleUSBReset(const XMC_USBD_t *const obj) 
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  fifosize_data_t gnptxfsiz;
  daint_data_t daint;
  dcfg_data_t dcfg;
	
  /* Clear the Remote Wakeup Signaling */
  dctl.d32 = xmc_device.device_register->dctl;
 8004d3c:	4b50      	ldr	r3, [pc, #320]	; (8004e80 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004d3e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	617b      	str	r3, [r7, #20]
  dctl.b.rmtwkupsig = 1U;
 8004d46:	7d3b      	ldrb	r3, [r7, #20]
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	753b      	strb	r3, [r7, #20]
  xmc_device.device_register->dctl = dctl.d32;
 8004d4e:	4b4c      	ldr	r3, [pc, #304]	; (8004e80 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004d50:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	605a      	str	r2, [r3, #4]

  /* enable naks for all eps */
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	e01a      	b.n	8004d94 <XMC_USBD_lHandleUSBReset+0x60>
  {
    epctl.d32 = xmc_device.endpoint_out_register[i]->doepctl;
 8004d5e:	4a48      	ldr	r2, [pc, #288]	; (8004e80 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	3370      	adds	r3, #112	; 0x70
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	61bb      	str	r3, [r7, #24]
		epctl.b.snak = 1U;
 8004d6e:	7efb      	ldrb	r3, [r7, #27]
 8004d70:	f043 0308 	orr.w	r3, r3, #8
 8004d74:	76fb      	strb	r3, [r7, #27]
		epctl.b.stall = 0U;
 8004d76:	7ebb      	ldrb	r3, [r7, #26]
 8004d78:	f36f 1345 	bfc	r3, #5, #1
 8004d7c:	76bb      	strb	r3, [r7, #26]
		xmc_device.endpoint_out_register[i]->doepctl = epctl.d32;
 8004d7e:	4a40      	ldr	r2, [pc, #256]	; (8004e80 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	3370      	adds	r3, #112	; 0x70
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	601a      	str	r2, [r3, #0]
  for (i = 0U;i < (uint8_t)XMC_USBD_NUM_EPS;i++)
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	3301      	adds	r3, #1
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	2b06      	cmp	r3, #6
 8004d98:	d9e1      	bls.n	8004d5e <XMC_USBD_lHandleUSBReset+0x2a>
  }

  /* Configure fifos */
  /* Calculate the size of the rx fifo */
  xmc_device.global_register->grxfsiz = 64U;
 8004d9a:	4b39      	ldr	r3, [pc, #228]	; (8004e80 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004d9c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004da0:	2240      	movs	r2, #64	; 0x40
 8004da2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Calculate the size of the tx fifo for ep 0 */  
  gnptxfsiz.d32 = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	613b      	str	r3, [r7, #16]
  gnptxfsiz.b.depth = 16U;
 8004da8:	2310      	movs	r3, #16
 8004daa:	827b      	strh	r3, [r7, #18]
  gnptxfsiz.b.startaddr = 64U;
 8004dac:	2340      	movs	r3, #64	; 0x40
 8004dae:	823b      	strh	r3, [r7, #16]
  xmc_device.global_register->gnptxfsiz = gnptxfsiz.d32;
 8004db0:	4b33      	ldr	r3, [pc, #204]	; (8004e80 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004db2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	629a      	str	r2, [r3, #40]	; 0x28
  /* calculate the size for the rest */
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8004dba:	2301      	movs	r3, #1
 8004dbc:	61fb      	str	r3, [r7, #28]
 8004dbe:	e011      	b.n	8004de4 <XMC_USBD_lHandleUSBReset+0xb0>
  {
    xmc_device.global_register->dtxfsiz[i- 1U] = (uint32_t)(((256U + (i*(64U)))/4U) | ((uint32_t)16U << 16U));
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	019b      	lsls	r3, r3, #6
 8004dc6:	089a      	lsrs	r2, r3, #2
 8004dc8:	4b2d      	ldr	r3, [pc, #180]	; (8004e80 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004dca:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004dd6:	3340      	adds	r3, #64	; 0x40
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	605a      	str	r2, [r3, #4]
  for (i = 1U;i < (uint8_t)XMC_USBD_NUM_TX_FIFOS;i++)
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	3301      	adds	r3, #1
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	2b06      	cmp	r3, #6
 8004de8:	d9ea      	bls.n	8004dc0 <XMC_USBD_lHandleUSBReset+0x8c>
  }

  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo(0x10U); /* 0x10 == all fifos, see doc */
 8004dea:	2010      	movs	r0, #16
 8004dec:	f7ff fd50 	bl	8004890 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushTXFifo(0x0U);
 8004df0:	2000      	movs	r0, #0
 8004df2:	f7ff fd4d 	bl	8004890 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8004df6:	f7ff fd8b 	bl	8004910 <XMC_USBD_lFlushRXFifo>
  /* Flush learning queue not needed due to fifo config */
  /* enable ep0 interrupts */  
  daint.d32 = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
  daint.b.inep0 = 1U;
 8004dfe:	7b3b      	ldrb	r3, [r7, #12]
 8004e00:	f043 0301 	orr.w	r3, r3, #1
 8004e04:	733b      	strb	r3, [r7, #12]
  daint.b.outep0 = 1U;
 8004e06:	7bbb      	ldrb	r3, [r7, #14]
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	73bb      	strb	r3, [r7, #14]
  xmc_device.device_register->daintmsk = daint.d32;
 8004e0e:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004e10:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	61da      	str	r2, [r3, #28]

  /* enable endpoint interrupts */
  /* out ep interrupts */
  XMC_USBD_EnableEventOUTEP(((uint32_t)XMC_USBD_EVENT_OUT_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_OUT_EP_DISABLED |
 8004e18:	200f      	movs	r0, #15
 8004e1a:	f000 fbf9 	bl	8005610 <XMC_USBD_EnableEventOUTEP>
		  	  	  	  	  	  (uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP | (uint32_t)XMC_USBD_EVENT_OUT_EP_AHB_ERROR));

  /*in ep interrupts */
  XMC_USBD_EnableEventINEP(((uint32_t)XMC_USBD_EVENT_IN_EP_TX_COMPLET | (uint32_t)XMC_USBD_EVENT_IN_EP_DISABLED |
 8004e1e:	200f      	movs	r0, #15
 8004e20:	f000 fc0e 	bl	8005640 <XMC_USBD_EnableEventINEP>
		  (uint32_t)XMC_USBD_EVENT_IN_EP_AHB_ERROR | (uint32_t)XMC_USBD_EVENT_IN_EP_TIMEOUT));


  /* Clear device Address */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8004e24:	4b16      	ldr	r3, [pc, #88]	; (8004e80 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004e26:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60bb      	str	r3, [r7, #8]
  dcfg.b.devaddr = 0U;
 8004e2e:	893b      	ldrh	r3, [r7, #8]
 8004e30:	f36f 130a 	bfc	r3, #4, #7
 8004e34:	813b      	strh	r3, [r7, #8]
  xmc_device.device_register->dcfg = dcfg.d32;
 8004e36:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004e38:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	601a      	str	r2, [r3, #0]

  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	7b5b      	ldrb	r3, [r3, #13]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d104      	bne.n	8004e52 <XMC_USBD_lHandleUSBReset+0x11e>
  {
    /* Clear Empty interrupt */
    xmc_device.device_register->dtknqr4_fifoemptymsk = 0U;
 8004e48:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004e4a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004e4e:	2200      	movs	r2, #0
 8004e50:	635a      	str	r2, [r3, #52]	; 0x34
  }

  xmc_device.ep[0U].outInUse = 0U;
 8004e52:	4a0b      	ldr	r2, [pc, #44]	; (8004e80 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004e54:	6853      	ldr	r3, [r2, #4]
 8004e56:	f36f 1304 	bfc	r3, #4, #1
 8004e5a:	6053      	str	r3, [r2, #4]
  xmc_device.ep[0U].inInUse = 0U;
 8004e5c:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004e5e:	6853      	ldr	r3, [r2, #4]
 8004e60:	f36f 03c3 	bfc	r3, #3, #1
 8004e64:	6053      	str	r3, [r2, #4]

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_RESET);
 8004e66:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <XMC_USBD_lHandleUSBReset+0x14c>)
 8004e68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e6c:	2004      	movs	r0, #4
 8004e6e:	4798      	blx	r3

  /* clear reset intr */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_RESET);
 8004e70:	2004      	movs	r0, #4
 8004e72:	f000 fb21 	bl	80054b8 <XMC_USBD_ClearEvent>
}
 8004e76:	bf00      	nop
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	2000089c 	.word	0x2000089c

08004e84 <XMC_USBD_lHandleOTGInt>:
* @brief Handle OTG Interrupt
*
* It detects especially connect and disconnect events.
*/
static void XMC_USBD_lHandleOTGInt(void) 
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
  gotgint_data_t data;
  data.d32 = xmc_device.global_register->gotgint;
 8004e8a:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <XMC_USBD_lHandleOTGInt+0x44>)
 8004e8c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	607b      	str	r3, [r7, #4]
  if (data.b.sesenddet)
 8004e94:	793b      	ldrb	r3, [r7, #4]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00b      	beq.n	8004eb8 <XMC_USBD_lHandleOTGInt+0x34>
  {
		xmc_device.IsPowered = 0U;
 8004ea0:	4a09      	ldr	r2, [pc, #36]	; (8004ec8 <XMC_USBD_lHandleOTGInt+0x44>)
 8004ea2:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8004ea6:	f36f 0382 	bfc	r3, #2, #1
 8004eaa:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
		xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_OFF);
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <XMC_USBD_lHandleOTGInt+0x44>)
 8004eb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	4798      	blx	r3
  }
  XMC_USBD_lClearEventOTG(data.d32);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fb62 	bl	8005584 <XMC_USBD_lClearEventOTG>

}
 8004ec0:	bf00      	nop
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	2000089c 	.word	0x2000089c

08004ecc <XMC_USBD_lHandleEnumDone>:
 * @brief Interrupt handler for device enumeration done.
 *
 * Handles the enumeration done from dwc_otg, when the host has enumerated the device.
 */
static void XMC_USBD_lHandleEnumDone(void) 
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
  /* Normaly we need to check dctl
   * We are always fullspeed, so max it up. */
  depctl_data_t epctl;
  gusbcfg_data_t gusbcfg;
	
  epctl.d32=xmc_device.endpoint_in_register[0U]->diepctl;
 8004ed2:	4b1b      	ldr	r3, [pc, #108]	; (8004f40 <XMC_USBD_lHandleEnumDone+0x74>)
 8004ed4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	607b      	str	r3, [r7, #4]
  epctl.b.mps = 0x00U; /* 64 Byte, this is also automatically set for out ep */
 8004edc:	88bb      	ldrh	r3, [r7, #4]
 8004ede:	f36f 030a 	bfc	r3, #0, #11
 8004ee2:	80bb      	strh	r3, [r7, #4]
  xmc_device.endpoint_in_register[0U]->diepctl = epctl.d32;
 8004ee4:	4b16      	ldr	r3, [pc, #88]	; (8004f40 <XMC_USBD_lHandleEnumDone+0x74>)
 8004ee6:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	601a      	str	r2, [r3, #0]

  /* update device connected flag */
  xmc_device.IsConnected = 1U;
 8004eee:	4a14      	ldr	r2, [pc, #80]	; (8004f40 <XMC_USBD_lHandleEnumDone+0x74>)
 8004ef0:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
  xmc_device.IsPowered = 1U;
 8004efc:	4a10      	ldr	r2, [pc, #64]	; (8004f40 <XMC_USBD_lHandleEnumDone+0x74>)
 8004efe:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 8004f02:	f043 0304 	orr.w	r3, r3, #4
 8004f06:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe

  xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_CONNECT);
 8004f0a:	4b0d      	ldr	r3, [pc, #52]	; (8004f40 <XMC_USBD_lHandleEnumDone+0x74>)
 8004f0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f10:	2002      	movs	r0, #2
 8004f12:	4798      	blx	r3

  /* Set Trim */  
  gusbcfg.d32 = xmc_device.global_register->gusbcfg;
 8004f14:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <XMC_USBD_lHandleEnumDone+0x74>)
 8004f16:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	603b      	str	r3, [r7, #0]
  gusbcfg.b.usbtrdtim = 9U; /* default value for LS/FS */
 8004f1e:	787b      	ldrb	r3, [r7, #1]
 8004f20:	2209      	movs	r2, #9
 8004f22:	f362 0385 	bfi	r3, r2, #2, #4
 8004f26:	707b      	strb	r3, [r7, #1]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8004f28:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <XMC_USBD_lHandleEnumDone+0x74>)
 8004f2a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	60da      	str	r2, [r3, #12]

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_ENUMDONE);
 8004f32:	200b      	movs	r0, #11
 8004f34:	f000 fac0 	bl	80054b8 <XMC_USBD_ClearEvent>
}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	2000089c 	.word	0x2000089c

08004f44 <XMC_USBD_lHandleOEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleOEPInt(const XMC_USBD_t *const obj) 
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08c      	sub	sp, #48	; 0x30
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint16_t temp;
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
	
  daint.d32 = xmc_device.device_register->daint;
 8004f4c:	4b69      	ldr	r3, [pc, #420]	; (80050f4 <XMC_USBD_lHandleOEPInt+0x1b0>)
 8004f4e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	61fb      	str	r3, [r7, #28]
  
  daintmsk.d32 = xmc_device.device_register->daintmsk;
 8004f56:	4b67      	ldr	r3, [pc, #412]	; (80050f4 <XMC_USBD_lHandleOEPInt+0x1b0>)
 8004f58:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	61bb      	str	r3, [r7, #24]
  
  doepmsk.d32 = xmc_device.device_register->doepmsk;  
 8004f60:	4b64      	ldr	r3, [pc, #400]	; (80050f4 <XMC_USBD_lHandleOEPInt+0x1b0>)
 8004f62:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	617b      	str	r3, [r7, #20]
  
  mask = daint.ep.out & daintmsk.ep.out;
 8004f6a:	8bfa      	ldrh	r2, [r7, #30]
 8004f6c:	8b7b      	ldrh	r3, [r7, #26]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  doeptsiz.d32 = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]
 
  while ((uint16_t)mask >> ep_num)
 8004f7c:	e0aa      	b.n	80050d4 <XMC_USBD_lHandleOEPInt+0x190>
  {
    temp1 = (mask >> (uint16_t)ep_num);
 8004f7e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004f80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f84:	fa42 f303 	asr.w	r3, r2, r3
 8004f88:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = temp1 & 0x1U;
 8004f8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	853b      	strh	r3, [r7, #40]	; 0x28
    if (temp)
 8004f92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 8098 	beq.w	80050ca <XMC_USBD_lHandleOEPInt+0x186>
    {
      /* load register data for endpoint */
      ep = &xmc_device.ep[ep_num];
 8004f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f9e:	2234      	movs	r2, #52	; 0x34
 8004fa0:	fb02 f303 	mul.w	r3, r2, r3
 8004fa4:	4a53      	ldr	r2, [pc, #332]	; (80050f4 <XMC_USBD_lHandleOEPInt+0x1b0>)
 8004fa6:	4413      	add	r3, r2
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
      doepint.d32 = xmc_device.endpoint_out_register[ep_num]->doepint & doepmsk.d32;
 8004faa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004fae:	4a51      	ldr	r2, [pc, #324]	; (80050f4 <XMC_USBD_lHandleOEPInt+0x1b0>)
 8004fb0:	3370      	adds	r3, #112	; 0x70
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	7b5b      	ldrb	r3, [r3, #13]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d108      	bne.n	8004fda <XMC_USBD_lHandleOEPInt+0x96>
      {
        doeptsiz.d32 = xmc_device.endpoint_out_register[ep_num]->doeptsiz;
 8004fc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004fcc:	4a49      	ldr	r2, [pc, #292]	; (80050f4 <XMC_USBD_lHandleOEPInt+0x1b0>)
 8004fce:	3370      	adds	r3, #112	; 0x70
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	60fb      	str	r3, [r7, #12]
      }
	  /* Setup Phase Complete */
      if (doepint.b.setup)
 8004fda:	7c3b      	ldrb	r3, [r7, #16]
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d02f      	beq.n	8005046 <XMC_USBD_lHandleOEPInt+0x102>
      {
        /* ep0 not stalled any more */
        ep->isStalled = 0U;
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe8:	7913      	ldrb	r3, [r2, #4]
 8004fea:	f36f 1345 	bfc	r3, #5, #1
 8004fee:	7113      	strb	r3, [r2, #4]
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	7b5b      	ldrb	r3, [r3, #13]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10a      	bne.n	800500e <XMC_USBD_lHandleOEPInt+0xca>
        {
          /* calculate size for setup packet */
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
		  (uint32_t)((deptsiz0_data_t*)&doeptsiz)->b.supcnt)*(uint32_t)XMC_USBD_SETUP_SIZE);
 8004ff8:	f107 030c 	add.w	r3, r7, #12
 8004ffc:	78db      	ldrb	r3, [r3, #3]
 8004ffe:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8005002:	b2db      	uxtb	r3, r3
		  ep->outBytesAvailable = (uint32_t)(((uint32_t)XMC_USBD_SETUP_COUNT -
 8005004:	f1c3 0303 	rsb	r3, r3, #3
 8005008:	00da      	lsls	r2, r3, #3
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	611a      	str	r2, [r3, #16]
        }
		if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	7b5b      	ldrb	r3, [r3, #13]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d106      	bne.n	8005024 <XMC_USBD_lHandleOEPInt+0xe0>
		{
			ep->outBytesAvailable += ep->xferCount;
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	441a      	add	r2, r3
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	611a      	str	r2, [r3, #16]
		}
		ep->outInUse = 0U;
 8005024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005026:	6853      	ldr	r3, [r2, #4]
 8005028:	f36f 1304 	bfc	r3, #4, #1
 800502c:	6053      	str	r3, [r2, #4]
		xmc_device.EndpointEvent_cb(0U,XMC_USBD_EP_EVENT_SETUP); /* signal endpoint event */
 800502e:	4b31      	ldr	r3, [pc, #196]	; (80050f4 <XMC_USBD_lHandleOEPInt+0x1b0>)
 8005030:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005034:	2100      	movs	r1, #0
 8005036:	2000      	movs	r0, #0
 8005038:	4798      	blx	r3
				/* clear the interrupt */
		XMC_USBD_ClearEventOUTEP((uint32_t)XMC_USBD_EVENT_OUT_EP_SETUP,ep_num);
 800503a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800503e:	4619      	mov	r1, r3
 8005040:	2008      	movs	r0, #8
 8005042:	f000 facd 	bl	80055e0 <XMC_USBD_ClearEventOUTEP>
      }
      if (doepint.b.xfercompl)
 8005046:	7c3b      	ldrb	r3, [r7, #16]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d034      	beq.n	80050bc <XMC_USBD_lHandleOEPInt+0x178>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	7b5b      	ldrb	r3, [r3, #13]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d115      	bne.n	8005086 <XMC_USBD_lHandleOEPInt+0x142>
        {
          uint32_t bytes = (ep->xferLength - ep->xferCount) - doeptsiz.b.xfersize;
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	623b      	str	r3, [r7, #32]
          ep->xferCount += bytes;
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	441a      	add	r2, r3
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	441a      	add	r2, r3
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	625a      	str	r2, [r3, #36]	; 0x24
				}
        if (ep->xferTotal == ep->xferLength)
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	429a      	cmp	r2, r3
 8005090:	d111      	bne.n	80050b6 <XMC_USBD_lHandleOEPInt+0x172>
        {
          ep->outBytesAvailable = ep->xferCount;
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	611a      	str	r2, [r3, #16]
          ep->outInUse = 0U;
 800509a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509c:	6853      	ldr	r3, [r2, #4]
 800509e:	f36f 1304 	bfc	r3, #4, #1
 80050a2:	6053      	str	r3, [r2, #4]
          xmc_device.EndpointEvent_cb(ep_num,XMC_USBD_EP_EVENT_OUT);
 80050a4:	4b13      	ldr	r3, [pc, #76]	; (80050f4 <XMC_USBD_lHandleOEPInt+0x1b0>)
 80050a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80050aa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80050ae:	2101      	movs	r1, #1
 80050b0:	4610      	mov	r0, r2
 80050b2:	4798      	blx	r3
 80050b4:	e002      	b.n	80050bc <XMC_USBD_lHandleOEPInt+0x178>
        }
        else
        {
          XMC_USBD_lStartReadXfer(ep);
 80050b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050b8:	f7ff fcb4 	bl	8004a24 <XMC_USBD_lStartReadXfer>
        }

      }

      XMC_USBD_ClearEventOUTEP(doepint.d32,ep_num);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80050c2:	4611      	mov	r1, r2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fa8b 	bl	80055e0 <XMC_USBD_ClearEventOUTEP>
    }
    ep_num++;
 80050ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050ce:	3301      	adds	r3, #1
 80050d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while ((uint16_t)mask >> ep_num)
 80050d4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80050d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050da:	fa42 f303 	asr.w	r3, r2, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f47f af4d 	bne.w	8004f7e <XMC_USBD_lHandleOEPInt+0x3a>
  }

  /* clear interrupt */
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_OUTEP);
 80050e4:	200d      	movs	r0, #13
 80050e6:	f000 f9e7 	bl	80054b8 <XMC_USBD_ClearEvent>
}
 80050ea:	bf00      	nop
 80050ec:	3730      	adds	r7, #48	; 0x30
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	2000089c 	.word	0x2000089c

080050f8 <XMC_USBD_lHandleIEPInt>:
 *
 * The interrupt handler first checks, which endpoint has caused the interrupt and then
 * determines, which interrupt should be handled.
 */
static void XMC_USBD_lHandleIEPInt(const XMC_USBD_t *const obj) 
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08c      	sub	sp, #48	; 0x30
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint16_t temp1;
  uint16_t mask;
  uint8_t ep_num;
  uint32_t inepint;
	
  daint.d32 = xmc_device.device_register->daint;
 8005100:	4b6b      	ldr	r3, [pc, #428]	; (80052b0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8005102:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	617b      	str	r3, [r7, #20]
  
  diepmsk.d32 = xmc_device.device_register->diepmsk;
 800510a:	4b69      	ldr	r3, [pc, #420]	; (80052b0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 800510c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	613b      	str	r3, [r7, #16]
  
  dieptsiz.d32 = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	60bb      	str	r3, [r7, #8]
  mask = daint.ep.in;
 8005118:	8abb      	ldrh	r3, [r7, #20]
 800511a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ep_num = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  while ((uint16_t)mask >> ep_num)
 8005122:	e0b6      	b.n	8005292 <XMC_USBD_lHandleIEPInt+0x19a>
  {
    temp1 = ((uint16_t)mask >> (uint16_t)ep_num);
 8005124:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800512a:	fa42 f303 	asr.w	r3, r2, r3
 800512e:	857b      	strh	r3, [r7, #42]	; 0x2a
    temp = (uint16_t)temp1 & (uint16_t)0x1U;
 8005130:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	853b      	strh	r3, [r7, #40]	; 0x28
    if ((uint16_t)temp)
 8005138:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 80a4 	beq.w	8005288 <XMC_USBD_lHandleIEPInt+0x190>
    {
      ep = &xmc_device.ep[ep_num];
 8005140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005144:	2234      	movs	r2, #52	; 0x34
 8005146:	fb02 f303 	mul.w	r3, r2, r3
 800514a:	4a59      	ldr	r2, [pc, #356]	; (80052b0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 800514c:	4413      	add	r3, r2
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
			inepint = (uint32_t)xmc_device.endpoint_in_register[ep_num]->diepint;
 8005150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005154:	4a56      	ldr	r2, [pc, #344]	; (80052b0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8005156:	336a      	adds	r3, #106	; 0x6a
 8005158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	623b      	str	r3, [r7, #32]
      diepint.d32 = inepint &
      ((((uint32_t)((uint32_t)xmc_device.device_register->dtknqr4_fifoemptymsk >> ep->address_u.address_st.number) &
 8005160:	4b53      	ldr	r3, [pc, #332]	; (80052b0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8005162:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516a:	7812      	ldrb	r2, [r2, #0]
 800516c:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	40d3      	lsrs	r3, r2
                     0x1U) << 7U) | (uint32_t)diepmsk.d32);
 8005174:	01db      	lsls	r3, r3, #7
 8005176:	f003 0280 	and.w	r2, r3, #128	; 0x80
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	431a      	orrs	r2, r3
      diepint.d32 = inepint &
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	4013      	ands	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
      if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	7b5b      	ldrb	r3, [r3, #13]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d107      	bne.n	800519c <XMC_USBD_lHandleIEPInt+0xa4>
      {
        dieptsiz.d32 = xmc_device.endpoint_in_register[ep_num]->dieptsiz;
 800518c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005190:	4a47      	ldr	r2, [pc, #284]	; (80052b0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8005192:	336a      	adds	r3, #106	; 0x6a
 8005194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	60bb      	str	r3, [r7, #8]
      }
      if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	7b5b      	ldrb	r3, [r3, #13]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d115      	bne.n	80051d0 <XMC_USBD_lHandleIEPInt+0xd8>
      {
        if (diepint.b.emptyintr)
 80051a4:	7b3b      	ldrb	r3, [r7, #12]
 80051a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00f      	beq.n	80051d0 <XMC_USBD_lHandleIEPInt+0xd8>
        {
          uint32_t bytes;
          bytes = XMC_USBD_lWriteFifo(ep);
 80051b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051b2:	f7ff fb1b 	bl	80047ec <XMC_USBD_lWriteFifo>
 80051b6:	61f8      	str	r0, [r7, #28]
          ep->xferCount += bytes;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	441a      	add	r2, r3
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	62da      	str	r2, [r3, #44]	; 0x2c
          ep->xferBuffer += bytes;
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	441a      	add	r2, r3
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	625a      	str	r2, [r3, #36]	; 0x24
        }
      }
      if (diepint.b.xfercompl)
 80051d0:	7b3b      	ldrb	r3, [r7, #12]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d04e      	beq.n	800527a <XMC_USBD_lHandleIEPInt+0x182>
      {
        if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	7b5b      	ldrb	r3, [r3, #13]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d11d      	bne.n	8005220 <XMC_USBD_lHandleIEPInt+0x128>
        {
          /* update xfer values */
          if ((dieptsiz.b.pktcnt == 0U) && (dieptsiz.b.xfersize == 0U))
 80051e4:	897a      	ldrh	r2, [r7, #10]
 80051e6:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 80051ea:	4013      	ands	r3, r2
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d116      	bne.n	8005220 <XMC_USBD_lHandleIEPInt+0x128>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d111      	bne.n	8005220 <XMC_USBD_lHandleIEPInt+0x128>
          {
            uint32_t Bytes = ep->xferLength - ep->xferCount;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	61bb      	str	r3, [r7, #24]
            ep->xferCount += Bytes;
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	441a      	add	r2, r3
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	62da      	str	r2, [r3, #44]	; 0x2c
            ep->xferBuffer += Bytes;
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	441a      	add	r2, r3
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	625a      	str	r2, [r3, #36]	; 0x24
          }
        }
        if (ep->xferTotal==ep->xferLength)
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	429a      	cmp	r2, r3
 800522a:	d123      	bne.n	8005274 <XMC_USBD_lHandleIEPInt+0x17c>
        {
          ep->inInUse = 0U;
 800522c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522e:	6853      	ldr	r3, [r2, #4]
 8005230:	f36f 03c3 	bfc	r3, #3, #1
 8005234:	6053      	str	r3, [r2, #4]
          if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	7b5b      	ldrb	r3, [r3, #13]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d10e      	bne.n	800525c <XMC_USBD_lHandleIEPInt+0x164>
          {
            /* mask fifo empty interrupt */
            xmc_device.device_register->dtknqr4_fifoemptymsk =
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 800523e:	4b1c      	ldr	r3, [pc, #112]	; (80052b0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8005240:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005244:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800524a:	2201      	movs	r2, #1
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	43da      	mvns	r2, r3
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 8005252:	4b17      	ldr	r3, [pc, #92]	; (80052b0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 8005254:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
            (uint32_t)(xmc_device.device_register->dtknqr4_fifoemptymsk & ~(((uint32_t)1U << ep_num)));
 8005258:	400a      	ands	r2, r1
            xmc_device.device_register->dtknqr4_fifoemptymsk =
 800525a:	635a      	str	r2, [r3, #52]	; 0x34
          }
          xmc_device.EndpointEvent_cb(0x80U | ep_num,XMC_USBD_EP_EVENT_IN);
 800525c:	4b14      	ldr	r3, [pc, #80]	; (80052b0 <XMC_USBD_lHandleIEPInt+0x1b8>)
 800525e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005262:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005266:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	2102      	movs	r1, #2
 800526e:	4610      	mov	r0, r2
 8005270:	4798      	blx	r3
 8005272:	e002      	b.n	800527a <XMC_USBD_lHandleIEPInt+0x182>
        }
        else
        {
          /* start next step of transfer */
          XMC_USBD_lStartWriteXfer(ep);
 8005274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005276:	f7ff fc91 	bl	8004b9c <XMC_USBD_lStartWriteXfer>
        }

      }

      XMC_USBD_ClearEventINEP((uint32_t)diepint.d32,ep_num);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005280:	4611      	mov	r1, r2
 8005282:	4618      	mov	r0, r3
 8005284:	f000 f994 	bl	80055b0 <XMC_USBD_ClearEventINEP>
    }
    ep_num++;
 8005288:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800528c:	3301      	adds	r3, #1
 800528e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  while ((uint16_t)mask >> ep_num)
 8005292:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005294:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005298:	fa42 f303 	asr.w	r3, r2, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	f47f af41 	bne.w	8005124 <XMC_USBD_lHandleIEPInt+0x2c>
  }
  XMC_USBD_ClearEvent(XMC_USBD_EVENT_INEP);
 80052a2:	200e      	movs	r0, #14
 80052a4:	f000 f908 	bl	80054b8 <XMC_USBD_ClearEvent>
}
 80052a8:	bf00      	nop
 80052aa:	3730      	adds	r7, #48	; 0x30
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	2000089c 	.word	0x2000089c

080052b4 <XMC_USBD_lHandleRxFLvl>:
 * @brief RX Fifo interrupt handler
 *
 * This function handles the interrupt, when the rx fifo is not empty anymore.
 */
static void XMC_USBD_lHandleRxFLvl(void) 
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
  device_grxsts_data_t data;	
  data.d32 = xmc_device.global_register->grxstsp;
 80052ba:	4b1e      	ldr	r3, [pc, #120]	; (8005334 <XMC_USBD_lHandleRxFLvl+0x80>)
 80052bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	607b      	str	r3, [r7, #4]

  switch (data.b.pktsts)
 80052c4:	79bb      	ldrb	r3, [r7, #6]
 80052c6:	f3c3 0343 	ubfx	r3, r3, #1, #4
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	2b05      	cmp	r3, #5
 80052d0:	d82a      	bhi.n	8005328 <XMC_USBD_lHandleRxFLvl+0x74>
 80052d2:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <XMC_USBD_lHandleRxFLvl+0x24>)
 80052d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d8:	08005329 	.word	0x08005329
 80052dc:	080052f1 	.word	0x080052f1
 80052e0:	08005329 	.word	0x08005329
 80052e4:	08005329 	.word	0x08005329
 80052e8:	08005329 	.word	0x08005329
 80052ec:	0800530d 	.word	0x0800530d
    case XMC_USBD_GRXSTS_PKTSTS_GOUTNAK:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTCMPL:
      break;
    case XMC_USBD_GRXSTS_PKTSTS_OUTDATA:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 80052f0:	793b      	ldrb	r3, [r7, #4]
 80052f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	88bb      	ldrh	r3, [r7, #4]
 80052fc:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8005300:	b29b      	uxth	r3, r3
 8005302:	4619      	mov	r1, r3
 8005304:	4610      	mov	r0, r2
 8005306:	f7ff f9fd 	bl	8004704 <XMC_USBD_lReadFifo>
      break;
 800530a:	e00e      	b.n	800532a <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUP:
      XMC_USBD_lReadFifo((uint32_t)data.b.epnum,(uint32_t)data.b.bcnt);
 800530c:	793b      	ldrb	r3, [r7, #4]
 800530e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005312:	b2db      	uxtb	r3, r3
 8005314:	461a      	mov	r2, r3
 8005316:	88bb      	ldrh	r3, [r7, #4]
 8005318:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800531c:	b29b      	uxth	r3, r3
 800531e:	4619      	mov	r1, r3
 8005320:	4610      	mov	r0, r2
 8005322:	f7ff f9ef 	bl	8004704 <XMC_USBD_lReadFifo>
      break;
 8005326:	e000      	b.n	800532a <XMC_USBD_lHandleRxFLvl+0x76>
    case XMC_USBD_GRXSTS_PKTSTS_SETUPCMPL:
      break;
    default:
      break;
 8005328:	bf00      	nop
	}
  /* no need to clear */
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	2000089c 	.word	0x2000089c

08005338 <XMC_USBD_IRQHandler>:
 *
 * The handler first checks, which global interrupt has caused the interrupt
 * and then dispatches interrupt to the corresponding sub-handler.
 */
void XMC_USBD_IRQHandler(const XMC_USBD_t *const obj) 
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;
  gintsts_data_t data;
	
  gintmsk.d32 = xmc_device.global_register->gintmsk;
 8005340:	4b50      	ldr	r3, [pc, #320]	; (8005484 <XMC_USBD_IRQHandler+0x14c>)
 8005342:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	60fb      	str	r3, [r7, #12]
  data.d32 = xmc_device.global_register->gintsts & gintmsk.d32;
 800534a:	4b4e      	ldr	r3, [pc, #312]	; (8005484 <XMC_USBD_IRQHandler+0x14c>)
 800534c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005350:	695a      	ldr	r2, [r3, #20]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4013      	ands	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]
	
  if (data.b.sofintr)
 8005358:	7a3b      	ldrb	r3, [r7, #8]
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d007      	beq.n	8005374 <XMC_USBD_IRQHandler+0x3c>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SOF);
 8005364:	4b47      	ldr	r3, [pc, #284]	; (8005484 <XMC_USBD_IRQHandler+0x14c>)
 8005366:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800536a:	2009      	movs	r0, #9
 800536c:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SOF);
 800536e:	2009      	movs	r0, #9
 8005370:	f000 f8a2 	bl	80054b8 <XMC_USBD_ClearEvent>
  }
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	7b5b      	ldrb	r3, [r3, #13]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d119      	bne.n	80053b0 <XMC_USBD_IRQHandler+0x78>
  {
    if (data.b.rxstsqlvl)
 800537c:	7a3b      	ldrb	r3, [r7, #8]
 800537e:	f003 0310 	and.w	r3, r3, #16
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d013      	beq.n	80053b0 <XMC_USBD_IRQHandler+0x78>
    {
      /* Masked that interrupt so its only done once */
      gintmsk.b.rxstsqlvl = 0U;
 8005388:	7b3b      	ldrb	r3, [r7, #12]
 800538a:	f36f 1304 	bfc	r3, #4, #1
 800538e:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 8005390:	4b3c      	ldr	r3, [pc, #240]	; (8005484 <XMC_USBD_IRQHandler+0x14c>)
 8005392:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	619a      	str	r2, [r3, #24]
      XMC_USBD_lHandleRxFLvl(); /* handle the interrupt */
 800539a:	f7ff ff8b 	bl	80052b4 <XMC_USBD_lHandleRxFLvl>
      gintmsk.b.rxstsqlvl = 1U;
 800539e:	7b3b      	ldrb	r3, [r7, #12]
 80053a0:	f043 0310 	orr.w	r3, r3, #16
 80053a4:	733b      	strb	r3, [r7, #12]
      xmc_device.global_register->gintmsk = gintmsk.d32;
 80053a6:	4b37      	ldr	r3, [pc, #220]	; (8005484 <XMC_USBD_IRQHandler+0x14c>)
 80053a8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	619a      	str	r2, [r3, #24]
    }
  }
  if (data.b.erlysuspend)
 80053b0:	7a7b      	ldrb	r3, [r7, #9]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <XMC_USBD_IRQHandler+0x8a>
  {
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_EARLYSUSPEND);
 80053bc:	200a      	movs	r0, #10
 80053be:	f000 f87b 	bl	80054b8 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbsuspend)
 80053c2:	7a7b      	ldrb	r3, [r7, #9]
 80053c4:	f003 0308 	and.w	r3, r3, #8
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d007      	beq.n	80053de <XMC_USBD_IRQHandler+0xa6>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_SUSPEND);
 80053ce:	4b2d      	ldr	r3, [pc, #180]	; (8005484 <XMC_USBD_IRQHandler+0x14c>)
 80053d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053d4:	2006      	movs	r0, #6
 80053d6:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_SUSPEND);
 80053d8:	2006      	movs	r0, #6
 80053da:	f000 f86d 	bl	80054b8 <XMC_USBD_ClearEvent>
  }
  if (data.b.wkupintr)
 80053de:	7afb      	ldrb	r3, [r7, #11]
 80053e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <XMC_USBD_IRQHandler+0xc2>
  {
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_REMOTE_WAKEUP);
 80053ea:	4b26      	ldr	r3, [pc, #152]	; (8005484 <XMC_USBD_IRQHandler+0x14c>)
 80053ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053f0:	2008      	movs	r0, #8
 80053f2:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_REMOTE_WAKEUP);
 80053f4:	2008      	movs	r0, #8
 80053f6:	f000 f85f 	bl	80054b8 <XMC_USBD_ClearEvent>
  }
  if (data.b.sessreqintr)
 80053fa:	7afb      	ldrb	r3, [r7, #11]
 80053fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00e      	beq.n	8005424 <XMC_USBD_IRQHandler+0xec>
  {
    xmc_device.IsPowered = 1U;
 8005406:	4a1f      	ldr	r2, [pc, #124]	; (8005484 <XMC_USBD_IRQHandler+0x14c>)
 8005408:	f892 31fe 	ldrb.w	r3, [r2, #510]	; 0x1fe
 800540c:	f043 0304 	orr.w	r3, r3, #4
 8005410:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
    xmc_device.DeviceEvent_cb(XMC_USBD_EVENT_POWER_ON);
 8005414:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <XMC_USBD_IRQHandler+0x14c>)
 8005416:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800541a:	2000      	movs	r0, #0
 800541c:	4798      	blx	r3
    XMC_USBD_ClearEvent(XMC_USBD_EVENT_POWER_ON);
 800541e:	2000      	movs	r0, #0
 8005420:	f000 f84a 	bl	80054b8 <XMC_USBD_ClearEvent>
  }
  if (data.b.usbreset)
 8005424:	7a7b      	ldrb	r3, [r7, #9]
 8005426:	f003 0310 	and.w	r3, r3, #16
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <XMC_USBD_IRQHandler+0xfe>
  {
    XMC_USBD_lHandleUSBReset(obj);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff fc7f 	bl	8004d34 <XMC_USBD_lHandleUSBReset>
  }
  if (data.b.enumdone)
 8005436:	7a7b      	ldrb	r3, [r7, #9]
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <XMC_USBD_IRQHandler+0x10e>
  {
    XMC_USBD_lHandleEnumDone();
 8005442:	f7ff fd43 	bl	8004ecc <XMC_USBD_lHandleEnumDone>
  }
  if (data.b.inepint)
 8005446:	7abb      	ldrb	r3, [r7, #10]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <XMC_USBD_IRQHandler+0x120>
  {
    XMC_USBD_lHandleIEPInt(obj);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff fe50 	bl	80050f8 <XMC_USBD_lHandleIEPInt>
  }
  if (data.b.outepintr)
 8005458:	7abb      	ldrb	r3, [r7, #10]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <XMC_USBD_IRQHandler+0x132>
  {
		XMC_USBD_lHandleOEPInt(obj);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff fd6d 	bl	8004f44 <XMC_USBD_lHandleOEPInt>
  }
	if (data.b.otgintr)
 800546a:	7a3b      	ldrb	r3, [r7, #8]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <XMC_USBD_IRQHandler+0x142>
  {
	  XMC_USBD_lHandleOTGInt();
 8005476:	f7ff fd05 	bl	8004e84 <XMC_USBD_lHandleOTGInt>
  }

}
 800547a:	bf00      	nop
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	2000089c 	.word	0x2000089c

08005488 <XMC_USBD_Enable>:
 *******************************************************************************/
/**
 * Enables the USB0 module
 **/
void XMC_USBD_Enable(void) 
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  /* Reset and power up */
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 800548c:	4803      	ldr	r0, [pc, #12]	; (800549c <XMC_USBD_Enable+0x14>)
 800548e:	f7fc f92d 	bl	80016ec <XMC_SCU_RESET_DeassertPeripheralReset>
  XMC_SCU_POWER_EnableUsb();
 8005492:	f7fc fd11 	bl	8001eb8 <XMC_SCU_POWER_EnableUsb>
}
 8005496:	bf00      	nop
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000080 	.word	0x20000080

080054a0 <XMC_USBD_Disable>:

/**
 * Disables the USB0 module
 **/
void XMC_USBD_Disable(void) 
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  /* Clear Reset and power up */
  XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USB0);
 80054a4:	4803      	ldr	r0, [pc, #12]	; (80054b4 <XMC_USBD_Disable+0x14>)
 80054a6:	f7fc f903 	bl	80016b0 <XMC_SCU_RESET_AssertPeripheralReset>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USB0);
#endif
  XMC_SCU_POWER_DisableUsb();
 80054aa:	f7fc fd13 	bl	8001ed4 <XMC_SCU_POWER_DisableUsb>
}
 80054ae:	bf00      	nop
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000080 	.word	0x20000080

080054b8 <XMC_USBD_ClearEvent>:

/**
 * Clear the USB device event
 **/
void XMC_USBD_ClearEvent(const XMC_USBD_EVENT_t event) 
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	71fb      	strb	r3, [r7, #7]
  gintsts_data_t clear;
  clear.d32 = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
  switch(event)
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	2b0d      	cmp	r3, #13
 80054ca:	d84c      	bhi.n	8005566 <XMC_USBD_ClearEvent+0xae>
 80054cc:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <XMC_USBD_ClearEvent+0x1c>)
 80054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d2:	bf00      	nop
 80054d4:	0800550d 	.word	0x0800550d
 80054d8:	08005567 	.word	0x08005567
 80054dc:	08005567 	.word	0x08005567
 80054e0:	08005567 	.word	0x08005567
 80054e4:	08005517 	.word	0x08005517
 80054e8:	08005567 	.word	0x08005567
 80054ec:	08005521 	.word	0x08005521
 80054f0:	0800552b 	.word	0x0800552b
 80054f4:	08005535 	.word	0x08005535
 80054f8:	0800553f 	.word	0x0800553f
 80054fc:	08005549 	.word	0x08005549
 8005500:	08005553 	.word	0x08005553
 8005504:	08005567 	.word	0x08005567
 8005508:	0800555d 	.word	0x0800555d
  {
    case (XMC_USBD_EVENT_POWER_ON):
	  clear.b.sessreqintr = 1U;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005512:	73fb      	strb	r3, [r7, #15]
	  break;
 8005514:	e028      	b.n	8005568 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESET):
	  clear.b.usbreset = 1U;
 8005516:	7b7b      	ldrb	r3, [r7, #13]
 8005518:	f043 0310 	orr.w	r3, r3, #16
 800551c:	737b      	strb	r3, [r7, #13]
	  break;
 800551e:	e023      	b.n	8005568 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SUSPEND):
	  clear.b.usbsuspend = 1U;
 8005520:	7b7b      	ldrb	r3, [r7, #13]
 8005522:	f043 0308 	orr.w	r3, r3, #8
 8005526:	737b      	strb	r3, [r7, #13]
	  break;
 8005528:	e01e      	b.n	8005568 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_RESUME):
	  clear.b.wkupintr = 1U;
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005530:	73fb      	strb	r3, [r7, #15]
	  break;
 8005532:	e019      	b.n	8005568 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_REMOTE_WAKEUP):
	  clear.b.wkupintr = 1U;
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800553a:	73fb      	strb	r3, [r7, #15]
	  break;
 800553c:	e014      	b.n	8005568 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_SOF):
	  clear.b.sofintr = 1U;
 800553e:	7b3b      	ldrb	r3, [r7, #12]
 8005540:	f043 0308 	orr.w	r3, r3, #8
 8005544:	733b      	strb	r3, [r7, #12]
	  break;
 8005546:	e00f      	b.n	8005568 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_EARLYSUSPEND):
	  clear.b.erlysuspend = 1U;
 8005548:	7b7b      	ldrb	r3, [r7, #13]
 800554a:	f043 0304 	orr.w	r3, r3, #4
 800554e:	737b      	strb	r3, [r7, #13]
	  break;
 8005550:	e00a      	b.n	8005568 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_ENUMDONE):
	  clear.b.enumdone = 1U;
 8005552:	7b7b      	ldrb	r3, [r7, #13]
 8005554:	f043 0320 	orr.w	r3, r3, #32
 8005558:	737b      	strb	r3, [r7, #13]
	  break;
 800555a:	e005      	b.n	8005568 <XMC_USBD_ClearEvent+0xb0>
    case (XMC_USBD_EVENT_OUTEP):
	  clear.b.outepintr = 1U;
 800555c:	7bbb      	ldrb	r3, [r7, #14]
 800555e:	f043 0308 	orr.w	r3, r3, #8
 8005562:	73bb      	strb	r3, [r7, #14]
	  break;
 8005564:	e000      	b.n	8005568 <XMC_USBD_ClearEvent+0xb0>
		default:
		break;
 8005566:	bf00      	nop
	}
	xmc_device.global_register->gintsts = clear.d32;
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <XMC_USBD_ClearEvent+0xc8>)
 800556a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	615a      	str	r2, [r3, #20]
}
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	2000089c 	.word	0x2000089c

08005584 <XMC_USBD_lClearEventOTG>:

/**
 * Clear the USB OTG events
 **/
static void XMC_USBD_lClearEventOTG(uint32_t event)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  gotgint_data_t clear = { .d32 = 0U};
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]
  clear.d32 = event;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60fb      	str	r3, [r7, #12]
  xmc_device.global_register->gotgint = clear.d32;
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <XMC_USBD_lClearEventOTG+0x28>)
 8005596:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	605a      	str	r2, [r3, #4]
}
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	2000089c 	.word	0x2000089c

080055b0 <XMC_USBD_ClearEventINEP>:

/**
 * Clear the USB IN EP events
 **/
void XMC_USBD_ClearEventINEP(uint32_t event,const uint8_t ep_num)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	70fb      	strb	r3, [r7, #3]
  diepint_data_t clear;
  clear.d32 = event;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_in_register[ep_num]->diepint = clear.d32;
 80055c0:	78fb      	ldrb	r3, [r7, #3]
 80055c2:	4a06      	ldr	r2, [pc, #24]	; (80055dc <XMC_USBD_ClearEventINEP+0x2c>)
 80055c4:	336a      	adds	r3, #106	; 0x6a
 80055c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	609a      	str	r2, [r3, #8]
}
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	2000089c 	.word	0x2000089c

080055e0 <XMC_USBD_ClearEventOUTEP>:

/**
 * Clear the USB OUT EP events
 **/
void XMC_USBD_ClearEventOUTEP(uint32_t event,const uint8_t ep_num)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	70fb      	strb	r3, [r7, #3]
  doepint_data_t clear;
  clear.d32 = event;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60fb      	str	r3, [r7, #12]
  xmc_device.endpoint_out_register[ep_num]->doepint = clear.d32;
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	4a06      	ldr	r2, [pc, #24]	; (800560c <XMC_USBD_ClearEventOUTEP+0x2c>)
 80055f4:	3370      	adds	r3, #112	; 0x70
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	609a      	str	r2, [r3, #8]
}
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	2000089c 	.word	0x2000089c

08005610 <XMC_USBD_EnableEventOUTEP>:

/**
 * Enable the USB OUT EP events
 **/
void XMC_USBD_EnableEventOUTEP(uint32_t event)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	doepint_data_t doepint;
	doepint.d32 = event;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->doepmsk |= doepint.d32;
 800561c:	4b07      	ldr	r3, [pc, #28]	; (800563c <XMC_USBD_EnableEventOUTEP+0x2c>)
 800561e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005622:	6959      	ldr	r1, [r3, #20]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <XMC_USBD_EnableEventOUTEP+0x2c>)
 8005628:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800562c:	430a      	orrs	r2, r1
 800562e:	615a      	str	r2, [r3, #20]
}
 8005630:	bf00      	nop
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	2000089c 	.word	0x2000089c

08005640 <XMC_USBD_EnableEventINEP>:

/**
 * Enable the USB IN EP events
 **/
void XMC_USBD_EnableEventINEP(uint32_t event)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
	diepint_data_t diepint;
	diepint.d32 = event;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60fb      	str	r3, [r7, #12]
	xmc_device.device_register->diepmsk |= diepint.d32;
 800564c:	4b07      	ldr	r3, [pc, #28]	; (800566c <XMC_USBD_EnableEventINEP+0x2c>)
 800564e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005652:	6919      	ldr	r1, [r3, #16]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4b05      	ldr	r3, [pc, #20]	; (800566c <XMC_USBD_EnableEventINEP+0x2c>)
 8005658:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800565c:	430a      	orrs	r2, r1
 800565e:	611a      	str	r2, [r3, #16]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	2000089c 	.word	0x2000089c

08005670 <XMC_USBD_GetCapabilities>:

/**
 * Gets the USB device capabilities
 **/
XMC_USBD_CAPABILITIES_t XMC_USBD_GetCapabilities()
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
  XMC_USBD_CAPABILITIES_t cap={0U};
 8005676:	2300      	movs	r3, #0
 8005678:	607b      	str	r3, [r7, #4]
  cap.event_connect = 1U;
 800567a:	793b      	ldrb	r3, [r7, #4]
 800567c:	f043 0304 	orr.w	r3, r3, #4
 8005680:	713b      	strb	r3, [r7, #4]
  cap.event_disconnect = 1U;
 8005682:	793b      	ldrb	r3, [r7, #4]
 8005684:	f043 0308 	orr.w	r3, r3, #8
 8005688:	713b      	strb	r3, [r7, #4]
#if UC_SERIES == 45
  cap.event_power_off = 1U;
 800568a:	793b      	ldrb	r3, [r7, #4]
 800568c:	f043 0302 	orr.w	r3, r3, #2
 8005690:	713b      	strb	r3, [r7, #4]
  cap.event_power_on = 1U;
 8005692:	793b      	ldrb	r3, [r7, #4]
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	713b      	strb	r3, [r7, #4]
#else
  cap.event_power_off = 0U;
  cap.event_power_on = 0U;
#endif
  cap.event_high_speed = 0U;
 800569a:	793b      	ldrb	r3, [r7, #4]
 800569c:	f36f 1345 	bfc	r3, #5, #1
 80056a0:	713b      	strb	r3, [r7, #4]
  cap.event_remote_wakeup = 1U;
 80056a2:	797b      	ldrb	r3, [r7, #5]
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	717b      	strb	r3, [r7, #5]
  cap.event_reset = 1U;
 80056aa:	793b      	ldrb	r3, [r7, #4]
 80056ac:	f043 0310 	orr.w	r3, r3, #16
 80056b0:	713b      	strb	r3, [r7, #4]
  cap.event_resume = 1U;
 80056b2:	793b      	ldrb	r3, [r7, #4]
 80056b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b8:	713b      	strb	r3, [r7, #4]
  cap.event_suspend = 1U;
 80056ba:	793b      	ldrb	r3, [r7, #4]
 80056bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056c0:	713b      	strb	r3, [r7, #4]
  cap.reserved = 0U;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f36f 235f 	bfc	r3, #9, #23
 80056c8:	607b      	str	r3, [r7, #4]
  return cap;
 80056ca:	687b      	ldr	r3, [r7, #4]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <XMC_USBD_Init>:

/**
 * Initializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Init(XMC_USBD_t *obj)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	; 0x28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  gintmsk_data_t gintmsk;

  XMC_ASSERT("XMC_USBD_Init: obj.usbd_max_num_eps not of type XMC_USBD_MAX_NUM_EPS_t",
 		      XMC_USBD_CHECK_INPUT_MAX_NUM_EPS(obj->usbd_max_num_eps))
  
  XMC_USBD_Enable();
 80056e0:	f7ff fed2 	bl	8005488 <XMC_USBD_Enable>
  
  usbd_init = obj;
 80056e4:	4a87      	ldr	r2, [pc, #540]	; (8005904 <XMC_USBD_Init+0x22c>)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6013      	str	r3, [r2, #0]

  /* Filling out buffer size */
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 80056ea:	2300      	movs	r3, #0
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
 80056ee:	e00c      	b.n	800570a <XMC_USBD_Init+0x32>
  {
	  XMC_USBD_EP_OUT_BUFFERSIZE[i] = XMC_USBD_EP0_BUFFER_SIZE;
 80056f0:	4a85      	ldr	r2, [pc, #532]	; (8005908 <XMC_USBD_Init+0x230>)
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	2140      	movs	r1, #64	; 0x40
 80056f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  XMC_USBD_EP_IN_BUFFERSIZE[i] 	= XMC_USBD_EP0_BUFFER_SIZE;
 80056fa:	4a84      	ldr	r2, [pc, #528]	; (800590c <XMC_USBD_Init+0x234>)
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	2140      	movs	r1, #64	; 0x40
 8005700:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	3301      	adds	r3, #1
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	2b06      	cmp	r3, #6
 800570e:	d9ef      	bls.n	80056f0 <XMC_USBD_Init+0x18>
  }

  /* clear device status */
  memset((void*)&xmc_device,0x0U,sizeof(XMC_USBD_DEVICE_t));
 8005710:	f44f 7202 	mov.w	r2, #520	; 0x208
 8005714:	2100      	movs	r1, #0
 8005716:	487e      	ldr	r0, [pc, #504]	; (8005910 <XMC_USBD_Init+0x238>)
 8005718:	f001 f9de 	bl	8006ad8 <memset>

  /* assign callbacks */
  xmc_device.DeviceEvent_cb = obj->cb_xmc_device_event;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	4a7b      	ldr	r2, [pc, #492]	; (8005910 <XMC_USBD_Init+0x238>)
 8005722:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  xmc_device.EndpointEvent_cb = obj->cb_endpoint_event;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	4a79      	ldr	r2, [pc, #484]	; (8005910 <XMC_USBD_Init+0x238>)
 800572c:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  XMC_USBD_BASE_ADDRESS = (uint8_t *)(obj->usbd);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	623b      	str	r3, [r7, #32]
  /* assign register address */
  xmc_device.global_register = (dwc_otg_core_global_regs_t*)(obj->usbd);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a75      	ldr	r2, [pc, #468]	; (8005910 <XMC_USBD_Init+0x238>)
 800573c:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
  xmc_device.device_register = ((dwc_otg_device_global_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_GLOBAL_REG_OFFSET));
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005746:	4a72      	ldr	r2, [pc, #456]	; (8005910 <XMC_USBD_Init+0x238>)
 8005748:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800574c:	2300      	movs	r3, #0
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
 8005750:	e00c      	b.n	800576c <XMC_USBD_Init+0x94>
  {
    xmc_device.endpoint_in_register[i] = (dwc_otg_dev_in_ep_regs_t*)(XMC_USBD_BASE_ADDRESS + DWC_DEV_IN_EP_REG_OFFSET +
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	3348      	adds	r3, #72	; 0x48
 8005756:	015b      	lsls	r3, r3, #5
 8005758:	6a3a      	ldr	r2, [r7, #32]
 800575a:	441a      	add	r2, r3
 800575c:	496c      	ldr	r1, [pc, #432]	; (8005910 <XMC_USBD_Init+0x238>)
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	336a      	adds	r3, #106	; 0x6a
 8005762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	3301      	adds	r3, #1
 800576a:	627b      	str	r3, [r7, #36]	; 0x24
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	2b06      	cmp	r3, #6
 8005770:	d9ef      	bls.n	8005752 <XMC_USBD_Init+0x7a>
    ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 8005772:	2300      	movs	r3, #0
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
 8005776:	e00d      	b.n	8005794 <XMC_USBD_Init+0xbc>
  {
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
    									  DWC_DEV_OUT_EP_REG_OFFSET +
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	3358      	adds	r3, #88	; 0x58
 800577c:	015b      	lsls	r3, r3, #5
 800577e:	6a3a      	ldr	r2, [r7, #32]
 8005780:	441a      	add	r2, r3
    xmc_device.endpoint_out_register[i] = (dwc_otg_dev_out_ep_regs_t*)(XMC_USBD_BASE_ADDRESS +
 8005782:	4963      	ldr	r1, [pc, #396]	; (8005910 <XMC_USBD_Init+0x238>)
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	3370      	adds	r3, #112	; 0x70
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	605a      	str	r2, [r3, #4]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_EPS;i++)
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	3301      	adds	r3, #1
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	2b06      	cmp	r3, #6
 8005798:	d9ee      	bls.n	8005778 <XMC_USBD_Init+0xa0>
    									  ((uint32_t)DWC_EP_REG_OFFSET*i));
  }
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 800579a:	2300      	movs	r3, #0
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
 800579e:	e00c      	b.n	80057ba <XMC_USBD_Init+0xe2>
  {
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
    						XMC_USBD_TX_FIFO_REG_OFFSET +
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	3301      	adds	r3, #1
 80057a4:	031b      	lsls	r3, r3, #12
 80057a6:	6a3a      	ldr	r2, [r7, #32]
 80057a8:	441a      	add	r2, r3
    xmc_device.fifo[i] = (uint32_t*)(XMC_USBD_BASE_ADDRESS +
 80057aa:	4959      	ldr	r1, [pc, #356]	; (8005910 <XMC_USBD_Init+0x238>)
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	3378      	adds	r3, #120	; 0x78
 80057b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0U;i < (uint32_t)XMC_USBD_NUM_TX_FIFOS;i++)
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	3301      	adds	r3, #1
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	2b06      	cmp	r3, #6
 80057be:	d9ef      	bls.n	80057a0 <XMC_USBD_Init+0xc8>
    						(i * XMC_USBD_TX_FIFO_OFFSET));
  }
  /* obj data structure for endpoint 0 */
  /* Done by driver core */
  /* configure ahb details */  
  gahbcfg.d32 = xmc_device.global_register->gahbcfg;
 80057c0:	4b53      	ldr	r3, [pc, #332]	; (8005910 <XMC_USBD_Init+0x238>)
 80057c2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	61fb      	str	r3, [r7, #28]
  gahbcfg.b.glblintrmsk = 1U; /* enable interrupts ( global mask ) */
 80057ca:	7f3b      	ldrb	r3, [r7, #28]
 80057cc:	f043 0301 	orr.w	r3, r3, #1
 80057d0:	773b      	strb	r3, [r7, #28]
  gahbcfg.b.nptxfemplvl_txfemplvl = 1U;
 80057d2:	7f3b      	ldrb	r3, [r7, #28]
 80057d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d8:	773b      	strb	r3, [r7, #28]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_DMA)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	7b5b      	ldrb	r3, [r3, #13]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d104      	bne.n	80057ec <XMC_USBD_Init+0x114>
  {
    /* Enable dma if needed */
    gahbcfg.b.dmaenable = 1U; /* enable dma if needed */
 80057e2:	7f3b      	ldrb	r3, [r7, #28]
 80057e4:	f043 0320 	orr.w	r3, r3, #32
 80057e8:	773b      	strb	r3, [r7, #28]
 80057ea:	e003      	b.n	80057f4 <XMC_USBD_Init+0x11c>
  }
  else
  {
    gahbcfg.b.dmaenable = 0U;
 80057ec:	7f3b      	ldrb	r3, [r7, #28]
 80057ee:	f36f 1345 	bfc	r3, #5, #1
 80057f2:	773b      	strb	r3, [r7, #28]
  }
  xmc_device.global_register->gahbcfg = gahbcfg.d32;
 80057f4:	4b46      	ldr	r3, [pc, #280]	; (8005910 <XMC_USBD_Init+0x238>)
 80057f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	609a      	str	r2, [r3, #8]
  /* configure usb details */  
  gusbcfg.d32= xmc_device.global_register->gusbcfg;
 80057fe:	4b44      	ldr	r3, [pc, #272]	; (8005910 <XMC_USBD_Init+0x238>)
 8005800:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	61bb      	str	r3, [r7, #24]
  gusbcfg.b.force_dev_mode = 1U; /* force us into device mode */
 8005808:	7efb      	ldrb	r3, [r7, #27]
 800580a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800580e:	76fb      	strb	r3, [r7, #27]
  gusbcfg.b.srpcap = 1U; /* enable session request protocoll */
 8005810:	7e7b      	ldrb	r3, [r7, #25]
 8005812:	f043 0301 	orr.w	r3, r3, #1
 8005816:	767b      	strb	r3, [r7, #25]
  xmc_device.global_register->gusbcfg = gusbcfg.d32;
 8005818:	4b3d      	ldr	r3, [pc, #244]	; (8005910 <XMC_USBD_Init+0x238>)
 800581a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	60da      	str	r2, [r3, #12]

  /* Device init */
  /* configure device speed */  
  dcfg.d32 = xmc_device.device_register->dcfg;
 8005822:	4b3b      	ldr	r3, [pc, #236]	; (8005910 <XMC_USBD_Init+0x238>)
 8005824:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	617b      	str	r3, [r7, #20]
  dcfg.b.devspd = XMC_USBD_DCFG_DEVSPD_FS;
 800582c:	7d3b      	ldrb	r3, [r7, #20]
 800582e:	f043 0303 	orr.w	r3, r3, #3
 8005832:	753b      	strb	r3, [r7, #20]
  dcfg.b.descdma = 0U;
 8005834:	7dbb      	ldrb	r3, [r7, #22]
 8005836:	f36f 13c7 	bfc	r3, #7, #1
 800583a:	75bb      	strb	r3, [r7, #22]
  xmc_device.device_register->dcfg = dcfg.d32;
 800583c:	4b34      	ldr	r3, [pc, #208]	; (8005910 <XMC_USBD_Init+0x238>)
 800583e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	601a      	str	r2, [r3, #0]
  /* configure device functions */  
  dctl.d32 = xmc_device.device_register->dctl;
 8005846:	4b32      	ldr	r3, [pc, #200]	; (8005910 <XMC_USBD_Init+0x238>)
 8005848:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	613b      	str	r3, [r7, #16]
  dctl.b.sftdiscon = 1U; /* disconnect the device until its connected by the user */
 8005850:	7c3b      	ldrb	r3, [r7, #16]
 8005852:	f043 0302 	orr.w	r3, r3, #2
 8005856:	743b      	strb	r3, [r7, #16]
  /* all other config is done by default register value */
  xmc_device.device_register->dctl = dctl.d32;
 8005858:	4b2d      	ldr	r3, [pc, #180]	; (8005910 <XMC_USBD_Init+0x238>)
 800585a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	605a      	str	r2, [r3, #4]
  /* flush the fifos for proper operation */
  XMC_USBD_lFlushTXFifo((uint8_t)0x10U); /* 0x10 == all fifos, see doc */
 8005862:	2010      	movs	r0, #16
 8005864:	f7ff f814 	bl	8004890 <XMC_USBD_lFlushTXFifo>
  XMC_USBD_lFlushRXFifo();
 8005868:	f7ff f852 	bl	8004910 <XMC_USBD_lFlushRXFifo>
  /* Enable Global Interrupts */
  /* clear interrupt status bits prior to unmasking */
  xmc_device.global_register->gintmsk = 0U; /* disable all interrupts */
 800586c:	4b28      	ldr	r3, [pc, #160]	; (8005910 <XMC_USBD_Init+0x238>)
 800586e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8005872:	2200      	movs	r2, #0
 8005874:	619a      	str	r2, [r3, #24]
  xmc_device.global_register->gintsts = 0xFFFFFFFFU; /* clear all interrupts */
 8005876:	4b26      	ldr	r3, [pc, #152]	; (8005910 <XMC_USBD_Init+0x238>)
 8005878:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800587c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005880:	615a      	str	r2, [r3, #20]
 
  gintmsk.d32 = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
  /* enable common interrupts */
  gintmsk.b.modemismatch = 1U;
 8005886:	7b3b      	ldrb	r3, [r7, #12]
 8005888:	f043 0302 	orr.w	r3, r3, #2
 800588c:	733b      	strb	r3, [r7, #12]
  gintmsk.b.otgintr = 1U;
 800588e:	7b3b      	ldrb	r3, [r7, #12]
 8005890:	f043 0304 	orr.w	r3, r3, #4
 8005894:	733b      	strb	r3, [r7, #12]
  gintmsk.b.sessreqintr = 1U;
 8005896:	7bfb      	ldrb	r3, [r7, #15]
 8005898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800589c:	73fb      	strb	r3, [r7, #15]
  /* enable device interrupts */
  gintmsk.b.usbreset = 1U;
 800589e:	7b7b      	ldrb	r3, [r7, #13]
 80058a0:	f043 0310 	orr.w	r3, r3, #16
 80058a4:	737b      	strb	r3, [r7, #13]
  gintmsk.b.enumdone = 1U;
 80058a6:	7b7b      	ldrb	r3, [r7, #13]
 80058a8:	f043 0320 	orr.w	r3, r3, #32
 80058ac:	737b      	strb	r3, [r7, #13]
  gintmsk.b.erlysuspend = 1U;
 80058ae:	7b7b      	ldrb	r3, [r7, #13]
 80058b0:	f043 0304 	orr.w	r3, r3, #4
 80058b4:	737b      	strb	r3, [r7, #13]
  gintmsk.b.usbsuspend = 1U;
 80058b6:	7b7b      	ldrb	r3, [r7, #13]
 80058b8:	f043 0308 	orr.w	r3, r3, #8
 80058bc:	737b      	strb	r3, [r7, #13]
  gintmsk.b.wkupintr = 1U;
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c4:	73fb      	strb	r3, [r7, #15]
  gintmsk.b.sofintr = 1U;
 80058c6:	7b3b      	ldrb	r3, [r7, #12]
 80058c8:	f043 0308 	orr.w	r3, r3, #8
 80058cc:	733b      	strb	r3, [r7, #12]
  if(obj->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	7b5b      	ldrb	r3, [r3, #13]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d103      	bne.n	80058de <XMC_USBD_Init+0x206>
  {
    gintmsk.b.rxstsqlvl = 1U;
 80058d6:	7b3b      	ldrb	r3, [r7, #12]
 80058d8:	f043 0310 	orr.w	r3, r3, #16
 80058dc:	733b      	strb	r3, [r7, #12]
  }
  gintmsk.b.outepintr = 1U;
 80058de:	7bbb      	ldrb	r3, [r7, #14]
 80058e0:	f043 0308 	orr.w	r3, r3, #8
 80058e4:	73bb      	strb	r3, [r7, #14]
  gintmsk.b.inepintr = 1U;
 80058e6:	7bbb      	ldrb	r3, [r7, #14]
 80058e8:	f043 0304 	orr.w	r3, r3, #4
 80058ec:	73bb      	strb	r3, [r7, #14]
  xmc_device.global_register->gintmsk = gintmsk.d32;
 80058ee:	4b08      	ldr	r3, [pc, #32]	; (8005910 <XMC_USBD_Init+0x238>)
 80058f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	619a      	str	r2, [r3, #24]
  return XMC_USBD_STATUS_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3728      	adds	r7, #40	; 0x28
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000aa4 	.word	0x20000aa4
 8005908:	20000864 	.word	0x20000864
 800590c:	20000880 	.word	0x20000880
 8005910:	2000089c 	.word	0x2000089c

08005914 <XMC_USBD_Uninitialize>:

/**
 * Uninitializes the USB device
 **/
XMC_USBD_STATUS_t XMC_USBD_Uninitialize() 
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
  /* Disconnect the device */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 800591a:	4b0c      	ldr	r3, [pc, #48]	; (800594c <XMC_USBD_Uninitialize+0x38>)
 800591c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 8005924:	793b      	ldrb	r3, [r7, #4]
 8005926:	f043 0302 	orr.w	r3, r3, #2
 800592a:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 800592c:	4b07      	ldr	r3, [pc, #28]	; (800594c <XMC_USBD_Uninitialize+0x38>)
 800592e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	605a      	str	r2, [r3, #4]
  /* clean up */
  memset((void*)&xmc_device,0U,sizeof(xmc_device));
 8005936:	f44f 7202 	mov.w	r2, #520	; 0x208
 800593a:	2100      	movs	r1, #0
 800593c:	4803      	ldr	r0, [pc, #12]	; (800594c <XMC_USBD_Uninitialize+0x38>)
 800593e:	f001 f8cb 	bl	8006ad8 <memset>
  return XMC_USBD_STATUS_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	2000089c 	.word	0x2000089c

08005950 <XMC_USBD_DeviceConnect>:

/**
 * Connects the USB device to host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceConnect() 
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
  /* Just disable softdisconnect */
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 8005956:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <XMC_USBD_DeviceConnect+0x30>)
 8005958:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 0U;
 8005960:	793b      	ldrb	r3, [r7, #4]
 8005962:	f36f 0341 	bfc	r3, #1, #1
 8005966:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 8005968:	4b05      	ldr	r3, [pc, #20]	; (8005980 <XMC_USBD_DeviceConnect+0x30>)
 800596a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	2000089c 	.word	0x2000089c

08005984 <XMC_USBD_DeviceDisconnect>:

/**
 * Disconnects the USB device from host
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceDisconnect() 
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
  dctl_data_t dctl;
	dctl.d32 = xmc_device.device_register->dctl;
 800598a:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <XMC_USBD_DeviceDisconnect+0x30>)
 800598c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	607b      	str	r3, [r7, #4]
  dctl.b.sftdiscon = 1U;
 8005994:	793b      	ldrb	r3, [r7, #4]
 8005996:	f043 0302 	orr.w	r3, r3, #2
 800599a:	713b      	strb	r3, [r7, #4]
  xmc_device.device_register->dctl = dctl.d32;
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <XMC_USBD_DeviceDisconnect+0x30>)
 800599e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	605a      	str	r2, [r3, #4]
  return XMC_USBD_STATUS_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	2000089c 	.word	0x2000089c

080059b8 <XMC_USBD_DeviceGetState>:

/**
 * Gets the USB device state.
 **/
XMC_USBD_STATE_t XMC_USBD_DeviceGetState(const XMC_USBD_t *const obj) 
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  XMC_USBD_STATE_t state={0U};
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]
  state.speed = XMC_USBD_SPEED_FULL;
 80059c4:	7b3b      	ldrb	r3, [r7, #12]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f362 03c4 	bfi	r3, r2, #3, #2
 80059cc:	733b      	strb	r3, [r7, #12]
  state.connected = xmc_device.IsConnected;
 80059ce:	4b12      	ldr	r3, [pc, #72]	; (8005a18 <XMC_USBD_DeviceGetState+0x60>)
 80059d0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80059d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	7b3b      	ldrb	r3, [r7, #12]
 80059dc:	f362 0341 	bfi	r3, r2, #1, #1
 80059e0:	733b      	strb	r3, [r7, #12]
  state.active = XMC_USBD_lDeviceActive(obj);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fe fe5a 	bl	800469c <XMC_USBD_lDeviceActive>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	7b3b      	ldrb	r3, [r7, #12]
 80059f2:	f362 0382 	bfi	r3, r2, #2, #1
 80059f6:	733b      	strb	r3, [r7, #12]
  state.powered = xmc_device.IsPowered;
 80059f8:	4b07      	ldr	r3, [pc, #28]	; (8005a18 <XMC_USBD_DeviceGetState+0x60>)
 80059fa:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80059fe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	7b3b      	ldrb	r3, [r7, #12]
 8005a06:	f362 0300 	bfi	r3, r2, #0, #1
 8005a0a:	733b      	strb	r3, [r7, #12]
  return state;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	2000089c 	.word	0x2000089c

08005a1c <XMC_USBD_EndpointReadStart>:

/**
 * Prepares the endpoint to read next OUT packet
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointReadStart(const uint8_t ep_addr, uint32_t size) 
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	4603      	mov	r3, r0
 8005a24:	6039      	str	r1, [r7, #0]
 8005a26:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8005a28:	79fb      	ldrb	r3, [r7, #7]
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	2234      	movs	r2, #52	; 0x34
 8005a30:	fb02 f303 	mul.w	r3, r2, r3
 8005a34:	4a1a      	ldr	r2, [pc, #104]	; (8005aa0 <XMC_USBD_EndpointReadStart+0x84>)
 8005a36:	4413      	add	r3, r2
 8005a38:	60bb      	str	r3, [r7, #8]
  XMC_USBD_STATUS_t result;
	
  if (ep->outInUse || !ep->isConfigured)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <XMC_USBD_EndpointReadStart+0x3a>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	791b      	ldrb	r3, [r3, #4]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d102      	bne.n	8005a5c <XMC_USBD_EndpointReadStart+0x40>
  {
    result = XMC_USBD_STATUS_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	73fb      	strb	r3, [r7, #15]
 8005a5a:	e01c      	b.n	8005a96 <XMC_USBD_EndpointReadStart+0x7a>
  }
  else
  {
    /* short the length to buffer size if needed */
    if (size > ep->outBufferSize)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d902      	bls.n	8005a6c <XMC_USBD_EndpointReadStart+0x50>
    {
      size = ep->outBufferSize;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	603b      	str	r3, [r7, #0]
    }
    /* set ep values */
    ep->xferTotal = size;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	631a      	str	r2, [r3, #48]	; 0x30
    ep->xferCount = 0U;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2200      	movs	r2, #0
 8005a76:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->xferLength = 0U;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferBuffer = ep->outBuffer;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	625a      	str	r2, [r3, #36]	; 0x24
    ep->outBytesAvailable = 0U;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	611a      	str	r2, [r3, #16]
    XMC_USBD_lStartReadXfer(ep);
 8005a8c:	68b8      	ldr	r0, [r7, #8]
 8005a8e:	f7fe ffc9 	bl	8004a24 <XMC_USBD_lStartReadXfer>
    result= XMC_USBD_STATUS_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	73fb      	strb	r3, [r7, #15]
  }
  return result;
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	2000089c 	.word	0x2000089c

08005aa4 <XMC_USBD_EndpointRead>:

/**
 * Reads the number of bytes from the USB OUT endpoint
 **/
int32_t XMC_USBD_EndpointRead(const uint8_t ep_num,uint8_t * buffer,uint32_t length) 
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_num];
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	2234      	movs	r2, #52	; 0x34
 8005ab6:	fb02 f303 	mul.w	r3, r2, r3
 8005aba:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <XMC_USBD_EndpointRead+0x74>)
 8005abc:	4413      	add	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]
  if (length > ep->outBytesAvailable)
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d902      	bls.n	8005ad0 <XMC_USBD_EndpointRead+0x2c>
  {
    length = ep->outBytesAvailable;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	607b      	str	r3, [r7, #4]
  }
  memcpy(buffer,&ep->outBuffer[ep->outOffset],length);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	4413      	add	r3, r2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4619      	mov	r1, r3
 8005ade:	68b8      	ldr	r0, [r7, #8]
 8005ae0:	f000 ff60 	bl	80069a4 <memcpy>
  ep->outBytesAvailable -= length;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	1ad2      	subs	r2, r2, r3
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	611a      	str	r2, [r3, #16]
  if (ep->outBytesAvailable)
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d006      	beq.n	8005b06 <XMC_USBD_EndpointRead+0x62>
  {
    ep->outOffset += length;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	699a      	ldr	r2, [r3, #24]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	441a      	add	r2, r3
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	619a      	str	r2, [r3, #24]
 8005b04:	e002      	b.n	8005b0c <XMC_USBD_EndpointRead+0x68>
  }
  else
  {
    ep->outOffset = 0U;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	619a      	str	r2, [r3, #24]
  }
  return (int32_t)length;
 8005b0c:	687b      	ldr	r3, [r7, #4]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	2000089c 	.word	0x2000089c

08005b1c <XMC_USBD_EndpointWrite>:

/**
 * Writes number of bytes in to the USB IN endpoint.
 **/
int32_t XMC_USBD_EndpointWrite(const uint8_t ep_num,const uint8_t * buffer,uint32_t length) 
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	4603      	mov	r3, r0
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	73fb      	strb	r3, [r7, #15]
  XMC_USBD_EP_t * ep = &xmc_device.ep[ep_num & (uint8_t)XMC_USBD_EP_NUM_MASK];
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	2234      	movs	r2, #52	; 0x34
 8005b32:	fb02 f303 	mul.w	r3, r2, r3
 8005b36:	4a21      	ldr	r2, [pc, #132]	; (8005bbc <XMC_USBD_EndpointWrite+0xa0>)
 8005b38:	4413      	add	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]
  int32_t result;
  if (!ep->isConfigured)
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	791b      	ldrb	r3, [r3, #4]
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d102      	bne.n	8005b50 <XMC_USBD_EndpointWrite+0x34>
  {
    result = (int32_t)XMC_USBD_STATUS_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	e030      	b.n	8005bb2 <XMC_USBD_EndpointWrite+0x96>
  }
  else if (ep->inInUse == 1U)
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d102      	bne.n	8005b64 <XMC_USBD_EndpointWrite+0x48>
  {
    result=(int32_t)0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	e026      	b.n	8005bb2 <XMC_USBD_EndpointWrite+0x96>
  }
  else
  {
    if (length > ep->inBufferSize)
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d902      	bls.n	8005b74 <XMC_USBD_EndpointWrite+0x58>
    {
      length = ep->inBufferSize;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	607b      	str	r3, [r7, #4]
    }
    /* copy data into input buffer for DMA and FIFO mode */
		memcpy(ep->inBuffer,(const void *)buffer,length);
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	68b9      	ldr	r1, [r7, #8]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 ff11 	bl	80069a4 <memcpy>
		ep->xferBuffer = ep->inBuffer;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	69da      	ldr	r2, [r3, #28]
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	625a      	str	r2, [r3, #36]	; 0x24
    ep->xferTotal = length;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30
    /* set transfer values */
    ep->xferLength = 0U;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	2200      	movs	r2, #0
 8005b94:	629a      	str	r2, [r3, #40]	; 0x28
    ep->xferCount = 0U;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	62da      	str	r2, [r3, #44]	; 0x2c
    ep->inInUse = 1U;
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	6853      	ldr	r3, [r2, #4]
 8005ba0:	f043 0308 	orr.w	r3, r3, #8
 8005ba4:	6053      	str	r3, [r2, #4]
    /* start the transfer */
    XMC_USBD_lStartWriteXfer(ep);
 8005ba6:	6938      	ldr	r0, [r7, #16]
 8005ba8:	f7fe fff8 	bl	8004b9c <XMC_USBD_lStartWriteXfer>
    result=(int32_t)ep->xferTotal;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb0:	617b      	str	r3, [r7, #20]
  }
  return result;
 8005bb2:	697b      	ldr	r3, [r7, #20]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	2000089c 	.word	0x2000089c

08005bc0 <XMC_USBD_DeviceSetAddress>:

/**
 * Sets the USB device address.
 **/
XMC_USBD_STATUS_t XMC_USBD_DeviceSetAddress(const uint8_t address,const XMC_USBD_SET_ADDRESS_STAGE_t stage) 
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	460a      	mov	r2, r1
 8005bca:	71fb      	strb	r3, [r7, #7]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	71bb      	strb	r3, [r7, #6]
  dcfg_data_t data;
  data.d32 = xmc_device.device_register->dcfg;
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <XMC_USBD_DeviceSetAddress+0x48>)
 8005bd2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	60fb      	str	r3, [r7, #12]
  if (stage == XMC_USBD_SET_ADDRESS_STAGE_SETUP)
 8005bda:	79bb      	ldrb	r3, [r7, #6]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10c      	bne.n	8005bfa <XMC_USBD_DeviceSetAddress+0x3a>
  {
    data.b.devaddr = address;
 8005be0:	79fb      	ldrb	r3, [r7, #7]
 8005be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	89bb      	ldrh	r3, [r7, #12]
 8005bea:	f362 130a 	bfi	r3, r2, #4, #7
 8005bee:	81bb      	strh	r3, [r7, #12]
    xmc_device.device_register->dcfg = data.d32;
 8005bf0:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <XMC_USBD_DeviceSetAddress+0x48>)
 8005bf2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	601a      	str	r2, [r3, #0]
  }
	return XMC_USBD_STATUS_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	2000089c 	.word	0x2000089c

08005c0c <XMC_USBD_EndpointStall>:

/**
 * Set/clear stall on the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointStall(const uint8_t ep_addr, const bool stall) 
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	460a      	mov	r2, r1
 8005c16:	71fb      	strb	r3, [r7, #7]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	71bb      	strb	r3, [r7, #6]
  depctl_data_t data;
  XMC_USBD_EP_t *ep = &xmc_device.ep[(ep_addr & (uint8_t)XMC_USBD_EP_NUM_MASK)];
 8005c1c:	79fb      	ldrb	r3, [r7, #7]
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	2234      	movs	r2, #52	; 0x34
 8005c24:	fb02 f303 	mul.w	r3, r2, r3
 8005c28:	4a4a      	ldr	r2, [pc, #296]	; (8005d54 <XMC_USBD_EndpointStall+0x148>)
 8005c2a:	4413      	add	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
  if (stall)
 8005c2e:	79bb      	ldrb	r3, [r7, #6]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d040      	beq.n	8005cb6 <XMC_USBD_EndpointStall+0xaa>
  {
    if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8005c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	da1a      	bge.n	8005c72 <XMC_USBD_EndpointStall+0x66>
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	4a43      	ldr	r2, [pc, #268]	; (8005d54 <XMC_USBD_EndpointStall+0x148>)
 8005c48:	336a      	adds	r3, #106	; 0x6a
 8005c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 8005c52:	7abb      	ldrb	r3, [r7, #10]
 8005c54:	f043 0320 	orr.w	r3, r3, #32
 8005c58:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	4a3b      	ldr	r2, [pc, #236]	; (8005d54 <XMC_USBD_EndpointStall+0x148>)
 8005c66:	336a      	adds	r3, #106	; 0x6a
 8005c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	e01b      	b.n	8005caa <XMC_USBD_EndpointStall+0x9e>
    }
    else
    {
      /*set stall bit */
      data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	4a35      	ldr	r2, [pc, #212]	; (8005d54 <XMC_USBD_EndpointStall+0x148>)
 8005c7e:	3370      	adds	r3, #112	; 0x70
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60bb      	str	r3, [r7, #8]
      data.b.stall = 1U;
 8005c8a:	7abb      	ldrb	r3, [r7, #10]
 8005c8c:	f043 0320 	orr.w	r3, r3, #32
 8005c90:	72bb      	strb	r3, [r7, #10]
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	4a2d      	ldr	r2, [pc, #180]	; (8005d54 <XMC_USBD_EndpointStall+0x148>)
 8005c9e:	3370      	adds	r3, #112	; 0x70
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	601a      	str	r2, [r3, #0]
    }
    ep->isStalled = 1U;
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	7913      	ldrb	r3, [r2, #4]
 8005cae:	f043 0320 	orr.w	r3, r3, #32
 8005cb2:	7113      	strb	r3, [r2, #4]
 8005cb4:	e047      	b.n	8005d46 <XMC_USBD_EndpointStall+0x13a>
  }
  else
  {
    /* just clear stall bit */
		if (ep_addr & (uint8_t)XMC_USBD_ENDPOINT_DIRECTION_MASK)
 8005cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	da1e      	bge.n	8005cfc <XMC_USBD_EndpointStall+0xf0>
		{
			data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	4a22      	ldr	r2, [pc, #136]	; (8005d54 <XMC_USBD_EndpointStall+0x148>)
 8005cca:	336a      	adds	r3, #106	; 0x6a
 8005ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 8005cd4:	7abb      	ldrb	r3, [r7, #10]
 8005cd6:	f36f 1345 	bfc	r3, #5, #1
 8005cda:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8005cdc:	7afb      	ldrb	r3, [r7, #11]
 8005cde:	f043 0310 	orr.w	r3, r3, #16
 8005ce2:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	4a19      	ldr	r2, [pc, #100]	; (8005d54 <XMC_USBD_EndpointStall+0x148>)
 8005cf0:	336a      	adds	r3, #106	; 0x6a
 8005cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	e01f      	b.n	8005d3c <XMC_USBD_EndpointStall+0x130>
		}
		else
		{
			data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	4a13      	ldr	r2, [pc, #76]	; (8005d54 <XMC_USBD_EndpointStall+0x148>)
 8005d08:	3370      	adds	r3, #112	; 0x70
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60bb      	str	r3, [r7, #8]
			data.b.stall = 0U;
 8005d14:	7abb      	ldrb	r3, [r7, #10]
 8005d16:	f36f 1345 	bfc	r3, #5, #1
 8005d1a:	72bb      	strb	r3, [r7, #10]
			data.b.setd0pid = 1U; /* reset pid to 0 */
 8005d1c:	7afb      	ldrb	r3, [r7, #11]
 8005d1e:	f043 0310 	orr.w	r3, r3, #16
 8005d22:	72fb      	strb	r3, [r7, #11]
			xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	4a09      	ldr	r2, [pc, #36]	; (8005d54 <XMC_USBD_EndpointStall+0x148>)
 8005d30:	3370      	adds	r3, #112	; 0x70
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	601a      	str	r2, [r3, #0]
		}
		ep->isStalled = 0U;
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	7913      	ldrb	r3, [r2, #4]
 8005d40:	f36f 1345 	bfc	r3, #5, #1
 8005d44:	7113      	strb	r3, [r2, #4]
	}
	return XMC_USBD_STATUS_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	2000089c 	.word	0x2000089c

08005d58 <XMC_USBD_EndpointAbort>:

/**
 * Aborts the data transfer on the selected endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointAbort(const uint8_t ep_addr) {
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8005d62:	79fb      	ldrb	r3, [r7, #7]
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	2234      	movs	r2, #52	; 0x34
 8005d6a:	fb02 f303 	mul.w	r3, r2, r3
 8005d6e:	4a1b      	ldr	r2, [pc, #108]	; (8005ddc <XMC_USBD_EndpointAbort+0x84>)
 8005d70:	4413      	add	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
  if (ep->address_u.address_st.direction)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d004      	beq.n	8005d8c <XMC_USBD_EndpointAbort+0x34>
  {
    ep->inInUse = 0U;
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	6853      	ldr	r3, [r2, #4]
 8005d86:	f36f 03c3 	bfc	r3, #3, #1
 8005d8a:	6053      	str	r3, [r2, #4]
  }
  if (!ep->address_u.address_st.direction)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d104      	bne.n	8005da4 <XMC_USBD_EndpointAbort+0x4c>
  {
    ep->outInUse = 0U;
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	6853      	ldr	r3, [r2, #4]
 8005d9e:	f36f 1304 	bfc	r3, #4, #1
 8005da2:	6053      	str	r3, [r2, #4]
  }
  ep->isStalled = 0U;
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	7913      	ldrb	r3, [r2, #4]
 8005da8:	f36f 1345 	bfc	r3, #5, #1
 8005dac:	7113      	strb	r3, [r2, #4]
  ep->outBytesAvailable = 0U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	611a      	str	r2, [r3, #16]
  ep->outOffset = 0U;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	619a      	str	r2, [r3, #24]
  ep->xferLength = 0U;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	629a      	str	r2, [r3, #40]	; 0x28
  ep->xferCount = 0U;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  ep->xferTotal = 0U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30

  return XMC_USBD_STATUS_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	2000089c 	.word	0x2000089c

08005de0 <XMC_USBD_EndpointConfigure>:
 * Configures the given endpoint
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointConfigure(const uint8_t ep_addr,
		                                     const XMC_USBD_ENDPOINT_TYPE_t ep_type,
		                                     const uint16_t ep_max_packet_size) 
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	71fb      	strb	r3, [r7, #7]
 8005dea:	460b      	mov	r3, r1
 8005dec:	71bb      	strb	r3, [r7, #6]
 8005dee:	4613      	mov	r3, r2
 8005df0:	80bb      	strh	r3, [r7, #4]
  daint_data_t daintmsk;
  XMC_USBD_EP_t *ep;
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 8005df2:	4b9d      	ldr	r3, [pc, #628]	; (8006068 <XMC_USBD_EndpointConfigure+0x288>)
 8005df4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	613b      	str	r3, [r7, #16]
  ep =&xmc_device.ep[ep_addr & (uint32_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	2234      	movs	r2, #52	; 0x34
 8005e04:	fb02 f303 	mul.w	r3, r2, r3
 8005e08:	4a97      	ldr	r2, [pc, #604]	; (8006068 <XMC_USBD_EndpointConfigure+0x288>)
 8005e0a:	4413      	add	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]
  memset((void*)ep,0x0U,sizeof(XMC_USBD_EP_t)); /* clear endpoint structure */
 8005e0e:	2234      	movs	r2, #52	; 0x34
 8005e10:	2100      	movs	r1, #0
 8005e12:	6978      	ldr	r0, [r7, #20]
 8005e14:	f000 fe60 	bl	8006ad8 <memset>
  /* do ep configuration */
  ep->address_u.address = ep_addr;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	79fa      	ldrb	r2, [r7, #7]
 8005e1c:	701a      	strb	r2, [r3, #0]
  ep->isConfigured = 1U;
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	7913      	ldrb	r3, [r2, #4]
 8005e22:	f043 0304 	orr.w	r3, r3, #4
 8005e26:	7113      	strb	r3, [r2, #4]
  ep->maxPacketSize = (uint8_t)ep_max_packet_size;
 8005e28:	88bb      	ldrh	r3, [r7, #4]
 8005e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e2e:	b2d9      	uxtb	r1, r3
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	6853      	ldr	r3, [r2, #4]
 8005e34:	f361 23d1 	bfi	r3, r1, #11, #7
 8005e38:	6053      	str	r3, [r2, #4]
  if (ep->address_u.address != 0U)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d007      	beq.n	8005e52 <XMC_USBD_EndpointConfigure+0x72>
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE;
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	6893      	ldr	r3, [r2, #8]
 8005e46:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8005e4a:	f361 0312 	bfi	r3, r1, #0, #19
 8005e4e:	6093      	str	r3, [r2, #8]
 8005e50:	e005      	b.n	8005e5e <XMC_USBD_EndpointConfigure+0x7e>
  }
  else
  {
    ep->maxTransferSize = (uint32_t)XMC_USBD_MAX_TRANSFER_SIZE_EP0;
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	6893      	ldr	r3, [r2, #8]
 8005e56:	2140      	movs	r1, #64	; 0x40
 8005e58:	f361 0312 	bfi	r3, r1, #0, #19
 8005e5c:	6093      	str	r3, [r2, #8]
  }
  /* transfer buffer */
  ep->inBuffer = XMC_USBD_EP_IN_BUFFER[ep->address_u.address_st.number];
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	021b      	lsls	r3, r3, #8
 8005e6a:	4a80      	ldr	r2, [pc, #512]	; (800606c <XMC_USBD_EndpointConfigure+0x28c>)
 8005e6c:	441a      	add	r2, r3
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	61da      	str	r2, [r3, #28]
  ep->outBuffer = XMC_USBD_EP_OUT_BUFFER[ep->address_u.address_st.number];
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	4a7c      	ldr	r2, [pc, #496]	; (8006070 <XMC_USBD_EndpointConfigure+0x290>)
 8005e80:	441a      	add	r2, r3
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	60da      	str	r2, [r3, #12]
  /* buffer size*/
  ep->inBufferSize = XMC_USBD_EP_IN_BUFFERSIZE[ep->address_u.address_st.number];
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	4b78      	ldr	r3, [pc, #480]	; (8006074 <XMC_USBD_EndpointConfigure+0x294>)
 8005e94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	621a      	str	r2, [r3, #32]
  ep->outBufferSize = XMC_USBD_EP_OUT_BUFFERSIZE[ep->address_u.address_st.number];
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	4b73      	ldr	r3, [pc, #460]	; (8006078 <XMC_USBD_EndpointConfigure+0x298>)
 8005eaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	615a      	str	r2, [r3, #20]
  /* is in */
  if ((ep->address_u.address_st.direction == 1U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d102      	bne.n	8005ec6 <XMC_USBD_EndpointConfigure+0xe6>
 8005ec0:	79bb      	ldrb	r3, [r7, #6]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d17c      	bne.n	8005fc0 <XMC_USBD_EndpointConfigure+0x1e0>
  {
    depctl_data_t data;
    data.d32 = xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	4a65      	ldr	r2, [pc, #404]	; (8006068 <XMC_USBD_EndpointConfigure+0x288>)
 8005ed2:	336a      	adds	r3, #106	; 0x6a
 8005ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60fb      	str	r3, [r7, #12]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8005edc:	7b7b      	ldrb	r3, [r7, #13]
 8005ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee2:	737b      	strb	r3, [r7, #13]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8005ee4:	79bb      	ldrb	r3, [r7, #6]
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	7bbb      	ldrb	r3, [r7, #14]
 8005eee:	f362 0383 	bfi	r3, r2, #2, #2
 8005ef2:	73bb      	strb	r3, [r7, #14]
		/* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8005ef4:	79bb      	ldrb	r3, [r7, #6]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d124      	bne.n	8005f44 <XMC_USBD_EndpointConfigure+0x164>
    {
			switch(ep_max_packet_size)
 8005efa:	88bb      	ldrh	r3, [r7, #4]
 8005efc:	2b40      	cmp	r3, #64	; 0x40
 8005efe:	d00a      	beq.n	8005f16 <XMC_USBD_EndpointConfigure+0x136>
 8005f00:	2b40      	cmp	r3, #64	; 0x40
 8005f02:	dc28      	bgt.n	8005f56 <XMC_USBD_EndpointConfigure+0x176>
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	d00b      	beq.n	8005f20 <XMC_USBD_EndpointConfigure+0x140>
 8005f08:	2b20      	cmp	r3, #32
 8005f0a:	dc24      	bgt.n	8005f56 <XMC_USBD_EndpointConfigure+0x176>
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d013      	beq.n	8005f38 <XMC_USBD_EndpointConfigure+0x158>
 8005f10:	2b10      	cmp	r3, #16
 8005f12:	d00b      	beq.n	8005f2c <XMC_USBD_EndpointConfigure+0x14c>
				break;
				case (8U):
				data.b.mps = 0x3U;
				break;
				default:
				break;
 8005f14:	e01f      	b.n	8005f56 <XMC_USBD_EndpointConfigure+0x176>
				data.b.mps = 0x0U;
 8005f16:	89bb      	ldrh	r3, [r7, #12]
 8005f18:	f36f 030a 	bfc	r3, #0, #11
 8005f1c:	81bb      	strh	r3, [r7, #12]
				break;
 8005f1e:	e01b      	b.n	8005f58 <XMC_USBD_EndpointConfigure+0x178>
				data.b.mps = 0x1U;
 8005f20:	89bb      	ldrh	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f362 030a 	bfi	r3, r2, #0, #11
 8005f28:	81bb      	strh	r3, [r7, #12]
				break;
 8005f2a:	e015      	b.n	8005f58 <XMC_USBD_EndpointConfigure+0x178>
				data.b.mps = 0x2U;
 8005f2c:	89bb      	ldrh	r3, [r7, #12]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f362 030a 	bfi	r3, r2, #0, #11
 8005f34:	81bb      	strh	r3, [r7, #12]
				break;
 8005f36:	e00f      	b.n	8005f58 <XMC_USBD_EndpointConfigure+0x178>
				data.b.mps = 0x3U;
 8005f38:	89bb      	ldrh	r3, [r7, #12]
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	f362 030a 	bfi	r3, r2, #0, #11
 8005f40:	81bb      	strh	r3, [r7, #12]
				break;
 8005f42:	e009      	b.n	8005f58 <XMC_USBD_EndpointConfigure+0x178>
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8005f44:	88bb      	ldrh	r3, [r7, #4]
 8005f46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	89bb      	ldrh	r3, [r7, #12]
 8005f4e:	f362 030a 	bfi	r3, r2, #0, #11
 8005f52:	81bb      	strh	r3, [r7, #12]
 8005f54:	e000      	b.n	8005f58 <XMC_USBD_EndpointConfigure+0x178>
				break;
 8005f56:	bf00      	nop
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	f043 0310 	orr.w	r3, r3, #16
 8005f5e:	73fb      	strb	r3, [r7, #15]
		/* clear stall */
		data.b.stall = 0U;
 8005f60:	7bbb      	ldrb	r3, [r7, #14]
 8005f62:	f36f 1345 	bfc	r3, #5, #1
 8005f66:	73bb      	strb	r3, [r7, #14]
		/* set tx fifo */
		ep->txFifoNum = XMC_USBD_lAssignTXFifo(); /* get tx fifo */
 8005f68:	f7fe fd08 	bl	800497c <XMC_USBD_lAssignTXFifo>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	b2d9      	uxtb	r1, r3
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	8893      	ldrh	r3, [r2, #4]
 8005f78:	f361 1389 	bfi	r3, r1, #6, #4
 8005f7c:	8093      	strh	r3, [r2, #4]
		data.b.txfnum = ep->txFifoNum;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	889b      	ldrh	r3, [r3, #4]
 8005f82:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	89fb      	ldrh	r3, [r7, #14]
 8005f8a:	f362 1389 	bfi	r3, r2, #6, #4
 8005f8e:	81fb      	strh	r3, [r7, #14]
		xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32; /* configure endpoint */
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	4a33      	ldr	r2, [pc, #204]	; (8006068 <XMC_USBD_EndpointConfigure+0x288>)
 8005f9c:	336a      	adds	r3, #106	; 0x6a
 8005f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	601a      	str	r2, [r3, #0]
		daintmsk.ep.in |= (uint16_t)((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts for endpoint */
 8005fa6:	8a3a      	ldrh	r2, [r7, #16]
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	408b      	lsls	r3, r1
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	823b      	strh	r3, [r7, #16]
  }
  if ((ep->address_u.address_st.direction == 0U) || (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <XMC_USBD_EndpointConfigure+0x1f4>
 8005fce:	79bb      	ldrb	r3, [r7, #6]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d175      	bne.n	80060c0 <XMC_USBD_EndpointConfigure+0x2e0>
  {
    /* is out */
		depctl_data_t data;
		data.d32 = xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	4a22      	ldr	r2, [pc, #136]	; (8006068 <XMC_USBD_EndpointConfigure+0x288>)
 8005fe0:	3370      	adds	r3, #112	; 0x70
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60bb      	str	r3, [r7, #8]
		/*enable endpoint */
		data.b.usbactep = 1U;
 8005fec:	7a7b      	ldrb	r3, [r7, #9]
 8005fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff2:	727b      	strb	r3, [r7, #9]
		/* set ep type */
		data.b.eptype = (uint8_t)ep_type;
 8005ff4:	79bb      	ldrb	r3, [r7, #6]
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	7abb      	ldrb	r3, [r7, #10]
 8005ffe:	f362 0383 	bfi	r3, r2, #2, #2
 8006002:	72bb      	strb	r3, [r7, #10]
    /* set mps */
    if (ep_type == XMC_USBD_ENDPOINT_TYPE_CONTROL)
 8006004:	79bb      	ldrb	r3, [r7, #6]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d124      	bne.n	8006054 <XMC_USBD_EndpointConfigure+0x274>
		{
			switch(ep_max_packet_size)
 800600a:	88bb      	ldrh	r3, [r7, #4]
 800600c:	2b40      	cmp	r3, #64	; 0x40
 800600e:	d00a      	beq.n	8006026 <XMC_USBD_EndpointConfigure+0x246>
 8006010:	2b40      	cmp	r3, #64	; 0x40
 8006012:	dc33      	bgt.n	800607c <XMC_USBD_EndpointConfigure+0x29c>
 8006014:	2b20      	cmp	r3, #32
 8006016:	d00b      	beq.n	8006030 <XMC_USBD_EndpointConfigure+0x250>
 8006018:	2b20      	cmp	r3, #32
 800601a:	dc2f      	bgt.n	800607c <XMC_USBD_EndpointConfigure+0x29c>
 800601c:	2b08      	cmp	r3, #8
 800601e:	d013      	beq.n	8006048 <XMC_USBD_EndpointConfigure+0x268>
 8006020:	2b10      	cmp	r3, #16
 8006022:	d00b      	beq.n	800603c <XMC_USBD_EndpointConfigure+0x25c>
					break;
				case (8U):
					data.b.mps = 0x3U;
					break;
				default:
					break;
 8006024:	e02a      	b.n	800607c <XMC_USBD_EndpointConfigure+0x29c>
					data.b.mps = 0x0U;
 8006026:	893b      	ldrh	r3, [r7, #8]
 8006028:	f36f 030a 	bfc	r3, #0, #11
 800602c:	813b      	strh	r3, [r7, #8]
					break;
 800602e:	e026      	b.n	800607e <XMC_USBD_EndpointConfigure+0x29e>
					data.b.mps = 0x1U;
 8006030:	893b      	ldrh	r3, [r7, #8]
 8006032:	2201      	movs	r2, #1
 8006034:	f362 030a 	bfi	r3, r2, #0, #11
 8006038:	813b      	strh	r3, [r7, #8]
					break;
 800603a:	e020      	b.n	800607e <XMC_USBD_EndpointConfigure+0x29e>
					data.b.mps = 0x2U;
 800603c:	893b      	ldrh	r3, [r7, #8]
 800603e:	2202      	movs	r2, #2
 8006040:	f362 030a 	bfi	r3, r2, #0, #11
 8006044:	813b      	strh	r3, [r7, #8]
					break;
 8006046:	e01a      	b.n	800607e <XMC_USBD_EndpointConfigure+0x29e>
					data.b.mps = 0x3U;
 8006048:	893b      	ldrh	r3, [r7, #8]
 800604a:	2203      	movs	r2, #3
 800604c:	f362 030a 	bfi	r3, r2, #0, #11
 8006050:	813b      	strh	r3, [r7, #8]
					break;
 8006052:	e014      	b.n	800607e <XMC_USBD_EndpointConfigure+0x29e>
			}
		}
		else
		{
			data.b.mps = ep_max_packet_size;
 8006054:	88bb      	ldrh	r3, [r7, #4]
 8006056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800605a:	b29a      	uxth	r2, r3
 800605c:	893b      	ldrh	r3, [r7, #8]
 800605e:	f362 030a 	bfi	r3, r2, #0, #11
 8006062:	813b      	strh	r3, [r7, #8]
 8006064:	e00b      	b.n	800607e <XMC_USBD_EndpointConfigure+0x29e>
 8006066:	bf00      	nop
 8006068:	2000089c 	.word	0x2000089c
 800606c:	30000700 	.word	0x30000700
 8006070:	30000000 	.word	0x30000000
 8006074:	20000880 	.word	0x20000880
 8006078:	20000864 	.word	0x20000864
					break;
 800607c:	bf00      	nop
		}
		/* set first data0 pid */
		data.b.setd0pid = 1U;
 800607e:	7afb      	ldrb	r3, [r7, #11]
 8006080:	f043 0310 	orr.w	r3, r3, #16
 8006084:	72fb      	strb	r3, [r7, #11]
		/* clear stall */
		data.b.stall =(uint8_t) 0U;
 8006086:	7abb      	ldrb	r3, [r7, #10]
 8006088:	f36f 1345 	bfc	r3, #5, #1
 800608c:	72bb      	strb	r3, [r7, #10]
		xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32; /* configure endpoint */
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006096:	b2db      	uxtb	r3, r3
 8006098:	4a0e      	ldr	r2, [pc, #56]	; (80060d4 <XMC_USBD_EndpointConfigure+0x2f4>)
 800609a:	3370      	adds	r3, #112	; 0x70
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	601a      	str	r2, [r3, #0]
		daintmsk.ep.out |=(uint16_t) ((uint16_t)1U << (uint8_t)ep->address_u.address_st.number); /* enable interrupts */
 80060a6:	8a7a      	ldrh	r2, [r7, #18]
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	4619      	mov	r1, r3
 80060b4:	2301      	movs	r3, #1
 80060b6:	408b      	lsls	r3, r1
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	4313      	orrs	r3, r2
 80060bc:	b29b      	uxth	r3, r3
 80060be:	827b      	strh	r3, [r7, #18]
  }
  xmc_device.device_register->daintmsk = daintmsk.d32;
 80060c0:	4b04      	ldr	r3, [pc, #16]	; (80060d4 <XMC_USBD_EndpointConfigure+0x2f4>)
 80060c2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	61da      	str	r2, [r3, #28]
  return XMC_USBD_STATUS_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	2000089c 	.word	0x2000089c

080060d8 <XMC_USBD_EndpointUnconfigure>:

/**
 * Unconfigure the selected endpoint.
 **/
XMC_USBD_STATUS_t XMC_USBD_EndpointUnconfigure(const uint8_t ep_addr) 
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	71fb      	strb	r3, [r7, #7]
  XMC_USBD_EP_t *ep = &xmc_device.ep[ep_addr & (uint8_t)XMC_USBD_ENDPOINT_NUMBER_MASK];
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	f003 030f 	and.w	r3, r3, #15
 80060e8:	2234      	movs	r2, #52	; 0x34
 80060ea:	fb02 f303 	mul.w	r3, r2, r3
 80060ee:	4a54      	ldr	r2, [pc, #336]	; (8006240 <XMC_USBD_EndpointUnconfigure+0x168>)
 80060f0:	4413      	add	r3, r2
 80060f2:	61bb      	str	r3, [r7, #24]
  depctl_data_t data;
	daint_data_t daintmsk;
	XMC_USBD_STATUS_t result;
	uint32_t number_temp;
  data.d32 = 0U;  
 80060f4:	2300      	movs	r3, #0
 80060f6:	613b      	str	r3, [r7, #16]
  daintmsk.d32 = xmc_device.device_register->daintmsk;  
 80060f8:	4b51      	ldr	r3, [pc, #324]	; (8006240 <XMC_USBD_EndpointUnconfigure+0x168>)
 80060fa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	60fb      	str	r3, [r7, #12]
  number_temp = (uint32_t)((uint32_t)1U << (uint8_t)ep->address_u.address_st.number);
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800610a:	b2db      	uxtb	r3, r3
 800610c:	461a      	mov	r2, r3
 800610e:	2301      	movs	r3, #1
 8006110:	4093      	lsls	r3, r2
 8006112:	617b      	str	r3, [r7, #20]
  /* if not configured return an error */
  if (!ep->isConfigured)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	791b      	ldrb	r3, [r3, #4]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d102      	bne.n	8006128 <XMC_USBD_EndpointUnconfigure+0x50>
  {
     result = XMC_USBD_STATUS_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	77fb      	strb	r3, [r7, #31]
 8006126:	e085      	b.n	8006234 <XMC_USBD_EndpointUnconfigure+0x15c>
  }
  else
  {
    /* disable the endpoint, deactivate it and only send naks */
    data.b.usbactep = 0U;
 8006128:	7c7b      	ldrb	r3, [r7, #17]
 800612a:	f36f 13c7 	bfc	r3, #7, #1
 800612e:	747b      	strb	r3, [r7, #17]
    data.b.epdis =  1U;
 8006130:	7cfb      	ldrb	r3, [r7, #19]
 8006132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006136:	74fb      	strb	r3, [r7, #19]
    data.b.snak =  1U;
 8006138:	7cfb      	ldrb	r3, [r7, #19]
 800613a:	f043 0308 	orr.w	r3, r3, #8
 800613e:	74fb      	strb	r3, [r7, #19]
    data.b.stall =  0U;
 8006140:	7cbb      	ldrb	r3, [r7, #18]
 8006142:	f36f 1345 	bfc	r3, #5, #1
 8006146:	74bb      	strb	r3, [r7, #18]
    ep->isConfigured =  0U;
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	7913      	ldrb	r3, [r2, #4]
 800614c:	f36f 0382 	bfc	r3, #2, #1
 8006150:	7113      	strb	r3, [r2, #4]
    ep->isStalled =  0U;
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	7913      	ldrb	r3, [r2, #4]
 8006156:	f36f 1345 	bfc	r3, #5, #1
 800615a:	7113      	strb	r3, [r2, #4]
    ep->outInUse =  0U;
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	6853      	ldr	r3, [r2, #4]
 8006160:	f36f 1304 	bfc	r3, #4, #1
 8006164:	6053      	str	r3, [r2, #4]
    ep->inInUse =  0U;
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	6853      	ldr	r3, [r2, #4]
 800616a:	f36f 03c3 	bfc	r3, #3, #1
 800616e:	6053      	str	r3, [r2, #4]
    /* chose register based on the direction. Control Endpoint need both */
    if ((ep->address_u.address_st.direction == 1U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <XMC_USBD_EndpointUnconfigure+0xb4>
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	791b      	ldrb	r3, [r3, #4]
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	d112      	bne.n	80061b2 <XMC_USBD_EndpointUnconfigure+0xda>
    {
      /* disable endpoint configuration */
      xmc_device.endpoint_in_register[ep->address_u.address_st.number]->diepctl = data.d32;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006194:	b2db      	uxtb	r3, r3
 8006196:	4a2a      	ldr	r2, [pc, #168]	; (8006240 <XMC_USBD_EndpointUnconfigure+0x168>)
 8006198:	336a      	adds	r3, #106	; 0x6a
 800619a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	601a      	str	r2, [r3, #0]
      /* disable interrupts */
      daintmsk.ep.in = (uint16_t)((uint32_t)daintmsk.ep.in & (~(uint32_t)number_temp));
 80061a2:	89ba      	ldrh	r2, [r7, #12]
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	43db      	mvns	r3, r3
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	4013      	ands	r3, r2
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	81bb      	strh	r3, [r7, #12]
    }
    if ((ep->address_u.address_st.direction == 0U) || (ep->type == (uint8_t)XMC_USBD_ENDPOINT_TYPE_CONTROL))
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d006      	beq.n	80061ce <XMC_USBD_EndpointUnconfigure+0xf6>
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	791b      	ldrb	r3, [r3, #4]
 80061c4:	f003 0303 	and.w	r3, r3, #3
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d123      	bne.n	8006216 <XMC_USBD_EndpointUnconfigure+0x13e>
    {
      xmc_device.endpoint_out_register[ep->address_u.address_st.number]->doepctl = data.d32;
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	4a19      	ldr	r2, [pc, #100]	; (8006240 <XMC_USBD_EndpointUnconfigure+0x168>)
 80061da:	3370      	adds	r3, #112	; 0x70
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	601a      	str	r2, [r3, #0]
      daintmsk.ep.out = (uint16_t)((uint32_t)daintmsk.ep.out & (~(uint32_t)number_temp));
 80061e6:	89fa      	ldrh	r2, [r7, #14]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	43db      	mvns	r3, r3
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	4013      	ands	r3, r2
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	81fb      	strh	r3, [r7, #14]
      if(usbd_init->usbd_transfer_mode == XMC_USBD_USE_FIFO)
 80061f6:	4b13      	ldr	r3, [pc, #76]	; (8006244 <XMC_USBD_EndpointUnconfigure+0x16c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	7b5b      	ldrb	r3, [r3, #13]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d10a      	bne.n	8006216 <XMC_USBD_EndpointUnconfigure+0x13e>
      {
        xmc_device.device_register->dtknqr4_fifoemptymsk &= ~number_temp;
 8006200:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <XMC_USBD_EndpointUnconfigure+0x168>)
 8006202:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8006206:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	43da      	mvns	r2, r3
 800620c:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <XMC_USBD_EndpointUnconfigure+0x168>)
 800620e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8006212:	400a      	ands	r2, r1
 8006214:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }
    xmc_device.device_register->daintmsk = daintmsk.d32;
 8006216:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <XMC_USBD_EndpointUnconfigure+0x168>)
 8006218:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	61da      	str	r2, [r3, #28]
    XMC_USBD_lUnassignFifo(ep->txFifoNum); /* free fifo */
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	889b      	ldrh	r3, [r3, #4]
 8006224:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8006228:	b2db      	uxtb	r3, r3
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe fbde 	bl	80049ec <XMC_USBD_lUnassignFifo>
    result = XMC_USBD_STATUS_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	77fb      	strb	r3, [r7, #31]
  }
  return result;
 8006234:	7ffb      	ldrb	r3, [r7, #31]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	2000089c 	.word	0x2000089c
 8006244:	20000aa4 	.word	0x20000aa4

08006248 <XMC_USBD_GetFrameNumber>:

/**
 * Gets the current USB frame number
 **/
uint16_t XMC_USBD_GetFrameNumber(void) 
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
  uint16_t result;
  dsts_data_t dsts;
  dsts.d32 = xmc_device.device_register->dsts;
 800624e:	4b08      	ldr	r3, [pc, #32]	; (8006270 <XMC_USBD_GetFrameNumber+0x28>)
 8006250:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	603b      	str	r3, [r7, #0]
  result = (uint16_t)dsts.b.soffn;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800625e:	b29b      	uxth	r3, r3
 8006260:	80fb      	strh	r3, [r7, #6]
  return result;
 8006262:	88fb      	ldrh	r3, [r7, #6]
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	2000089c 	.word	0x2000089c

08006274 <XMC_USBD_IsEnumDone>:
 * Gets the USB speed enumeration completion status.
 * This should not be used for the actual USB enumeration completion status. For the actual USB enumeration status,
 * the application layer should check for the completion of USB standard request Set configuration.
 **/
uint32_t XMC_USBD_IsEnumDone(void)
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
  return (uint32_t)((uint8_t)xmc_device.IsConnected && (uint8_t)xmc_device.IsPowered);
 8006278:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <XMC_USBD_IsEnumDone+0x34>)
 800627a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d009      	beq.n	800629c <XMC_USBD_IsEnumDone+0x28>
 8006288:	4b07      	ldr	r3, [pc, #28]	; (80062a8 <XMC_USBD_IsEnumDone+0x34>)
 800628a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800628e:	f003 0304 	and.w	r3, r3, #4
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <XMC_USBD_IsEnumDone+0x28>
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <XMC_USBD_IsEnumDone+0x2a>
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	2000089c 	.word	0x2000089c

080062ac <USB_GetNextDescriptor>:
			 */
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	81fb      	strh	r3, [r7, #14]

				if (*BytesRem < CurrDescriptorSize)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	89fa      	ldrh	r2, [r7, #14]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d902      	bls.n	80062ce <USB_GetNextDescriptor+0x22>
				  CurrDescriptorSize = *BytesRem;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	81fb      	strh	r3, [r7, #14]

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	89fb      	ldrh	r3, [r7, #14]
 80062d6:	4413      	add	r3, r2
 80062d8:	461a      	mov	r2, r3
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	601a      	str	r2, [r3, #0]
				*BytesRem      -= CurrDescriptorSize;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	881a      	ldrh	r2, [r3, #0]
 80062e2:	89fb      	ldrh	r3, [r7, #14]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	801a      	strh	r2, [r3, #0]
			}
 80062ec:	bf00      	nop
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <USB_GetNextDescriptorOfType>:
#endif

void USB_GetNextDescriptorOfType(uint16_t* const BytesRem,
                                 void** const CurrConfigLoc,
                                 const uint8_t Type)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	4613      	mov	r3, r2
 8006304:	71fb      	strb	r3, [r7, #7]
    while (*BytesRem)
 8006306:	e009      	b.n	800631c <USB_GetNextDescriptorOfType+0x24>
    {
        USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 8006308:	68b9      	ldr	r1, [r7, #8]
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7ff ffce 	bl	80062ac <USB_GetNextDescriptor>

        if (DESCRIPTOR_TYPE(*CurrConfigLoc) == Type)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	79fa      	ldrb	r2, [r7, #7]
 8006318:	429a      	cmp	r2, r3
 800631a:	d004      	beq.n	8006326 <USB_GetNextDescriptorOfType+0x2e>
    while (*BytesRem)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1f1      	bne.n	8006308 <USB_GetNextDescriptorOfType+0x10>
 8006324:	e000      	b.n	8006328 <USB_GetNextDescriptorOfType+0x30>
          return;
 8006326:	bf00      	nop
    }
}
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USB_GetNextDescriptorOfTypeBefore>:

void USB_GetNextDescriptorOfTypeBefore(uint16_t* const BytesRem,
                                       void** const CurrConfigLoc,
                                       const uint8_t Type,
                                       const uint8_t BeforeType)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	4611      	mov	r1, r2
 800633a:	461a      	mov	r2, r3
 800633c:	460b      	mov	r3, r1
 800633e:	71fb      	strb	r3, [r7, #7]
 8006340:	4613      	mov	r3, r2
 8006342:	71bb      	strb	r3, [r7, #6]
    while (*BytesRem)
 8006344:	e013      	b.n	800636e <USB_GetNextDescriptorOfTypeBefore+0x40>
    {
        USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 8006346:	68b9      	ldr	r1, [r7, #8]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f7ff ffaf 	bl	80062ac <USB_GetNextDescriptor>

        if (DESCRIPTOR_TYPE(*CurrConfigLoc) == Type)
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	785b      	ldrb	r3, [r3, #1]
 8006354:	79fa      	ldrb	r2, [r7, #7]
 8006356:	429a      	cmp	r2, r3
 8006358:	d00e      	beq.n	8006378 <USB_GetNextDescriptorOfTypeBefore+0x4a>
        {
            return;
        }
        else if (DESCRIPTOR_TYPE(*CurrConfigLoc) == BeforeType)
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	785b      	ldrb	r3, [r3, #1]
 8006360:	79ba      	ldrb	r2, [r7, #6]
 8006362:	429a      	cmp	r2, r3
 8006364:	d103      	bne.n	800636e <USB_GetNextDescriptorOfTypeBefore+0x40>
        {
            *BytesRem = 0;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	801a      	strh	r2, [r3, #0]
            return;
 800636c:	e005      	b.n	800637a <USB_GetNextDescriptorOfTypeBefore+0x4c>
    while (*BytesRem)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1e7      	bne.n	8006346 <USB_GetNextDescriptorOfTypeBefore+0x18>
 8006376:	e000      	b.n	800637a <USB_GetNextDescriptorOfTypeBefore+0x4c>
            return;
 8006378:	bf00      	nop
        }
    }
}
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <USB_GetNextDescriptorOfTypeAfter>:

void USB_GetNextDescriptorOfTypeAfter(uint16_t* const BytesRem,
                                      void** const CurrConfigLoc,
                                      const uint8_t Type,
                                      const uint8_t AfterType)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	4611      	mov	r1, r2
 800638c:	461a      	mov	r2, r3
 800638e:	460b      	mov	r3, r1
 8006390:	71fb      	strb	r3, [r7, #7]
 8006392:	4613      	mov	r3, r2
 8006394:	71bb      	strb	r3, [r7, #6]
    USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);
 8006396:	79bb      	ldrb	r3, [r7, #6]
 8006398:	461a      	mov	r2, r3
 800639a:	68b9      	ldr	r1, [r7, #8]
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f7ff ffab 	bl	80062f8 <USB_GetNextDescriptorOfType>

    if (*BytesRem)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	881b      	ldrh	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <USB_GetNextDescriptorOfTypeAfter+0x36>
      USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
 80063aa:	79fb      	ldrb	r3, [r7, #7]
 80063ac:	461a      	mov	r2, r3
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f7ff ffa1 	bl	80062f8 <USB_GetNextDescriptorOfType>
}
 80063b6:	bf00      	nop
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b086      	sub	sp, #24
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	60f8      	str	r0, [r7, #12]
 80063c6:	60b9      	str	r1, [r7, #8]
 80063c8:	607a      	str	r2, [r7, #4]
    uint8_t ErrorCode;

    while (*BytesRem)
 80063ca:	e01e      	b.n	800640a <USB_GetNextDescriptorComp+0x4c>
    {
        uint8_t* PrevDescLoc  = *CurrConfigLoc;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	617b      	str	r3, [r7, #20]
        uint16_t PrevBytesRem = *BytesRem;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	827b      	strh	r3, [r7, #18]

        USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f7ff ff66 	bl	80062ac <USB_GetNextDescriptor>

        if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4610      	mov	r0, r2
 80063e8:	4798      	blx	r3
 80063ea:	4603      	mov	r3, r0
 80063ec:	747b      	strb	r3, [r7, #17]
 80063ee:	7c7b      	ldrb	r3, [r7, #17]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d00a      	beq.n	800640a <USB_GetNextDescriptorComp+0x4c>
        {
            if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
 80063f4:	7c7b      	ldrb	r3, [r7, #17]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d105      	bne.n	8006406 <USB_GetNextDescriptorComp+0x48>
            {
                *CurrConfigLoc = PrevDescLoc;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	601a      	str	r2, [r3, #0]
                *BytesRem      = PrevBytesRem;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8a7a      	ldrh	r2, [r7, #18]
 8006404:	801a      	strh	r2, [r3, #0]
            }

            return ErrorCode;
 8006406:	7c7b      	ldrb	r3, [r7, #17]
 8006408:	e004      	b.n	8006414 <USB_GetNextDescriptorComp+0x56>
    while (*BytesRem)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1dc      	bne.n	80063cc <USB_GetNextDescriptorComp+0xe>
        }
    }

    return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
 8006412:	2302      	movs	r3, #2
}
 8006414:	4618      	mov	r0, r3
 8006416:	3718      	adds	r7, #24
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
 8006420:	f000 f802 	bl	8006428 <USB_DeviceTask>
	#endif
}
 8006424:	bf00      	nop
 8006426:	bd80      	pop	{r7, pc}

08006428 <USB_DeviceTask>:

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 800642e:	4b1d      	ldr	r3, [pc, #116]	; (80064a4 <USB_DeviceTask+0x7c>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d031      	beq.n	800649c <USB_DeviceTask+0x74>
		return device.CurrentDirection | device.CurrentEndpoint;
 8006438:	4b1b      	ldr	r3, [pc, #108]	; (80064a8 <USB_DeviceTask+0x80>)
 800643a:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
 800643e:	4b1a      	ldr	r3, [pc, #104]	; (80064a8 <USB_DeviceTask+0x80>)
 8006440:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006444:	4313      	orrs	r3, r2
 8006446:	b2db      	uxtb	r3, r3
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
 8006448:	71fb      	strb	r3, [r7, #7]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800644a:	2200      	movs	r2, #0
 800644c:	4b16      	ldr	r3, [pc, #88]	; (80064a8 <USB_DeviceTask+0x80>)
 800644e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 8006452:	2200      	movs	r2, #0
 8006454:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <USB_DeviceTask+0x80>)
 8006456:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}
 800645a:	bf00      	nop
		return device.IsSetupRecieved;
 800645c:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <USB_DeviceTask+0x80>)
 800645e:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8006462:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	bf14      	ite	ne
 800646c:	2301      	movne	r3, #1
 800646e:	2300      	moveq	r3, #0
 8006470:	b2db      	uxtb	r3, r3

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <USB_DeviceTask+0x52>
	  USB_Device_ProcessControlRequest();
 8006476:	f7fd fbc1 	bl	8003bfc <USB_Device_ProcessControlRequest>
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	71bb      	strb	r3, [r7, #6]
		device.CurrentEndpoint = Address & ENDPOINT_EPNUM_MASK;
 800647e:	79bb      	ldrb	r3, [r7, #6]
 8006480:	f003 030f 	and.w	r3, r3, #15
 8006484:	b2da      	uxtb	r2, r3
 8006486:	4b08      	ldr	r3, [pc, #32]	; (80064a8 <USB_DeviceTask+0x80>)
 8006488:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		device.CurrentDirection = (Address & ENDPOINT_DIR_MASK);
 800648c:	79bb      	ldrb	r3, [r7, #6]
 800648e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006492:	b2da      	uxtb	r2, r3
 8006494:	4b04      	ldr	r3, [pc, #16]	; (80064a8 <USB_DeviceTask+0x80>)
 8006496:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	}
 800649a:	e000      	b.n	800649e <USB_DeviceTask+0x76>
	  return;
 800649c:	bf00      	nop

	Endpoint_SelectEndpoint(PrevEndpoint);
}
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	20000ab4 	.word	0x20000ab4
 80064a8:	20000524 	.word	0x20000524

080064ac <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0

}
 80064b0:	bf00      	nop
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b085      	sub	sp, #20
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	e003      	b.n	80064d0 <delay+0x16>
  {
    __NOP();
 80064c8:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3301      	adds	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d8f7      	bhi.n	80064c8 <delay+0xe>
  }
}
 80064d8:	bf00      	nop
 80064da:	bf00      	nop
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
	...

080064e8 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80064e8:	b598      	push	{r3, r4, r7, lr}
 80064ea:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80064ec:	4a06      	ldr	r2, [pc, #24]	; (8006508 <SystemInit+0x20>)
 80064ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80064f2:	4614      	mov	r4, r2
 80064f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80064f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80064fa:	f000 f807 	bl	800650c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80064fe:	f7fa fb25 	bl	8000b4c <SystemCoreClockSetup>
}
 8006502:	bf00      	nop
 8006504:	bd98      	pop	{r3, r4, r7, pc}
 8006506:	bf00      	nop
 8006508:	2000ffc4 	.word	0x2000ffc4

0800650c <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006512:	b672      	cpsid	i
}
 8006514:	bf00      	nop
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8006516:	4b17      	ldr	r3, [pc, #92]	; (8006574 <SystemCoreSetup+0x68>)
 8006518:	4a17      	ldr	r2, [pc, #92]	; (8006578 <SystemCoreSetup+0x6c>)
 800651a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800651c:	f3bf 8f4f 	dsb	sy
}
 8006520:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8006522:	b662      	cpsie	i
}
 8006524:	bf00      	nop
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8006526:	4b13      	ldr	r3, [pc, #76]	; (8006574 <SystemCoreSetup+0x68>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652c:	4a11      	ldr	r2, [pc, #68]	; (8006574 <SystemCoreSetup+0x68>)
 800652e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006532:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8006536:	4b0f      	ldr	r3, [pc, #60]	; (8006574 <SystemCoreSetup+0x68>)
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	4a0e      	ldr	r2, [pc, #56]	; (8006574 <SystemCoreSetup+0x68>)
 800653c:	f023 0308 	bic.w	r3, r3, #8
 8006540:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8006542:	4b0e      	ldr	r3, [pc, #56]	; (800657c <SystemCoreSetup+0x70>)
 8006544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f023 030f 	bic.w	r3, r3, #15
 8006552:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f043 0303 	orr.w	r3, r3, #3
 800655a:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800655c:	4b07      	ldr	r3, [pc, #28]	; (800657c <SystemCoreSetup+0x70>)
 800655e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006562:	461a      	mov	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6153      	str	r3, [r2, #20]
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	e000ed00 	.word	0xe000ed00
 8006578:	08000000 	.word	0x08000000
 800657c:	58001000 	.word	0x58001000

__WEAK void SystemCoreClockSetup(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8006584:	4b75      	ldr	r3, [pc, #468]	; (800675c <SystemCoreSetup+0x250>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10c      	bne.n	80065aa <SystemCoreSetup+0x9e>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8006590:	4b72      	ldr	r3, [pc, #456]	; (800675c <SystemCoreSetup+0x250>)
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	4a71      	ldr	r2, [pc, #452]	; (800675c <SystemCoreSetup+0x250>)
 8006596:	f043 0301 	orr.w	r3, r3, #1
 800659a:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 800659c:	bf00      	nop
 800659e:	4b6f      	ldr	r3, [pc, #444]	; (800675c <SystemCoreSetup+0x250>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0f9      	beq.n	800659e <SystemCoreSetup+0x92>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80065aa:	4b6d      	ldr	r3, [pc, #436]	; (8006760 <SystemCoreSetup+0x254>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d009      	beq.n	80065ca <SystemCoreSetup+0xbe>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80065b6:	4b6a      	ldr	r3, [pc, #424]	; (8006760 <SystemCoreSetup+0x254>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	4a69      	ldr	r2, [pc, #420]	; (8006760 <SystemCoreSetup+0x254>)
 80065bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065c0:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80065c2:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80065c6:	f7ff ff78 	bl	80064ba <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80065ca:	4b66      	ldr	r3, [pc, #408]	; (8006764 <SystemCoreSetup+0x258>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4a65      	ldr	r2, [pc, #404]	; (8006764 <SystemCoreSetup+0x258>)
 80065d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065d4:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80065d6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80065da:	f7ff ff6e 	bl	80064ba <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80065de:	4b61      	ldr	r3, [pc, #388]	; (8006764 <SystemCoreSetup+0x258>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	4a60      	ldr	r2, [pc, #384]	; (8006764 <SystemCoreSetup+0x258>)
 80065e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065e8:	f023 0302 	bic.w	r3, r3, #2
 80065ec:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80065ee:	4b5e      	ldr	r3, [pc, #376]	; (8006768 <SystemCoreSetup+0x25c>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d029      	beq.n	800664e <SystemCoreSetup+0x142>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80065fa:	4b5b      	ldr	r3, [pc, #364]	; (8006768 <SystemCoreSetup+0x25c>)
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	4a5a      	ldr	r2, [pc, #360]	; (8006768 <SystemCoreSetup+0x25c>)
 8006600:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006604:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006608:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 800660a:	f000 f927 	bl	800685c <OSCHP_GetFrequency>
 800660e:	4603      	mov	r3, r0
 8006610:	4a56      	ldr	r2, [pc, #344]	; (800676c <SystemCoreSetup+0x260>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	0d1b      	lsrs	r3, r3, #20
 8006618:	3b01      	subs	r3, #1
 800661a:	041a      	lsls	r2, r3, #16
 800661c:	4b52      	ldr	r3, [pc, #328]	; (8006768 <SystemCoreSetup+0x25c>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	4951      	ldr	r1, [pc, #324]	; (8006768 <SystemCoreSetup+0x25c>)
 8006622:	4313      	orrs	r3, r2
 8006624:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8006626:	4b4f      	ldr	r3, [pc, #316]	; (8006764 <SystemCoreSetup+0x258>)
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	4a4e      	ldr	r2, [pc, #312]	; (8006764 <SystemCoreSetup+0x258>)
 800662c:	f023 0301 	bic.w	r3, r3, #1
 8006630:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8006632:	4b4c      	ldr	r3, [pc, #304]	; (8006764 <SystemCoreSetup+0x258>)
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	4a4b      	ldr	r2, [pc, #300]	; (8006764 <SystemCoreSetup+0x258>)
 8006638:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800663c:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 800663e:	bf00      	nop
 8006640:	4b48      	ldr	r3, [pc, #288]	; (8006764 <SystemCoreSetup+0x258>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8006648:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800664c:	d1f8      	bne.n	8006640 <SystemCoreSetup+0x134>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 800664e:	4b45      	ldr	r3, [pc, #276]	; (8006764 <SystemCoreSetup+0x258>)
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	4a44      	ldr	r2, [pc, #272]	; (8006764 <SystemCoreSetup+0x258>)
 8006654:	f043 0301 	orr.w	r3, r3, #1
 8006658:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800665a:	4b42      	ldr	r3, [pc, #264]	; (8006764 <SystemCoreSetup+0x258>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	4a41      	ldr	r2, [pc, #260]	; (8006764 <SystemCoreSetup+0x258>)
 8006660:	f043 0310 	orr.w	r3, r3, #16
 8006664:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006666:	4b3f      	ldr	r3, [pc, #252]	; (8006764 <SystemCoreSetup+0x258>)
 8006668:	4a41      	ldr	r2, [pc, #260]	; (8006770 <SystemCoreSetup+0x264>)
 800666a:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 800666c:	4b3d      	ldr	r3, [pc, #244]	; (8006764 <SystemCoreSetup+0x258>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	4a3c      	ldr	r2, [pc, #240]	; (8006764 <SystemCoreSetup+0x258>)
 8006672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006676:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8006678:	4b3a      	ldr	r3, [pc, #232]	; (8006764 <SystemCoreSetup+0x258>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	4a39      	ldr	r2, [pc, #228]	; (8006764 <SystemCoreSetup+0x258>)
 800667e:	f023 0310 	bic.w	r3, r3, #16
 8006682:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8006684:	4b37      	ldr	r3, [pc, #220]	; (8006764 <SystemCoreSetup+0x258>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	4a36      	ldr	r2, [pc, #216]	; (8006764 <SystemCoreSetup+0x258>)
 800668a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800668e:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006690:	bf00      	nop
 8006692:	4b34      	ldr	r3, [pc, #208]	; (8006764 <SystemCoreSetup+0x258>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0304 	and.w	r3, r3, #4
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0f9      	beq.n	8006692 <SystemCoreSetup+0x186>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800669e:	4b31      	ldr	r3, [pc, #196]	; (8006764 <SystemCoreSetup+0x258>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	4a30      	ldr	r2, [pc, #192]	; (8006764 <SystemCoreSetup+0x258>)
 80066a4:	f023 0301 	bic.w	r3, r3, #1
 80066a8:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80066aa:	bf00      	nop
 80066ac:	4b2d      	ldr	r3, [pc, #180]	; (8006764 <SystemCoreSetup+0x258>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1f9      	bne.n	80066ac <SystemCoreSetup+0x1a0>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80066b8:	4b2e      	ldr	r3, [pc, #184]	; (8006774 <SystemCoreSetup+0x268>)
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	4a2d      	ldr	r2, [pc, #180]	; (8006774 <SystemCoreSetup+0x268>)
 80066be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c2:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80066c4:	4b2b      	ldr	r3, [pc, #172]	; (8006774 <SystemCoreSetup+0x268>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80066ca:	4b2a      	ldr	r3, [pc, #168]	; (8006774 <SystemCoreSetup+0x268>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80066d0:	4b28      	ldr	r3, [pc, #160]	; (8006774 <SystemCoreSetup+0x268>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80066d6:	4b27      	ldr	r3, [pc, #156]	; (8006774 <SystemCoreSetup+0x268>)
 80066d8:	2200      	movs	r2, #0
 80066da:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 80066dc:	4b25      	ldr	r3, [pc, #148]	; (8006774 <SystemCoreSetup+0x268>)
 80066de:	2200      	movs	r2, #0
 80066e0:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80066e2:	4b24      	ldr	r3, [pc, #144]	; (8006774 <SystemCoreSetup+0x268>)
 80066e4:	2203      	movs	r2, #3
 80066e6:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80066e8:	4b1e      	ldr	r3, [pc, #120]	; (8006764 <SystemCoreSetup+0x258>)
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	4a1d      	ldr	r2, [pc, #116]	; (8006764 <SystemCoreSetup+0x258>)
 80066ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f2:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80066f4:	4b1b      	ldr	r3, [pc, #108]	; (8006764 <SystemCoreSetup+0x258>)
 80066f6:	4a20      	ldr	r2, [pc, #128]	; (8006778 <SystemCoreSetup+0x26c>)
 80066f8:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 80066fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80066fe:	f7ff fedc 	bl	80064ba <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8006702:	bf00      	nop
 8006704:	4b17      	ldr	r3, [pc, #92]	; (8006764 <SystemCoreSetup+0x258>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0f9      	beq.n	8006704 <SystemCoreSetup+0x1f8>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8006710:	4b14      	ldr	r3, [pc, #80]	; (8006764 <SystemCoreSetup+0x258>)
 8006712:	4a1a      	ldr	r2, [pc, #104]	; (800677c <SystemCoreSetup+0x270>)
 8006714:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8006716:	f241 1094 	movw	r0, #4500	; 0x1194
 800671a:	f7ff fece 	bl	80064ba <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800671e:	bf00      	nop
 8006720:	4b10      	ldr	r3, [pc, #64]	; (8006764 <SystemCoreSetup+0x258>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0f9      	beq.n	8006720 <SystemCoreSetup+0x214>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800672c:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <SystemCoreSetup+0x258>)
 800672e:	4a14      	ldr	r2, [pc, #80]	; (8006780 <SystemCoreSetup+0x274>)
 8006730:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8006732:	f241 7070 	movw	r0, #6000	; 0x1770
 8006736:	f7ff fec0 	bl	80064ba <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800673a:	bf00      	nop
 800673c:	4b09      	ldr	r3, [pc, #36]	; (8006764 <SystemCoreSetup+0x258>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0f9      	beq.n	800673c <SystemCoreSetup+0x230>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8006748:	4b0e      	ldr	r3, [pc, #56]	; (8006784 <SystemCoreSetup+0x278>)
 800674a:	2205      	movs	r2, #5
 800674c:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 800674e:	4b09      	ldr	r3, [pc, #36]	; (8006774 <SystemCoreSetup+0x268>)
 8006750:	2200      	movs	r2, #0
 8006752:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8006754:	f000 f818 	bl	8006788 <SystemCoreClockUpdate>
}
 8006758:	bf00      	nop
 800675a:	bd80      	pop	{r7, pc}
 800675c:	50004200 	.word	0x50004200
 8006760:	50004400 	.word	0x50004400
 8006764:	50004710 	.word	0x50004710
 8006768:	50004700 	.word	0x50004700
 800676c:	6b5fca6b 	.word	0x6b5fca6b
 8006770:	01134f00 	.word	0x01134f00
 8006774:	50004600 	.word	0x50004600
 8006778:	01074f00 	.word	0x01074f00
 800677c:	01044f00 	.word	0x01044f00
 8006780:	01034f00 	.word	0x01034f00
 8006784:	50004160 	.word	0x50004160

08006788 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800678e:	4b2f      	ldr	r3, [pc, #188]	; (800684c <SystemCoreClockUpdate+0xc4>)
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d03e      	beq.n	8006818 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800679a:	4b2d      	ldr	r3, [pc, #180]	; (8006850 <SystemCoreClockUpdate+0xc8>)
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80067a6:	4b2b      	ldr	r3, [pc, #172]	; (8006854 <SystemCoreClockUpdate+0xcc>)
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	e002      	b.n	80067b2 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80067ac:	f000 f856 	bl	800685c <OSCHP_GetFrequency>
 80067b0:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80067b2:	4b27      	ldr	r3, [pc, #156]	; (8006850 <SystemCoreClockUpdate+0xc8>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0304 	and.w	r3, r3, #4
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d020      	beq.n	8006800 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80067be:	4b24      	ldr	r3, [pc, #144]	; (8006850 <SystemCoreClockUpdate+0xc8>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	0e1b      	lsrs	r3, r3, #24
 80067c4:	f003 030f 	and.w	r3, r3, #15
 80067c8:	3301      	adds	r3, #1
 80067ca:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80067cc:	4b20      	ldr	r3, [pc, #128]	; (8006850 <SystemCoreClockUpdate+0xc8>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	0a1b      	lsrs	r3, r3, #8
 80067d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067d6:	3301      	adds	r3, #1
 80067d8:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80067da:	4b1d      	ldr	r3, [pc, #116]	; (8006850 <SystemCoreClockUpdate+0xc8>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	0c1b      	lsrs	r3, r3, #16
 80067e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067e4:	3301      	adds	r3, #1
 80067e6:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	fb02 f303 	mul.w	r3, r2, r3
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	fb02 f303 	mul.w	r3, r2, r3
 80067fc:	60fb      	str	r3, [r7, #12]
 80067fe:	e00d      	b.n	800681c <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8006800:	4b13      	ldr	r3, [pc, #76]	; (8006850 <SystemCoreClockUpdate+0xc8>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006808:	3301      	adds	r3, #1
 800680a:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	fbb2 f3f3 	udiv	r3, r2, r3
 8006814:	60fb      	str	r3, [r7, #12]
 8006816:	e001      	b.n	800681c <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8006818:	4b0e      	ldr	r3, [pc, #56]	; (8006854 <SystemCoreClockUpdate+0xcc>)
 800681a:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800681c:	4b0b      	ldr	r3, [pc, #44]	; (800684c <SystemCoreClockUpdate+0xc4>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	b2db      	uxtb	r3, r3
 8006822:	3301      	adds	r3, #1
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	fbb2 f3f3 	udiv	r3, r2, r3
 800682a:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 800682c:	4b07      	ldr	r3, [pc, #28]	; (800684c <SystemCoreClockUpdate+0xc4>)
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	3301      	adds	r3, #1
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	fbb2 f3f3 	udiv	r3, r2, r3
 800683c:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800683e:	4a06      	ldr	r2, [pc, #24]	; (8006858 <SystemCoreClockUpdate+0xd0>)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6013      	str	r3, [r2, #0]
}
 8006844:	bf00      	nop
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	50004600 	.word	0x50004600
 8006850:	50004710 	.word	0x50004710
 8006854:	016e3600 	.word	0x016e3600
 8006858:	2000ffc0 	.word	0x2000ffc0

0800685c <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8006860:	4b02      	ldr	r3, [pc, #8]	; (800686c <OSCHP_GetFrequency+0x10>)
}
 8006862:	4618      	mov	r0, r3
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	00b71b00 	.word	0x00b71b00

08006870 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8006878:	4b14      	ldr	r3, [pc, #80]	; (80068cc <_sbrk+0x5c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d102      	bne.n	8006886 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8006880:	4b12      	ldr	r3, [pc, #72]	; (80068cc <_sbrk+0x5c>)
 8006882:	4a13      	ldr	r2, [pc, #76]	; (80068d0 <_sbrk+0x60>)
 8006884:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8006886:	4b11      	ldr	r3, [pc, #68]	; (80068cc <_sbrk+0x5c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3303      	adds	r3, #3
 8006890:	f023 0303 	bic.w	r3, r3, #3
 8006894:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8006896:	4b0d      	ldr	r3, [pc, #52]	; (80068cc <_sbrk+0x5c>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4413      	add	r3, r2
 800689e:	4a0d      	ldr	r2, [pc, #52]	; (80068d4 <_sbrk+0x64>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d207      	bcs.n	80068b4 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 80068a4:	4b09      	ldr	r3, [pc, #36]	; (80068cc <_sbrk+0x5c>)
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4413      	add	r3, r2
 80068ac:	4a07      	ldr	r2, [pc, #28]	; (80068cc <_sbrk+0x5c>)
 80068ae:	6013      	str	r3, [r2, #0]
    return (base);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	e006      	b.n	80068c2 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 80068b4:	f000 f818 	bl	80068e8 <__errno>
 80068b8:	4603      	mov	r3, r0
 80068ba:	220c      	movs	r2, #12
 80068bc:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
 80068be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20000abc 	.word	0x20000abc
 80068d0:	20000ac0 	.word	0x20000ac0
 80068d4:	2000ffc0 	.word	0x2000ffc0

080068d8 <_init>:

/* Init */
void _init(void)
{}
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
 80068dc:	bf00      	nop
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
	...

080068e8 <__errno>:
 80068e8:	4b01      	ldr	r3, [pc, #4]	; (80068f0 <__errno+0x8>)
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	20000028 	.word	0x20000028

080068f4 <__libc_init_array>:
 80068f4:	b570      	push	{r4, r5, r6, lr}
 80068f6:	4e0d      	ldr	r6, [pc, #52]	; (800692c <__libc_init_array+0x38>)
 80068f8:	4d0d      	ldr	r5, [pc, #52]	; (8006930 <__libc_init_array+0x3c>)
 80068fa:	1b76      	subs	r6, r6, r5
 80068fc:	10b6      	asrs	r6, r6, #2
 80068fe:	d006      	beq.n	800690e <__libc_init_array+0x1a>
 8006900:	2400      	movs	r4, #0
 8006902:	f855 3b04 	ldr.w	r3, [r5], #4
 8006906:	3401      	adds	r4, #1
 8006908:	4798      	blx	r3
 800690a:	42a6      	cmp	r6, r4
 800690c:	d1f9      	bne.n	8006902 <__libc_init_array+0xe>
 800690e:	4e09      	ldr	r6, [pc, #36]	; (8006934 <__libc_init_array+0x40>)
 8006910:	4d09      	ldr	r5, [pc, #36]	; (8006938 <__libc_init_array+0x44>)
 8006912:	1b76      	subs	r6, r6, r5
 8006914:	f7ff ffe0 	bl	80068d8 <_init>
 8006918:	10b6      	asrs	r6, r6, #2
 800691a:	d006      	beq.n	800692a <__libc_init_array+0x36>
 800691c:	2400      	movs	r4, #0
 800691e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006922:	3401      	adds	r4, #1
 8006924:	4798      	blx	r3
 8006926:	42a6      	cmp	r6, r4
 8006928:	d1f9      	bne.n	800691e <__libc_init_array+0x2a>
 800692a:	bd70      	pop	{r4, r5, r6, pc}
 800692c:	20000458 	.word	0x20000458
 8006930:	20000458 	.word	0x20000458
 8006934:	20000458 	.word	0x20000458
 8006938:	20000458 	.word	0x20000458

0800693c <memcmp>:
 800693c:	2a03      	cmp	r2, #3
 800693e:	b510      	push	{r4, lr}
 8006940:	d917      	bls.n	8006972 <memcmp+0x36>
 8006942:	ea40 0c01 	orr.w	ip, r0, r1
 8006946:	f01c 0f03 	tst.w	ip, #3
 800694a:	4604      	mov	r4, r0
 800694c:	460b      	mov	r3, r1
 800694e:	d123      	bne.n	8006998 <memcmp+0x5c>
 8006950:	4619      	mov	r1, r3
 8006952:	4620      	mov	r0, r4
 8006954:	f8d1 e000 	ldr.w	lr, [r1]
 8006958:	f8d0 c000 	ldr.w	ip, [r0]
 800695c:	45f4      	cmp	ip, lr
 800695e:	f104 0404 	add.w	r4, r4, #4
 8006962:	f103 0304 	add.w	r3, r3, #4
 8006966:	d117      	bne.n	8006998 <memcmp+0x5c>
 8006968:	3a04      	subs	r2, #4
 800696a:	2a03      	cmp	r2, #3
 800696c:	4620      	mov	r0, r4
 800696e:	4619      	mov	r1, r3
 8006970:	d8ee      	bhi.n	8006950 <memcmp+0x14>
 8006972:	1e54      	subs	r4, r2, #1
 8006974:	b1a2      	cbz	r2, 80069a0 <memcmp+0x64>
 8006976:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800697a:	3901      	subs	r1, #1
 800697c:	e001      	b.n	8006982 <memcmp+0x46>
 800697e:	18c3      	adds	r3, r0, r3
 8006980:	d00c      	beq.n	800699c <memcmp+0x60>
 8006982:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8006986:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800698a:	4596      	cmp	lr, r2
 800698c:	eba4 030c 	sub.w	r3, r4, ip
 8006990:	d0f5      	beq.n	800697e <memcmp+0x42>
 8006992:	ebae 0002 	sub.w	r0, lr, r2
 8006996:	bd10      	pop	{r4, pc}
 8006998:	1e54      	subs	r4, r2, #1
 800699a:	e7ec      	b.n	8006976 <memcmp+0x3a>
 800699c:	4618      	mov	r0, r3
 800699e:	bd10      	pop	{r4, pc}
 80069a0:	4610      	mov	r0, r2
 80069a2:	bd10      	pop	{r4, pc}

080069a4 <memcpy>:
 80069a4:	4684      	mov	ip, r0
 80069a6:	ea41 0300 	orr.w	r3, r1, r0
 80069aa:	f013 0303 	ands.w	r3, r3, #3
 80069ae:	d16d      	bne.n	8006a8c <memcpy+0xe8>
 80069b0:	3a40      	subs	r2, #64	; 0x40
 80069b2:	d341      	bcc.n	8006a38 <memcpy+0x94>
 80069b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80069b8:	f840 3b04 	str.w	r3, [r0], #4
 80069bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80069c0:	f840 3b04 	str.w	r3, [r0], #4
 80069c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80069c8:	f840 3b04 	str.w	r3, [r0], #4
 80069cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80069d0:	f840 3b04 	str.w	r3, [r0], #4
 80069d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80069d8:	f840 3b04 	str.w	r3, [r0], #4
 80069dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80069e0:	f840 3b04 	str.w	r3, [r0], #4
 80069e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80069e8:	f840 3b04 	str.w	r3, [r0], #4
 80069ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80069f0:	f840 3b04 	str.w	r3, [r0], #4
 80069f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80069f8:	f840 3b04 	str.w	r3, [r0], #4
 80069fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a00:	f840 3b04 	str.w	r3, [r0], #4
 8006a04:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a08:	f840 3b04 	str.w	r3, [r0], #4
 8006a0c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a10:	f840 3b04 	str.w	r3, [r0], #4
 8006a14:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a18:	f840 3b04 	str.w	r3, [r0], #4
 8006a1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a20:	f840 3b04 	str.w	r3, [r0], #4
 8006a24:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a28:	f840 3b04 	str.w	r3, [r0], #4
 8006a2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a30:	f840 3b04 	str.w	r3, [r0], #4
 8006a34:	3a40      	subs	r2, #64	; 0x40
 8006a36:	d2bd      	bcs.n	80069b4 <memcpy+0x10>
 8006a38:	3230      	adds	r2, #48	; 0x30
 8006a3a:	d311      	bcc.n	8006a60 <memcpy+0xbc>
 8006a3c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a40:	f840 3b04 	str.w	r3, [r0], #4
 8006a44:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a48:	f840 3b04 	str.w	r3, [r0], #4
 8006a4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a50:	f840 3b04 	str.w	r3, [r0], #4
 8006a54:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a58:	f840 3b04 	str.w	r3, [r0], #4
 8006a5c:	3a10      	subs	r2, #16
 8006a5e:	d2ed      	bcs.n	8006a3c <memcpy+0x98>
 8006a60:	320c      	adds	r2, #12
 8006a62:	d305      	bcc.n	8006a70 <memcpy+0xcc>
 8006a64:	f851 3b04 	ldr.w	r3, [r1], #4
 8006a68:	f840 3b04 	str.w	r3, [r0], #4
 8006a6c:	3a04      	subs	r2, #4
 8006a6e:	d2f9      	bcs.n	8006a64 <memcpy+0xc0>
 8006a70:	3204      	adds	r2, #4
 8006a72:	d008      	beq.n	8006a86 <memcpy+0xe2>
 8006a74:	07d2      	lsls	r2, r2, #31
 8006a76:	bf1c      	itt	ne
 8006a78:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8006a7c:	f800 3b01 	strbne.w	r3, [r0], #1
 8006a80:	d301      	bcc.n	8006a86 <memcpy+0xe2>
 8006a82:	880b      	ldrh	r3, [r1, #0]
 8006a84:	8003      	strh	r3, [r0, #0]
 8006a86:	4660      	mov	r0, ip
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	2a08      	cmp	r2, #8
 8006a8e:	d313      	bcc.n	8006ab8 <memcpy+0x114>
 8006a90:	078b      	lsls	r3, r1, #30
 8006a92:	d08d      	beq.n	80069b0 <memcpy+0xc>
 8006a94:	f010 0303 	ands.w	r3, r0, #3
 8006a98:	d08a      	beq.n	80069b0 <memcpy+0xc>
 8006a9a:	f1c3 0304 	rsb	r3, r3, #4
 8006a9e:	1ad2      	subs	r2, r2, r3
 8006aa0:	07db      	lsls	r3, r3, #31
 8006aa2:	bf1c      	itt	ne
 8006aa4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8006aa8:	f800 3b01 	strbne.w	r3, [r0], #1
 8006aac:	d380      	bcc.n	80069b0 <memcpy+0xc>
 8006aae:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006ab2:	f820 3b02 	strh.w	r3, [r0], #2
 8006ab6:	e77b      	b.n	80069b0 <memcpy+0xc>
 8006ab8:	3a04      	subs	r2, #4
 8006aba:	d3d9      	bcc.n	8006a70 <memcpy+0xcc>
 8006abc:	3a01      	subs	r2, #1
 8006abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ac2:	f800 3b01 	strb.w	r3, [r0], #1
 8006ac6:	d2f9      	bcs.n	8006abc <memcpy+0x118>
 8006ac8:	780b      	ldrb	r3, [r1, #0]
 8006aca:	7003      	strb	r3, [r0, #0]
 8006acc:	784b      	ldrb	r3, [r1, #1]
 8006ace:	7043      	strb	r3, [r0, #1]
 8006ad0:	788b      	ldrb	r3, [r1, #2]
 8006ad2:	7083      	strb	r3, [r0, #2]
 8006ad4:	4660      	mov	r0, ip
 8006ad6:	4770      	bx	lr

08006ad8 <memset>:
 8006ad8:	0783      	lsls	r3, r0, #30
 8006ada:	b530      	push	{r4, r5, lr}
 8006adc:	d048      	beq.n	8006b70 <memset+0x98>
 8006ade:	1e54      	subs	r4, r2, #1
 8006ae0:	2a00      	cmp	r2, #0
 8006ae2:	d03f      	beq.n	8006b64 <memset+0x8c>
 8006ae4:	b2ca      	uxtb	r2, r1
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	e001      	b.n	8006aee <memset+0x16>
 8006aea:	3c01      	subs	r4, #1
 8006aec:	d33a      	bcc.n	8006b64 <memset+0x8c>
 8006aee:	f803 2b01 	strb.w	r2, [r3], #1
 8006af2:	079d      	lsls	r5, r3, #30
 8006af4:	d1f9      	bne.n	8006aea <memset+0x12>
 8006af6:	2c03      	cmp	r4, #3
 8006af8:	d92d      	bls.n	8006b56 <memset+0x7e>
 8006afa:	b2cd      	uxtb	r5, r1
 8006afc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006b00:	2c0f      	cmp	r4, #15
 8006b02:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006b06:	d936      	bls.n	8006b76 <memset+0x9e>
 8006b08:	f1a4 0210 	sub.w	r2, r4, #16
 8006b0c:	f022 0c0f 	bic.w	ip, r2, #15
 8006b10:	f103 0e20 	add.w	lr, r3, #32
 8006b14:	44e6      	add	lr, ip
 8006b16:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8006b1a:	f103 0210 	add.w	r2, r3, #16
 8006b1e:	e942 5504 	strd	r5, r5, [r2, #-16]
 8006b22:	e942 5502 	strd	r5, r5, [r2, #-8]
 8006b26:	3210      	adds	r2, #16
 8006b28:	4572      	cmp	r2, lr
 8006b2a:	d1f8      	bne.n	8006b1e <memset+0x46>
 8006b2c:	f10c 0201 	add.w	r2, ip, #1
 8006b30:	f014 0f0c 	tst.w	r4, #12
 8006b34:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006b38:	f004 0c0f 	and.w	ip, r4, #15
 8006b3c:	d013      	beq.n	8006b66 <memset+0x8e>
 8006b3e:	f1ac 0304 	sub.w	r3, ip, #4
 8006b42:	f023 0303 	bic.w	r3, r3, #3
 8006b46:	3304      	adds	r3, #4
 8006b48:	4413      	add	r3, r2
 8006b4a:	f842 5b04 	str.w	r5, [r2], #4
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d1fb      	bne.n	8006b4a <memset+0x72>
 8006b52:	f00c 0403 	and.w	r4, ip, #3
 8006b56:	b12c      	cbz	r4, 8006b64 <memset+0x8c>
 8006b58:	b2ca      	uxtb	r2, r1
 8006b5a:	441c      	add	r4, r3
 8006b5c:	f803 2b01 	strb.w	r2, [r3], #1
 8006b60:	429c      	cmp	r4, r3
 8006b62:	d1fb      	bne.n	8006b5c <memset+0x84>
 8006b64:	bd30      	pop	{r4, r5, pc}
 8006b66:	4664      	mov	r4, ip
 8006b68:	4613      	mov	r3, r2
 8006b6a:	2c00      	cmp	r4, #0
 8006b6c:	d1f4      	bne.n	8006b58 <memset+0x80>
 8006b6e:	e7f9      	b.n	8006b64 <memset+0x8c>
 8006b70:	4603      	mov	r3, r0
 8006b72:	4614      	mov	r4, r2
 8006b74:	e7bf      	b.n	8006af6 <memset+0x1e>
 8006b76:	461a      	mov	r2, r3
 8006b78:	46a4      	mov	ip, r4
 8006b7a:	e7e0      	b.n	8006b3e <memset+0x66>

08006b7c <strchr>:
 8006b7c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8006b80:	4603      	mov	r3, r0
 8006b82:	d044      	beq.n	8006c0e <strchr+0x92>
 8006b84:	0782      	lsls	r2, r0, #30
 8006b86:	d132      	bne.n	8006bee <strchr+0x72>
 8006b88:	b510      	push	{r4, lr}
 8006b8a:	6804      	ldr	r4, [r0, #0]
 8006b8c:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
 8006b90:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
 8006b94:	ea8e 0204 	eor.w	r2, lr, r4
 8006b98:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8006b9c:	ea23 0302 	bic.w	r3, r3, r2
 8006ba0:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8006ba4:	ea22 0204 	bic.w	r2, r2, r4
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8006bae:	d10f      	bne.n	8006bd0 <strchr+0x54>
 8006bb0:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8006bb4:	ea84 0c0e 	eor.w	ip, r4, lr
 8006bb8:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 8006bbc:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8006bc0:	ea23 0304 	bic.w	r3, r3, r4
 8006bc4:	ea22 020c 	bic.w	r2, r2, ip
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8006bce:	d0ef      	beq.n	8006bb0 <strchr+0x34>
 8006bd0:	7803      	ldrb	r3, [r0, #0]
 8006bd2:	b923      	cbnz	r3, 8006bde <strchr+0x62>
 8006bd4:	e036      	b.n	8006c44 <strchr+0xc8>
 8006bd6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d032      	beq.n	8006c44 <strchr+0xc8>
 8006bde:	4299      	cmp	r1, r3
 8006be0:	d1f9      	bne.n	8006bd6 <strchr+0x5a>
 8006be2:	bd10      	pop	{r4, pc}
 8006be4:	428a      	cmp	r2, r1
 8006be6:	d011      	beq.n	8006c0c <strchr+0x90>
 8006be8:	079a      	lsls	r2, r3, #30
 8006bea:	4618      	mov	r0, r3
 8006bec:	d0cc      	beq.n	8006b88 <strchr+0xc>
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bf4:	2a00      	cmp	r2, #0
 8006bf6:	d1f5      	bne.n	8006be4 <strchr+0x68>
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4770      	bx	lr
 8006bfc:	0799      	lsls	r1, r3, #30
 8006bfe:	4618      	mov	r0, r3
 8006c00:	d007      	beq.n	8006c12 <strchr+0x96>
 8006c02:	4618      	mov	r0, r3
 8006c04:	3301      	adds	r3, #1
 8006c06:	7802      	ldrb	r2, [r0, #0]
 8006c08:	2a00      	cmp	r2, #0
 8006c0a:	d1f7      	bne.n	8006bfc <strchr+0x80>
 8006c0c:	4770      	bx	lr
 8006c0e:	0782      	lsls	r2, r0, #30
 8006c10:	d1f7      	bne.n	8006c02 <strchr+0x86>
 8006c12:	6802      	ldr	r2, [r0, #0]
 8006c14:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8006c18:	ea23 0302 	bic.w	r3, r3, r2
 8006c1c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8006c20:	d108      	bne.n	8006c34 <strchr+0xb8>
 8006c22:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8006c26:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8006c2a:	ea23 0302 	bic.w	r3, r3, r2
 8006c2e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8006c32:	d0f6      	beq.n	8006c22 <strchr+0xa6>
 8006c34:	7803      	ldrb	r3, [r0, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0e8      	beq.n	8006c0c <strchr+0x90>
 8006c3a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1fb      	bne.n	8006c3a <strchr+0xbe>
 8006c42:	4770      	bx	lr
 8006c44:	4618      	mov	r0, r3
 8006c46:	bd10      	pop	{r4, pc}

08006c48 <clock_config>:
 8006c48:	0250 0104 0000 0001 0000 0000 0000 0001     P...............
 8006c58:	0101 0101                                   ....

08006c5c <pwchars>:
 8006c5c:	6261 6463 6665 6867 6a69 6c6b 6e6d 706f     abcdefghijklmnop
 8006c6c:	7271 7473 7675 7877 7a79 4241 4443 4645     qrstuvwxyzABCDEF
 8006c7c:	4847 4a49 4c4b 4e4d 504f 5251 5453 5655     GHIJKLMNOPQRSTUV
 8006c8c:	5857 5a59 3231 3433 3635 3837 3039 2821     WXYZ1234567890!(
 8006c9c:	2d29 2b5f 7e3d 3a3b 2e2c 3e3c 5d5b 7d7b     )-_+=~;:,.<>[]{}
 8006cac:	3f2f 2426 0000 0000                         /?&$....

08006cb4 <hack>:
 8006cb4:	4345 4f48 3220 416d 4b52 204f 4572 4349     ECHO 2mARKO rEIC
 8006cc4:	4848 5241 3254 3c20 3420 6f68 656d 3d37     HHART2 < 4home7=
 8006cd4:	a7c2 2128 2122 2928 0000 0000 2221 2624     ..(!"!()....!"$&
 8006ce4:	282f 3d29 2b3f 3a3b 3c5f c23e 00a7 0000     /()=?+;:_<>.....
 8006cf4:	5d5b 7d7b 7e5c 007c                         []{}\~|.

08006cfc <KeyboardReport>:
 8006cfc:	0105 0609 01a1 0705 e019 e729 0015 0125     ..........)...%.
 8006d0c:	0175 0895 0281 0195 0875 0181 0805 0119     u.......u.......
 8006d1c:	0529 0595 0175 0291 0195 0375 0191 0015     )...u.....u.....
 8006d2c:	ff25 0705 0019 ff29 0695 0875 0081 00c0     %.....)...u.....

08006d3c <DeviceDescriptor>:
 8006d3c:	0112 0110 0000 4000 03eb 2042 0001 0201     .......@..B ....
 8006d4c:	0100 0000                                   ....

08006d50 <ConfigurationDescriptor>:
 8006d50:	0209 0022 0101 c000 0932 0004 0100 0103     ..".....2.......
 8006d60:	0001 2109 0111 0100 3f22 0700 8105 0803     ...!...."?......
 8006d70:	0100 0000                                   ....

08006d74 <LanguageString>:
 8006d74:	0304 0409 0000 0000                         ........

08006d7c <ManufacturerString>:
 8006d7c:	0350 004d 0000 0061 0000 006e 0000 0075     P.M...a...n...u.
 8006d8c:	0000 0066 0000 0061 0000 0063 0000 0074     ..f...a...c...t.
 8006d9c:	0000 0075 0000 0072 0000 0065 0000 0072     ..u...r...e...r.
 8006dac:	0000 0020 0000 0053 0000 0074 0000 0072     .. ...S...t...r.
 8006dbc:	0000 0069 0000 006e 0000 0067 0000 0000     ..i...n...g.....
 8006dcc:	0000 0000                                   ....

08006dd0 <ProductString>:
 8006dd0:	0348 0044 0000 0065 0000 0073 0000 0063     H.D...e...s...c.
 8006de0:	0000 0072 0000 0069 0000 0070 0000 0074     ..r...i...p...t.
 8006df0:	0000 006f 0000 0072 0000 0020 0000 0053     ..o...r... ...S.
 8006e00:	0000 0074 0000 0072 0000 0069 0000 006e     ..t...r...i...n.
 8006e10:	0000 0067 0000 0000 0000 0000               ..g.........

08006e1c <Driver_USBD0>:
 8006e1c:	5671 0800 56d9 0800 5915 0800 5951 0800     qV...V...Y..QY..
 8006e2c:	5985 0800 59b9 0800 5bc1 0800 5de1 0800     .Y...Y...[...]..
 8006e3c:	60d9 0800 5c0d 0800 5a1d 0800 5aa5 0800     .`...\...Z...Z..
 8006e4c:	5b1d 0800 5d59 0800 6249 0800 6275 0800     .[..Y]..Ib..ub..

08006e5c <_ctype_>:
 8006e5c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8006e6c:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8006e7c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8006e8c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8006e9c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8006eac:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8006ebc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8006ecc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8006edc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08006f60 <_global_impure_ptr>:
 8006f60:	0030 2000                                   0.. 
